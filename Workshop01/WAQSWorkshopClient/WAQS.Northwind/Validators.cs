//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections;
using System.Linq.Expressions;
using System.Text.RegularExpressions;

namespace WAQS.ComponentModel
{
    public partial class Validators
    {
        public static ErrorInfo ValidateRequiredStringProperty<T>(string value, Expression<Func<T>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
        	if (string.IsNullOrWhiteSpace(value))
        	{
                var errorInfo = new RequiredFieldErrorInfo(propertyName);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, RequiredFieldErrorInfo.RequiredFieldErrorCode);
        	return null;
        }
        		
        public static ErrorInfo ValidateRequiredProperty<T>(T? value, Expression<Func<T?>> prop, DataErrorInfo dataErrorInfo)
        	where T : struct
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (! value.HasValue)
        	{
        		var errorInfo = new RequiredFieldErrorInfo(propertyName);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, RequiredFieldErrorInfo.RequiredFieldErrorCode);
        	return null;
        }
        	
        public static ErrorInfo ValidateRequiredObjectProperty<T>(T value, Expression<Func<T>> prop, DataErrorInfo dataErrorInfo)
        	where T : class
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value == null)
        	{
        		var errorInfo = new RequiredFieldErrorInfo(propertyName);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, RequiredFieldErrorInfo.RequiredFieldErrorCode);
        	return null;
        }
        
        public static ErrorInfo ValidateStringMinLength<T>(string value, int minLength, Expression<Func<T>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value != null && value.Length < minLength)
        	{
        		var errorInfo = new MinLengthErrorInfo(propertyName, minLength);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinLengthErrorInfo.MinLengthErrorCode);
        	return null;
        }
        		
        public static ErrorInfo ValidateStringMaxLength<T>(string value, int maxLength, Expression<Func<T>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value != null && value.Length > maxLength)
        	{
        		var errorInfo = new MaxLengthErrorInfo(propertyName, maxLength);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxLengthErrorInfo.MaxLengthErrorCode);
        	return null;
        }
        
        public static ErrorInfo ValidateBinaryMaxLength<T>(Byte[] value, int maxLength, Expression<Func<T>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value != null && value.Length > maxLength)
        	{
        		var errorInfo = new MaxLengthErrorInfo(propertyName, maxLength);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxLengthErrorInfo.MaxLengthErrorCode);
        	return null;
        }
        
        public static ErrorInfo ValidateMinValue(byte value, int minValue, Expression<Func<byte>> prop, DataErrorInfo dataErrorInfo)
        {
        	return ValidateMinValue(value, (byte)minValue, prop, dataErrorInfo);
        }
        public static ErrorInfo ValidateMinValue(byte value, byte minValue, Expression<Func<byte>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<byte>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<byte>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(byte? value, int minValue, Expression<Func<byte?>> prop, DataErrorInfo dataErrorInfo)
        {
        	return ValidateMinValue(value, (byte)minValue, prop, dataErrorInfo);
        }
        public static ErrorInfo ValidateMinValue(byte? value, byte minValue, Expression<Func<byte?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<byte>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<byte?>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(DateTime value, DateTime minValue, Expression<Func<DateTime>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<DateTime>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<DateTime>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(DateTime? value, DateTime minValue, Expression<Func<DateTime?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<DateTime>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<DateTime?>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(DateTimeOffset value, DateTimeOffset minValue, Expression<Func<DateTimeOffset>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<DateTimeOffset>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<DateTimeOffset>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(DateTimeOffset? value, DateTimeOffset minValue, Expression<Func<DateTimeOffset?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<DateTimeOffset>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<DateTimeOffset?>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(TimeSpan value, TimeSpan minValue, Expression<Func<TimeSpan>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<TimeSpan>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<TimeSpan>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(TimeSpan? value, TimeSpan minValue, Expression<Func<TimeSpan?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<TimeSpan>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<TimeSpan?>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(decimal value, decimal minValue, Expression<Func<decimal>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<decimal>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<decimal>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(decimal? value, decimal minValue, Expression<Func<decimal?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<decimal>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<decimal?>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(double value, double minValue, Expression<Func<double>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<double>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<double>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(double? value, double minValue, Expression<Func<double?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<double>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<double?>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(float value, float minValue, Expression<Func<float>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<float>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<float>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(float? value, float minValue, Expression<Func<float?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<float>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<float?>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(short value, int minValue, Expression<Func<short>> prop, DataErrorInfo dataErrorInfo)
        {
        	return ValidateMinValue(value, (short)minValue, prop, dataErrorInfo);
        }
        public static ErrorInfo ValidateMinValue(short value, short minValue, Expression<Func<short>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<short>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<short>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(short? value, int minValue, Expression<Func<short?>> prop, DataErrorInfo dataErrorInfo)
        {
        	return ValidateMinValue(value, (short)minValue, prop, dataErrorInfo);
        }
        public static ErrorInfo ValidateMinValue(short? value, short minValue, Expression<Func<short?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<short>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<short?>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(int value, int minValue, Expression<Func<int>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<int>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<int>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(int? value, int minValue, Expression<Func<int?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<int>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<int?>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(long value, long minValue, Expression<Func<long>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<long>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<long>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(long? value, long minValue, Expression<Func<long?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<long>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<long?>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(sbyte value, int minValue, Expression<Func<sbyte>> prop, DataErrorInfo dataErrorInfo)
        {
        	return ValidateMinValue(value, (sbyte)minValue, prop, dataErrorInfo);
        }
        public static ErrorInfo ValidateMinValue(sbyte value, sbyte minValue, Expression<Func<sbyte>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<sbyte>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<sbyte>.MinValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMinValue(sbyte? value, int minValue, Expression<Func<sbyte?>> prop, DataErrorInfo dataErrorInfo)
        {
        	return ValidateMinValue(value, (sbyte)minValue, prop, dataErrorInfo);
        }
        public static ErrorInfo ValidateMinValue(sbyte? value, sbyte minValue, Expression<Func<sbyte?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value < minValue)
        	{
        		var errorInfo = new MinValueErrorInfo<sbyte>(propertyName, minValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MinValueErrorInfo<sbyte?>.MinValueErrorCode);
        	return null;
        }
        
        public static ErrorInfo ValidateMaxValue(byte value, int maxValue, Expression<Func<byte>> prop, DataErrorInfo dataErrorInfo)
        {
        	return ValidateMaxValue(value, (byte)maxValue, prop, dataErrorInfo);
        }
        public static ErrorInfo ValidateMaxValue(byte value, byte maxValue, Expression<Func<byte>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<byte>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<byte>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(byte? value, int maxValue, Expression<Func<byte?>> prop, DataErrorInfo dataErrorInfo)
        {
        	return ValidateMaxValue(value, (byte)maxValue, prop, dataErrorInfo);
        }
        public static ErrorInfo ValidateMaxValue(byte? value, byte maxValue, Expression<Func<byte?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<byte>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<byte?>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(DateTime value, DateTime maxValue, Expression<Func<DateTime>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<DateTime>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<DateTime>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(DateTime? value, DateTime maxValue, Expression<Func<DateTime?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<DateTime>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<DateTime?>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(DateTimeOffset value, DateTimeOffset maxValue, Expression<Func<DateTimeOffset>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<DateTimeOffset>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<DateTimeOffset>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(DateTimeOffset? value, DateTimeOffset maxValue, Expression<Func<DateTimeOffset?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<DateTimeOffset>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<DateTimeOffset?>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(TimeSpan value, TimeSpan maxValue, Expression<Func<TimeSpan>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<TimeSpan>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<TimeSpan>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(TimeSpan? value, TimeSpan maxValue, Expression<Func<TimeSpan?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<TimeSpan>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<TimeSpan?>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(decimal value, decimal maxValue, Expression<Func<decimal>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<decimal>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<decimal>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(decimal? value, decimal maxValue, Expression<Func<decimal?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<decimal>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<decimal?>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(double value, double maxValue, Expression<Func<double>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<double>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<double>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(double? value, double maxValue, Expression<Func<double?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<double>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<double?>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(float value, float maxValue, Expression<Func<float>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<float>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<float>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(float? value, float maxValue, Expression<Func<float?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<float>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<float?>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(short value, int maxValue, Expression<Func<short>> prop, DataErrorInfo dataErrorInfo)
        {
        	return ValidateMaxValue(value, (short)maxValue, prop, dataErrorInfo);
        }
        public static ErrorInfo ValidateMaxValue(short value, short maxValue, Expression<Func<short>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<short>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<short>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(short? value, int maxValue, Expression<Func<short?>> prop, DataErrorInfo dataErrorInfo)
        {
        	return ValidateMaxValue(value, (short)maxValue, prop, dataErrorInfo);
        }
        public static ErrorInfo ValidateMaxValue(short? value, short maxValue, Expression<Func<short?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<short>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<short?>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(int value, int maxValue, Expression<Func<int>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<int>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<int>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(int? value, int maxValue, Expression<Func<int?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<int>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<int?>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(long value, long maxValue, Expression<Func<long>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<long>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<long>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(long? value, long maxValue, Expression<Func<long?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<long>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<long?>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(sbyte value, int maxValue, Expression<Func<sbyte>> prop, DataErrorInfo dataErrorInfo)
        {
        	return ValidateMaxValue(value, (sbyte)maxValue, prop, dataErrorInfo);
        }
        public static ErrorInfo ValidateMaxValue(sbyte value, sbyte maxValue, Expression<Func<sbyte>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<sbyte>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<sbyte>.MaxValueErrorCode);
        	return null;
        }
        public static ErrorInfo ValidateMaxValue(sbyte? value, int maxValue, Expression<Func<sbyte?>> prop, DataErrorInfo dataErrorInfo)
        {
        	return ValidateMaxValue(value, (sbyte)maxValue, prop, dataErrorInfo);
        }
        public static ErrorInfo ValidateMaxValue(sbyte? value, sbyte maxValue, Expression<Func<sbyte?>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (value.HasValue && value.Value > maxValue)
        	{
        		var errorInfo = new MaxValueErrorInfo<sbyte>(propertyName, maxValue);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, MaxValueErrorInfo<sbyte?>.MaxValueErrorCode);
        	return null;
        }
        	
        public static ErrorInfo ValidatePattern(string value, string pattern, Expression<Func<string>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            if (! (value == null || Regex.IsMatch(value, pattern)))
        	{
        		var errorInfo = new PatternErrorInfo(propertyName, pattern);
        		dataErrorInfo.AddErrorForProperty(propertyName, errorInfo);
        		return errorInfo;
        	}
        	dataErrorInfo.RemoveErrorFromProperty(propertyName, PatternErrorInfo.PatternErrorCode);
        	return null;
        }
        	
        public static ErrorInfo DefineErrors<T>(string message, Expression<Func<T>> prop, DataErrorInfo dataErrorInfo)
        {
            var propertyName = PropertyName.GetPropertyName(prop);
            dataErrorInfo.RemoveErrorFromProperty(propertyName, ValidateErrorInfo.ValidateErrorCode);
        	if (string.IsNullOrEmpty(message))
        		return null;
        	var value = new ValidateErrorInfo(message);
        	dataErrorInfo.AddErrorForProperty(propertyName, value);
        	return value;
        }
    }
}
