//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;
using WAQS.Entities;

namespace WAQSWorkshopServer
{
    [DataContract(IsReference = true, Namespace = "http://Northwind/Entities")]
    [KnownType(typeof(OrderDetail))]
    public partial class Product : IEntity
    {
        public Product()
        {
            EntitiesInitializer.Initialize(this);
            ProductInitialize();
        }
        partial void ProductInitialize();
    
    #region Simple Properties
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id == value)
                    return;
    
                OnIdChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                _id = value;
                OnIdChanged(value);
                OnPropertyChanged("Id");
            }
        }
        private int _id;
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged(int value);
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name == value)
                    return;
    
                OnNameChanging(ref value);
                _name = value;
                OnNameChanged(value);
                OnPropertyChanged("Name");
            }
        }
        private string _name;
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged(string value);
        [DataMember]
        public Nullable<int> SupplierId
        {
            get { return _supplierId; }
            set
            {
                if (_supplierId == value)
                    return;
    
                OnSupplierIdChanging(ref value);
                _supplierId = value;
                OnSupplierIdChanged(value);
                OnPropertyChanged("SupplierId");
            }
        }
        private Nullable<int> _supplierId;
        partial void OnSupplierIdChanging(ref Nullable<int> value);
        partial void OnSupplierIdChanged(Nullable<int> value);
        [DataMember]
        public Nullable<int> CategoryId
        {
            get { return _categoryId; }
            set
            {
                if (_categoryId == value)
                    return;
    
                OnCategoryIdChanging(ref value);
                _categoryId = value;
                OnCategoryIdChanged(value);
                OnPropertyChanged("CategoryId");
            }
        }
        private Nullable<int> _categoryId;
        partial void OnCategoryIdChanging(ref Nullable<int> value);
        partial void OnCategoryIdChanged(Nullable<int> value);
        [DataMember]
        public string QuantityPerUnit
        {
            get { return _quantityPerUnit; }
            set
            {
                if (_quantityPerUnit == value)
                    return;
    
                OnQuantityPerUnitChanging(ref value);
                _quantityPerUnit = value;
                OnQuantityPerUnitChanged(value);
                OnPropertyChanged("QuantityPerUnit");
            }
        }
        private string _quantityPerUnit;
        partial void OnQuantityPerUnitChanging(ref string value);
        partial void OnQuantityPerUnitChanged(string value);
        [DataMember]
        public double UnitPrice
        {
            get { return _unitPrice; }
            set
            {
                if (_unitPrice == value)
                    return;
    
                OnUnitPriceChanging(ref value);
                _unitPrice = value;
                OnUnitPriceChanged(value);
                OnPropertyChanged("UnitPrice");
            }
        }
        private double _unitPrice;
        partial void OnUnitPriceChanging(ref double value);
        partial void OnUnitPriceChanged(double value);
        [DataMember]
        public bool Discontinued
        {
            get { return _discontinued; }
            set
            {
                if (_discontinued == value)
                    return;
    
                OnDiscontinuedChanging(ref value);
                _discontinued = value;
                OnDiscontinuedChanged(value);
                OnPropertyChanged("Discontinued");
            }
        }
        private bool _discontinued;
        partial void OnDiscontinuedChanging(ref bool value);
        partial void OnDiscontinuedChanged(bool value);

    #endregion

    #region Navigation Properties
        [DataMember]
        public TrackableCollection<OrderDetail> OrderDetails
        {
            get
            {
                if (_orderDetails == null)
                {
                    _orderDetails = new TrackableCollection<OrderDetail>() { Owner = this, Name = "OrderDetails" };
                    _orderDetails.CollectionChanged += FixupOrderDetails;
                }
                return _orderDetails;
            }
            set
            {
                if (ReferenceEquals(_orderDetails, value))
                    return;
    
                if (ChangeTracker.ChangeTrackingEnabled)
                    throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    
                if (_orderDetails != null)
                {
                    _orderDetails.CollectionChanged -= FixupOrderDetails;
                }
                _orderDetails = value;
                if (_orderDetails != null)
                {
                    _orderDetails.Owner = this;
                    _orderDetails.Name = "OrderDetails";
                    _orderDetails.CollectionChanged += FixupOrderDetails;
                }
                OnNavigationPropertyChanged("OrderDetails");
            }
        }
        private TrackableCollection<OrderDetail> _orderDetails;

    #endregion

    #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
                if (! (IsDeserializing || ChangeTracker.ModifiedProperties.Contains(propertyName)))
                    ChangeTracker.ModifiedProperties.Add(propertyName);
            }
            OnCustomPropertyChanged(propertyName);
        }
        partial void OnCustomPropertyChanged(string propertyName);
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            OnCustomNavigationPropertyChanged(propertyName);
        }
        partial void OnCustomNavigationPropertyChanged(string propertyName);
    
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                _changeTracker = value;
                if(_changeTracker != null)
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            switch (e.NewState)
            {
                case ObjectState.Deleted:
                    IsDeleting = true;
                    ClearNavigationProperties();
                    IsDeleting = false;
                    break;
                case ObjectState.Detached:
                    ClearNavigationProperties();
                    break;
            }
        }
        
        private bool _isDeserializing;
        public bool IsDeserializing 
        { 
            get { return _isDeserializing; } 
            set 
            { 
                if (_isDeserializing == value)
                    return;
                _isDeserializing = value; 
            }
        }
        public bool IsInitializingRelationships { get; set; }
    
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            OrderDetails.Clear();
        }

    #endregion

    #region Association Fixup
        private bool IsDeleting { get; set; }
        internal virtual void Detach()
        {
            ChangeTracker.State = ObjectState.Detached;
        }
    
        private void FixupOrderDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
                return;
    
            if (e.NewItems != null)
            {
                foreach (OrderDetail item in e.NewItems)
                {
                    item.Product = this;
                    if (ChangeTracker != null && ChangeTracker.ChangeTrackingEnabled && item.ChangeTracker != null && item.ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                            item.MarkAsAdded();
                        ChangeTracker.RecordAdditionToCollectionProperties("OrderDetails", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrderDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                    if (ChangeTracker != null && ChangeTracker.ChangeTrackingEnabled && item.ChangeTracker != null && item.ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OrderDetails", item);
                    }
                }
            }
        }

    #endregion

     
    #region EntityKey
        private Guid? _dataTransferEntityKey;
        [DataMember]
        public virtual Guid DataTransferEntityKey 
        { 
            get { return _dataTransferEntityKey ?? (_dataTransferEntityKey = Guid.NewGuid()).Value; }
            set { _dataTransferEntityKey = value; } 
        }

    #endregion

    
        void IEntity.RemoveNavigationProperties()
        {
            OrderDetails.Clear();
        }
    }
}
