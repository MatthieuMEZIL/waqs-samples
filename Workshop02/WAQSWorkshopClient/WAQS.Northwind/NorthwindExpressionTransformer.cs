//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using WAQS.ClientContext.Interfaces.ExpressionSerialization;

namespace WAQSWorkshopClient.ClientContext
{
    public class NorthwindExpressionTransformer : IExpressionTransformer
    {
        public Expression TransformExpression(Expression expression)
        {
            var methodCallExpression = expression as MethodCallExpression;
            MethodInfo method;
            if (methodCallExpression != null && (method = methodCallExpression.Method).Name == "Contains" && (method.DeclaringType == typeof(Enumerable) || typeof(IEnumerable).IsAssignableFrom(method.DeclaringType)))
            {
                int argIndex = 0;
                MemberExpression memberExpression;
                if (methodCallExpression.Object == null)
                    memberExpression = methodCallExpression.Arguments[argIndex++] as MemberExpression;
                else
                    memberExpression = methodCallExpression.Object as MemberExpression;
                if (memberExpression != null && memberExpression.Expression is ConstantExpression)
                {
                    if (typeof(IEnumerable<WAQSWorkshopClient.Customer>).IsAssignableFrom(memberExpression.Type))
                    {
                        var entitiesKeys = Expression.Lambda<Func<IEnumerable<WAQSWorkshopClient.Customer>>>(memberExpression).Compile()().Select(e => e.Id);
                        var exp = (Expression<Func<IEnumerable<string>>>)(() => entitiesKeys);
                        return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Contains" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(string)), exp.Body, Expression.MakeMemberAccess(methodCallExpression.Arguments[argIndex], typeof(WAQSWorkshopClient.Customer).GetProperty("Id")));
                    }
                    if (typeof(IEnumerable<WAQSWorkshopClient.Employee>).IsAssignableFrom(memberExpression.Type))
                    {
                        var entitiesKeys = Expression.Lambda<Func<IEnumerable<WAQSWorkshopClient.Employee>>>(memberExpression).Compile()().Select(e => e.Id);
                        var exp = (Expression<Func<IEnumerable<int>>>)(() => entitiesKeys);
                        return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Contains" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(int)), exp.Body, Expression.MakeMemberAccess(methodCallExpression.Arguments[argIndex], typeof(WAQSWorkshopClient.Employee).GetProperty("Id")));
                    }
                    if (typeof(IEnumerable<WAQSWorkshopClient.InvoiceDetail>).IsAssignableFrom(memberExpression.Type))
                    {
                        var entitiesKeys = Expression.Lambda<Func<IEnumerable<WAQSWorkshopClient.InvoiceDetail>>>(memberExpression).Compile()().Select(e => e.OrderDetailId);
                        var exp = (Expression<Func<IEnumerable<int>>>)(() => entitiesKeys);
                        return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Contains" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(int)), exp.Body, Expression.MakeMemberAccess(methodCallExpression.Arguments[argIndex], typeof(WAQSWorkshopClient.InvoiceDetail).GetProperty("OrderDetailId")));
                    }
                    if (typeof(IEnumerable<WAQSWorkshopClient.Invoice>).IsAssignableFrom(memberExpression.Type))
                    {
                        var entitiesKeys = Expression.Lambda<Func<IEnumerable<WAQSWorkshopClient.Invoice>>>(memberExpression).Compile()().Select(e => e.OrderId);
                        var exp = (Expression<Func<IEnumerable<int>>>)(() => entitiesKeys);
                        return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Contains" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(int)), exp.Body, Expression.MakeMemberAccess(methodCallExpression.Arguments[argIndex], typeof(WAQSWorkshopClient.Invoice).GetProperty("OrderId")));
                    }
                    if (typeof(IEnumerable<WAQSWorkshopClient.OrderDetail>).IsAssignableFrom(memberExpression.Type))
                    {
                        var entitiesKeys = Expression.Lambda<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>>>(memberExpression).Compile()().Select(e => e.Id);
                        var exp = (Expression<Func<IEnumerable<int>>>)(() => entitiesKeys);
                        return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Contains" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(int)), exp.Body, Expression.MakeMemberAccess(methodCallExpression.Arguments[argIndex], typeof(WAQSWorkshopClient.OrderDetail).GetProperty("Id")));
                    }
                    if (typeof(IEnumerable<WAQSWorkshopClient.Order>).IsAssignableFrom(memberExpression.Type))
                    {
                        var entitiesKeys = Expression.Lambda<Func<IEnumerable<WAQSWorkshopClient.Order>>>(memberExpression).Compile()().Select(e => e.Id);
                        var exp = (Expression<Func<IEnumerable<int>>>)(() => entitiesKeys);
                        return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Contains" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(int)), exp.Body, Expression.MakeMemberAccess(methodCallExpression.Arguments[argIndex], typeof(WAQSWorkshopClient.Order).GetProperty("Id")));
                    }
                    if (typeof(IEnumerable<WAQSWorkshopClient.Product>).IsAssignableFrom(memberExpression.Type))
                    {
                        var entitiesKeys = Expression.Lambda<Func<IEnumerable<WAQSWorkshopClient.Product>>>(memberExpression).Compile()().Select(e => e.Id);
                        var exp = (Expression<Func<IEnumerable<int>>>)(() => entitiesKeys);
                        return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Contains" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(int)), exp.Body, Expression.MakeMemberAccess(methodCallExpression.Arguments[argIndex], typeof(WAQSWorkshopClient.Product).GetProperty("Id")));
                    }
                }
                else
                {
                    var methodArg = methodCallExpression.Arguments[argIndex] as MemberExpression;
                    if (methodArg != null && methodArg.Expression is ConstantExpression)
                    {
                        if (methodArg.Type == typeof(Customer))
                        {
                            var entity = Expression.Lambda<Func<Customer>>(methodArg).Compile()();
                            var exp = (Expression<Func<Customer, bool>>)(e => e.Id == entity.Id);
                            return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(Customer)), memberExpression, exp);
                        }
                        if (methodArg.Type == typeof(Employee))
                        {
                            var entity = Expression.Lambda<Func<Employee>>(methodArg).Compile()();
                            var exp = (Expression<Func<Employee, bool>>)(e => e.Id == entity.Id);
                            return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(Employee)), memberExpression, exp);
                        }
                        if (methodArg.Type == typeof(Invoice))
                        {
                            var entity = Expression.Lambda<Func<Invoice>>(methodArg).Compile()();
                            var exp = (Expression<Func<Invoice, bool>>)(e => e.OrderId == entity.OrderId);
                            return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(Invoice)), memberExpression, exp);
                        }
                        if (methodArg.Type == typeof(InvoiceDetail))
                        {
                            var entity = Expression.Lambda<Func<InvoiceDetail>>(methodArg).Compile()();
                            var exp = (Expression<Func<InvoiceDetail, bool>>)(e => e.OrderDetailId == entity.OrderDetailId);
                            return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(InvoiceDetail)), memberExpression, exp);
                        }
                        if (methodArg.Type == typeof(Order))
                        {
                            var entity = Expression.Lambda<Func<Order>>(methodArg).Compile()();
                            var exp = (Expression<Func<Order, bool>>)(e => e.Id == entity.Id);
                            return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(Order)), memberExpression, exp);
                        }
                        if (methodArg.Type == typeof(OrderDetail))
                        {
                            var entity = Expression.Lambda<Func<OrderDetail>>(methodArg).Compile()();
                            var exp = (Expression<Func<OrderDetail, bool>>)(e => e.Id == entity.Id);
                            return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(OrderDetail)), memberExpression, exp);
                        }
                        if (methodArg.Type == typeof(Product))
                        {
                            var entity = Expression.Lambda<Func<Product>>(methodArg).Compile()();
                            var exp = (Expression<Func<Product, bool>>)(e => e.Id == entity.Id);
                            return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(Product)), memberExpression, exp);
                        }
                    }
                }
            }
            else
            {
                var binaryExpression = expression as BinaryExpression;
                MemberExpression leftMemberExpression, rightMemberExpression;
                if (binaryExpression != null && (binaryExpression.NodeType == ExpressionType.Equal || binaryExpression.NodeType == ExpressionType.NotEqual) && binaryExpression.Left.Type == typeof(Customer) && ((leftMemberExpression = binaryExpression.Left as MemberExpression) != null && leftMemberExpression.Expression is ConstantExpression || (rightMemberExpression = binaryExpression.Right as MemberExpression) != null && rightMemberExpression.Expression is ConstantExpression))
                {
                    PropertyInfo propertyInfo;
                    return Expression.MakeBinary(binaryExpression.NodeType, Expression.MakeMemberAccess(binaryExpression.Left, propertyInfo = typeof(Customer).GetProperty("Id")), Expression.MakeMemberAccess(binaryExpression.Right, propertyInfo));
                }
                if (binaryExpression != null && (binaryExpression.NodeType == ExpressionType.Equal || binaryExpression.NodeType == ExpressionType.NotEqual) && binaryExpression.Left.Type == typeof(Employee) && ((leftMemberExpression = binaryExpression.Left as MemberExpression) != null && leftMemberExpression.Expression is ConstantExpression || (rightMemberExpression = binaryExpression.Right as MemberExpression) != null && rightMemberExpression.Expression is ConstantExpression))
                {
                    PropertyInfo propertyInfo;
                    return Expression.MakeBinary(binaryExpression.NodeType, Expression.MakeMemberAccess(binaryExpression.Left, propertyInfo = typeof(Employee).GetProperty("Id")), Expression.MakeMemberAccess(binaryExpression.Right, propertyInfo));
                }
                if (binaryExpression != null && (binaryExpression.NodeType == ExpressionType.Equal || binaryExpression.NodeType == ExpressionType.NotEqual) && binaryExpression.Left.Type == typeof(Invoice) && ((leftMemberExpression = binaryExpression.Left as MemberExpression) != null && leftMemberExpression.Expression is ConstantExpression || (rightMemberExpression = binaryExpression.Right as MemberExpression) != null && rightMemberExpression.Expression is ConstantExpression))
                {
                    PropertyInfo propertyInfo;
                    return Expression.MakeBinary(binaryExpression.NodeType, Expression.MakeMemberAccess(binaryExpression.Left, propertyInfo = typeof(Invoice).GetProperty("OrderId")), Expression.MakeMemberAccess(binaryExpression.Right, propertyInfo));
                }
                if (binaryExpression != null && (binaryExpression.NodeType == ExpressionType.Equal || binaryExpression.NodeType == ExpressionType.NotEqual) && binaryExpression.Left.Type == typeof(InvoiceDetail) && ((leftMemberExpression = binaryExpression.Left as MemberExpression) != null && leftMemberExpression.Expression is ConstantExpression || (rightMemberExpression = binaryExpression.Right as MemberExpression) != null && rightMemberExpression.Expression is ConstantExpression))
                {
                    PropertyInfo propertyInfo;
                    return Expression.MakeBinary(binaryExpression.NodeType, Expression.MakeMemberAccess(binaryExpression.Left, propertyInfo = typeof(InvoiceDetail).GetProperty("OrderDetailId")), Expression.MakeMemberAccess(binaryExpression.Right, propertyInfo));
                }
                if (binaryExpression != null && (binaryExpression.NodeType == ExpressionType.Equal || binaryExpression.NodeType == ExpressionType.NotEqual) && binaryExpression.Left.Type == typeof(Order) && ((leftMemberExpression = binaryExpression.Left as MemberExpression) != null && leftMemberExpression.Expression is ConstantExpression || (rightMemberExpression = binaryExpression.Right as MemberExpression) != null && rightMemberExpression.Expression is ConstantExpression))
                {
                    PropertyInfo propertyInfo;
                    return Expression.MakeBinary(binaryExpression.NodeType, Expression.MakeMemberAccess(binaryExpression.Left, propertyInfo = typeof(Order).GetProperty("Id")), Expression.MakeMemberAccess(binaryExpression.Right, propertyInfo));
                }
                if (binaryExpression != null && (binaryExpression.NodeType == ExpressionType.Equal || binaryExpression.NodeType == ExpressionType.NotEqual) && binaryExpression.Left.Type == typeof(OrderDetail) && ((leftMemberExpression = binaryExpression.Left as MemberExpression) != null && leftMemberExpression.Expression is ConstantExpression || (rightMemberExpression = binaryExpression.Right as MemberExpression) != null && rightMemberExpression.Expression is ConstantExpression))
                {
                    PropertyInfo propertyInfo;
                    return Expression.MakeBinary(binaryExpression.NodeType, Expression.MakeMemberAccess(binaryExpression.Left, propertyInfo = typeof(OrderDetail).GetProperty("Id")), Expression.MakeMemberAccess(binaryExpression.Right, propertyInfo));
                }
                if (binaryExpression != null && (binaryExpression.NodeType == ExpressionType.Equal || binaryExpression.NodeType == ExpressionType.NotEqual) && binaryExpression.Left.Type == typeof(Product) && ((leftMemberExpression = binaryExpression.Left as MemberExpression) != null && leftMemberExpression.Expression is ConstantExpression || (rightMemberExpression = binaryExpression.Right as MemberExpression) != null && rightMemberExpression.Expression is ConstantExpression))
                {
                    PropertyInfo propertyInfo;
                    return Expression.MakeBinary(binaryExpression.NodeType, Expression.MakeMemberAccess(binaryExpression.Left, propertyInfo = typeof(Product).GetProperty("Id")), Expression.MakeMemberAccess(binaryExpression.Right, propertyInfo));
                }
            }
            return expression;
        }
    }
}
