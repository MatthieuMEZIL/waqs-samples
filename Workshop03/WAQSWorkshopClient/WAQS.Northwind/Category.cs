//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

            using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using WAQS.ClientContext;
using WAQS.ClientContext.Interfaces;
using WAQS.ClientContext.Interfaces.Errors;
using WAQS.ComponentModel;
using WAQS.Entities;
using WAQS.EntitiesTracking;

namespace WAQSWorkshopClient
{
    [DataContract(IsReference = true, Namespace = "http://Northwind/Entities")]
    [KnownType(typeof (Product))]
    public partial class Category : DynamicType, IEntityWithErrors
    {
#region DynamicType
        protected override ICustomTypeDescriptor CustomTypeDescriptor
        {
            get
            {
                return new DynamicType<Category>(this, CustomPropertyDescriptors);
            }
        }

        protected override IEnumerable<CustomPropertyDescriptor> CustomPropertyDescriptors
        {
            get
            {
                return DynamicType<Category>.CustomProperties;
            }
        }

#endregion
#region Simple Properties
        [DataMember]
        public int Id
        {
            get
            {
                return _id;
            }

            set
            {
                if (_id == value)
                {
                    return;
                }

                OnIdPropertyChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                _id = value;
                if (!ChangeTracker.Saving)
                {
                    OnIdPropertyChanged(value);
                    OnPropertyChanged("Id");
                    ResetEntityKey();
                }
            }
        }

        private int _id;
        partial void OnIdPropertyChanging(ref int value);
        partial void OnIdPropertyChanged(int value);
        [DataMember]
        public string Name
        {
            get
            {
                return _name;
            }

            set
            {
                if (_name == value)
                {
                    if (!(IsDeserializing || ChangeTracker.Saving))
                        ValidateNameRequired(value);
                    return;
                }

                OnNamePropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateNameRequired(value);
                    ValidateNameMaxLength(value);
                }

                _name = value;
                if (!ChangeTracker.Saving)
                {
                    OnNamePropertyChanged(value);
                    OnPropertyChanged("Name");
                }
            }
        }

        private string _name;
        partial void OnNamePropertyChanging(ref string value);
        partial void OnNamePropertyChanged(string value);
        protected virtual Error ValidateNameRequired(string value)
        {
            var errorInfo = Validators.ValidateRequiredStringProperty(value, () => Name, DataErrorInfo);
            var error = Errors.Name.FirstOrDefault(e => e.Key == "NameRequired");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Name.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Name.Add(error = new Error{Criticity = Criticity.Mandatory, Key = "NameRequired", Message = errorInfo.Message, ErrorInfo = errorInfo});
            return error;
        }

        protected virtual Error ValidateNameMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 15, () => Name, DataErrorInfo);
            var error = Errors.Name.FirstOrDefault(e => e.Key == "NameMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Name.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Name.Add(error = new Error{Criticity = Criticity.Error, Key = "NameMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo});
            return error;
        }

        [DataMember]
        public string Description
        {
            get
            {
                return _description;
            }

            set
            {
                if (_description == value)
                {
                    return;
                }

                OnDescriptionPropertyChanging(ref value);
                _description = value;
                if (!ChangeTracker.Saving)
                {
                    OnDescriptionPropertyChanged(value);
                    OnPropertyChanged("Description");
                }
            }
        }

        private string _description;
        partial void OnDescriptionPropertyChanging(ref string value);
        partial void OnDescriptionPropertyChanged(string value);
        [DataMember]
        public byte[] Picture
        {
            get
            {
                return _picture;
            }

            set
            {
                if (_picture == value)
                {
                    return;
                }

                OnPicturePropertyChanging(ref value);
                _picture = value;
                if (!ChangeTracker.Saving)
                {
                    OnPicturePropertyChanged(value);
                    OnPropertyChanged("Picture");
                }
            }
        }

        private byte[] _picture;
        partial void OnPicturePropertyChanging(ref byte[] value);
        partial void OnPicturePropertyChanged(byte[] value);
#endregion
#region Complex Properties
#endregion
#region Navigation Properties
        [DataMember]
        public TrackableCollection<Product> Products
        {
            get
            {
                if (!ChangeTracker.Saving)
                    OnGetProducts();
                if (OnGetProductsAction != null)
                    OnGetProductsAction();
                if (_products == null)
                {
                    _products = new TrackableCollection<Product>();
                    SetFixupProducts();
                    OnProductsPropertyChanging(null, _products);
                    OnProductsPropertyChanged(null, _products);
                }

                return _products;
            }

            set
            {
                if (ReferenceEquals(_products, value))
                    return;
                if (ChangeTracker.ChangeTrackingEnabled)
                    throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                var oldProducts = _products;
                if (_products != null)
                {
                    _products.CollectionChanged -= FixupProducts;
                }

                _products = value;
                if (_products != null)
                {
                    SetFixupProducts();
                }

                OnProductsPropertyChanging(oldProducts, _products);
                OnProductsPropertyChanged(oldProducts, _products);
                OnNavigationPropertyChanged("Products");
            }
        }

        partial void OnGetProducts();
        public Action OnGetProductsAction
        {
            get;
            set;
        }

        partial void OnProductsPropertyChanged(TrackableCollection<Product> oldValue, TrackableCollection<Product> newValue);
        private TrackableCollection<Product> _products;
        private void SetFixupProducts()
        {
            _products.CollectionChanged += FixupProducts;
            var productsAsITrackableCollection = (ITrackableCollection<Product>)_products;
            productsAsITrackableCollection.GetWhereExpression = e => e.CategoryId == Id;
            productsAsITrackableCollection.GetClientContext = () =>
            {
                IClientEntitySet clientEntitySet = ClientEntitySetExtensions.GetClientEntitySet(this);
                return clientEntitySet == null || ChangeTracker.State == ObjectState.Detached ? null : clientEntitySet.Context;
            }

            ;
        }

        protected virtual void OnProductsPropertyChanging(TrackableCollection<Product> oldValue, TrackableCollection<Product> newValue)
        {
            if (ProductsPropertyChanging != null)
                ProductsPropertyChanging(oldValue, newValue);
        }

        protected internal event Action<TrackableCollection<Product>, TrackableCollection<Product>> ProductsPropertyChanging;
#endregion
#region Specifications
        public virtual IEnumerable<Error> ValidateOnClient(bool force = false)
        {
            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("Name"))
            {
                Error error = ValidateNameRequired(Name);
                if (error != null)
                    yield return error;
                error = ValidateNameMaxLength(Name);
                if (error != null)
                    yield return error;
            }

            List<Error> errors = null;
            GetCustomValidation(ref errors);
            if (errors != null)
                foreach (var er in errors)
                    yield return er;
        }

        partial void GetCustomValidation(ref List<Error> errors);
#endregion
#region ChangeTracking
        protected virtual void AddValidationProperty(string propertyName)
        {
            if (!ChangeTracker.ValidationProperties.Contains(propertyName))
                ChangeTracker.ValidationProperties.Add(propertyName);
        }

        protected virtual void OnPropertyChanged(string propertyName, bool isTracked = true)
        {
            if (propertyName != "Id" && isTracked && ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && (ChangeTracker.State & ObjectState.Deleted) == 0)
            {
                if (!(IsDeserializing || ChangeTracker.ModifiedProperties.Contains(propertyName)))
                    ChangeTracker.ModifiedProperties.Add(propertyName);
                ChangeTracker.State = ObjectState.Modified;
            }

            NotifyPropertyChanged.RaisePropertyChanged(propertyName);
            OnPropertyChangedExtension(propertyName);
        }

        partial void OnPropertyChangedExtension(string propertyName);
        protected virtual void OnNavigationPropertyChanged(string propertyName)
        {
            NotifyPropertyChanged.RaisePropertyChanged(propertyName);
            OnNavigationPropertyChangedExtension(propertyName);
            RaiseNavigationPropertyChanged(propertyName);
        }

        partial void OnNavigationPropertyChangedExtension(string propertyName);
        protected virtual void RaiseNavigationPropertyChanged(string propertyName)
        {
            if (NavigationPropertyChanged != null)
                NavigationPropertyChanged(this, propertyName);
        }

        public event Action<Category, string> NavigationPropertyChanged;
        private ObjectChangeTracker _changeTracker;
        [DataMember]
        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanged += HandleObjectStateChanged;
                }

                return _changeTracker;
            }

            set
            {
                if (_changeTracker != null)
                    _changeTracker.ObjectStateChanged -= HandleObjectStateChanged;
                _changeTracker = value;
                if (_changeTracker != null)
                    _changeTracker.ObjectStateChanged += HandleObjectStateChanged;
            }
        }

        private void HandleObjectStateChanged(object sender, ObjectStateChangedEventArgs e)
        {
            switch (e.NewState)
            {
                case ObjectState.Deleted:
                case ObjectState.CascadeDeleted:
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        IsDeleting = true;
                        ClearNavigationProperties();
                        IsDeleting = false;
                    }

                    break;
                case ObjectState.Detached:
                    ClearNavigationProperties();
                    break;
            }

            OnStateChanged(e.NewState);
        }

        protected virtual void OnStateChanged(ObjectState state)
        {
            if (StateChanged != null)
                StateChanged(this, state);
        }

        public event Action<IObjectWithChangeTracker, ObjectState> StateChanged;
        private bool _isDeserializing;
        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public bool IsDeserializing
        {
            get
            {
                return _isDeserializing;
            }

            set
            {
                if (_isDeserializing == value)
                    return;
                _isDeserializing = value;
            }
        }

        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public bool IsInitializingRelationships
        {
            get;
            set;
        }

        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }

        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }

        public virtual void MarkAsModified()
        {
            ChangeTracker.ChangeTrackingEnabled = true;
            ChangeTracker.State = ObjectState.Modified;
            ChangeTracker.ModifiedProperties.Add("Id");
            ChangeTracker.ModifiedProperties.Add("Name");
            ChangeTracker.ModifiedProperties.Add("Description");
            ChangeTracker.ModifiedProperties.Add("Picture");
        }

        protected virtual void ClearNavigationProperties()
        {
            bool isInitializingRelationships = IsInitializingRelationships;
            IsInitializingRelationships = true;
            Products.Clear();
            IsInitializingRelationships = isInitializingRelationships;
        }

        public bool HasTemporaryKey
        {
            get
            {
                return ChangeTracker.State == ObjectState.Added;
            }
        }

        public virtual bool HasChanges
        {
            get
            {
                return ChangeTracker.State != ObjectState.Unchanged || ChangeTracker.ObjectsRemovedFromCollectionProperties.Any() || ChangeTracker.OriginalValues.Any() || ChangeTracker.ObjectsAddedToCollectionProperties.Any();
            }
        }

        private Guid? _uniqueIdentifier;
        Guid IObjectWithChangeTracker.UniqueIdentifier
        {
            get
            {
                return _uniqueIdentifier ?? (_uniqueIdentifier = Guid.NewGuid()).Value;
            }
        }

#endregion
#region Association Fixup
        private bool IsDeleting
        {
            get;
            set;
        }

        internal virtual void Detach()
        {
            ChangeTracker.State = ObjectState.Detached;
        }

        private void FixupProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing || Products.IsAttachingOrDetaching)
                return;
            if (e.NewItems != null)
            {
                foreach (Product item in e.NewItems)
                {
                    bool itemIsInitializingRelationships = item.IsInitializingRelationships;
                    if (IsInitializingRelationships)
                        item.IsInitializingRelationships = true;
                    item.Category = this;
                    if (!(IsInitializingRelationships || item.IsInitializingRelationships) && ChangeTracker.ChangeTrackingEnabled && (ChangeTracker.State == ObjectState.Added || item.ChangeTracker.State == ObjectState.Added || !(ChangeTracker.IsAttaching || item.ChangeTracker.IsAttaching)))
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                            item.MarkAsAdded();
                        ChangeTracker.RecordAdditionToCollectionProperties("Products", item);
                    }

                    item.IsInitializingRelationships = itemIsInitializingRelationships;
                }
            }

            if (e.OldItems != null)
            {
                foreach (Product item in e.OldItems)
                {
                    bool itemIsInitializingRelationships = item.IsInitializingRelationships;
                    if (IsInitializingRelationships)
                        item.IsInitializingRelationships = true;
                    if (ReferenceEquals(item.Category, this))
                        item.Category = null;
                    if (ChangeTracker.ChangeTrackingEnabled && !IsInitializingRelationships)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Products", item);
                    }

                    item.IsInitializingRelationships = itemIsInitializingRelationships;
                }
            }
        }

#endregion
#region EntityKey
        private Guid? _dataTransferEntityKey;
        [DataMember]
        public virtual Guid DataTransferEntityKey
        {
            get
            {
                return _dataTransferEntityKey ?? (_dataTransferEntityKey = Guid.NewGuid()).Value;
            }

            set
            {
                _dataTransferEntityKey = value;
            }
        }

        private string _entityKey;
        public virtual string EntityKey
        {
            get
            {
                switch (ChangeTracker.State)
                {
                    case ObjectState.Added:
                        if (_entityKey == null)
                            _entityKey = "Category - IdentityKey = " + Guid.NewGuid().ToString();
                        return _entityKey;
                    case ObjectState.Detached:
                        if (_entityKey != null)
                            return _entityKey;
                        if (Id == default (int))
                            goto case ObjectState.Added;
                        break;
                    case ObjectState.Unchanged:
                    case ObjectState.Modified:
                    case ObjectState.CascadeDeleted:
                    case ObjectState.Deleted:
                        _entityKey = null;
                        break;
                }

                return string.Format("Category - Id={0};", Id);
            }

            set
            {
                _entityKey = value;
            }
        }

        public virtual void ResetEntityKey()
        {
            if (!IsDeserializing)
            {
                var previousEntityKey = _entityKey;
                _entityKey = null;
                OnEntityKeyChanged(previousEntityKey);
            }
        }

        protected virtual void OnEntityKeyChanged(string previousEntityKey)
        {
            if (EntityKeyChanged != null)
                EntityKeyChanged(this, previousEntityKey);
        }

        public event Action<Category, string> EntityKeyChanged;
        public virtual bool IsTemporaryKey
        {
            get
            {
                return _entityKey != null;
            }
        }

#endregion
#region Dependences
#endregion
#region UISpecifications
        static Category()
        {
            DynamicType<Category>.AddProperty("IdIsMandatory", e => e.UISpecifications.GetIdIsMandatory(e));
            DynamicType<Category>.AddProperty("IdMinValue", e => e.UISpecifications.GetIdMinValue(e));
            DynamicType<Category>.AddProperty("IdMaxValue", e => e.UISpecifications.GetIdMaxValue(e));
            DynamicType<Category>.AddProperty("NameIsMandatory", e => e.UISpecifications.GetNameIsMandatory(e));
            DynamicType<Category>.AddProperty("NameMaxLength", e => e.UISpecifications.GetNameMaxLength(e));
            DynamicType<Category>.AddProperty("NameMinLength", e => e.UISpecifications.GetNameMinLength(e));
            DynamicType<Category>.AddProperty("NamePattern", e => e.UISpecifications.GetNamePattern(e));
            DynamicType<Category>.AddProperty("DescriptionIsMandatory", e => e.UISpecifications.GetDescriptionIsMandatory(e));
            DynamicType<Category>.AddProperty("DescriptionMaxLength", e => e.UISpecifications.GetDescriptionMaxLength(e));
            DynamicType<Category>.AddProperty("DescriptionMinLength", e => e.UISpecifications.GetDescriptionMinLength(e));
            DynamicType<Category>.AddProperty("DescriptionPattern", e => e.UISpecifications.GetDescriptionPattern(e));
            DynamicType<Category>.AddProperty("PictureIsMandatory", e => e.UISpecifications.GetPictureIsMandatory(e));
            DynamicType<Category>.AddProperty("PictureMaxLength", e => e.UISpecifications.GetPictureMaxLength(e));
            DynamicType<Category>.AddProperty("PictureMinLength", e => e.UISpecifications.GetPictureMinLength(e));
            DynamicType<Category>.AddProperty("AllErrors", e => e.Errors.AllErrors);
            DynamicType<Category>.AddProperty("IdErrors", e => e.Errors.Id);
            DynamicType<Category>.AddProperty("NameErrors", e => e.Errors.Name);
            DynamicType<Category>.AddProperty("DescriptionErrors", e => e.Errors.Description);
            DynamicType<Category>.AddProperty("PictureErrors", e => e.Errors.Picture);
            StaticInitializer();
        }

        static partial void StaticInitializer();
        private UISpecificationsInfo _uiSpecifications;
        private UISpecificationsInfo UISpecifications
        {
            get
            {
                return _uiSpecifications ?? (_uiSpecifications = CreateCategoryUISpecifications());
            }
        }

        protected virtual UISpecificationsInfo CreateCategoryUISpecifications()
        {
            return new UISpecificationsInfo();
        }

        public partial class UISpecificationsInfo
        {
            public virtual bool GetIdIsMandatory(Category entity)
            {
                return true;
            }

            public virtual int ? GetIdMinValue(Category entity)
            {
                return null;
            }

            public virtual int ? GetIdMaxValue(Category entity)
            {
                return null;
            }

            public virtual bool GetNameIsMandatory(Category entity)
            {
                return true;
            }

            public virtual int ? GetNameMaxLength(Category entity)
            {
                return 15;
            }

            public virtual int ? GetNameMinLength(Category entity)
            {
                return null;
            }

            public virtual string GetNamePattern(Category entity)
            {
                return null;
            }

            public virtual bool GetDescriptionIsMandatory(Category entity)
            {
                return false;
            }

            public virtual int ? GetDescriptionMaxLength(Category entity)
            {
                return null;
            }

            public virtual int ? GetDescriptionMinLength(Category entity)
            {
                return null;
            }

            public virtual string GetDescriptionPattern(Category entity)
            {
                return null;
            }

            public virtual bool GetPictureIsMandatory(Category entity)
            {
                return false;
            }

            public virtual int ? GetPictureMaxLength(Category entity)
            {
                return null;
            }

            public virtual int ? GetPictureMinLength(Category entity)
            {
                return null;
            }
        }

        private ErrorsSpecifications _errors;
        protected ErrorsSpecifications Errors
        {
            get
            {
                return _errors ?? (_errors = new ErrorsSpecifications());
            }
        }

        bool IEntityWithErrors.HasErrors
        {
            get
            {
                return Errors.AllErrors.Count != 0;
            }
        }

        event Action IEntityWithErrors.HasErrorsChanged
        {
            add
            {
                Errors.HasErrorChanged += value;
            }

            remove
            {
                Errors.HasErrorChanged += value;
            }
        }

        public partial class ErrorsSpecifications
        {
            private ObservableCollection<Error> _id;
            public ObservableCollection<Error> Id
            {
                get
                {
                    return _id ?? (_id = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _name;
            public ObservableCollection<Error> Name
            {
                get
                {
                    return _name ?? (_name = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _description;
            public ObservableCollection<Error> Description
            {
                get
                {
                    return _description ?? (_description = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _picture;
            public ObservableCollection<Error> Picture
            {
                get
                {
                    return _picture ?? (_picture = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _allErrors;
            public ObservableCollection<Error> AllErrors
            {
                get
                {
                    if (_allErrors == null)
                    {
                        _allErrors = new ObservableCollection<Error>();
                        NotifyCollectionChangedEventHandler errorsCollectionChanged = (_, e) =>
                        {
                            if (e.NewItems != null)
                                foreach (Error error in e.NewItems)
                                {
                                    if (!_allErrors.Any(er => er.Key == error.Key))
                                        _allErrors.Add(error);
                                }

                            if (e.OldItems != null)
                                foreach (Error error in e.OldItems)
                                    _allErrors.Remove(error);
                        }

                        ;
                        AddAllErrorsHandlers(errorsCollectionChanged);
                    }

                    return _allErrors;
                }
            }

            protected virtual void AddAllErrorsHandlers(NotifyCollectionChangedEventHandler errorsCollectionChanged)
            {
                NotifyCollectionChangedEventHandler specificErrorsCollectionChanged = (sender, e) =>
                {
                    errorsCollectionChanged(sender, e);
                    switch (e.Action)
                    {
                        case NotifyCollectionChangedAction.Add:
                            if (AllErrors.Count == e.NewItems.Count)
                                OnHasErrorChanged();
                            break;
                        case NotifyCollectionChangedAction.Remove:
                            if (AllErrors.Count == 0)
                                OnHasErrorChanged();
                            break;
                    }
                }

                ;
                Id.CollectionChanged += specificErrorsCollectionChanged;
                Name.CollectionChanged += specificErrorsCollectionChanged;
                Description.CollectionChanged += specificErrorsCollectionChanged;
                Picture.CollectionChanged += specificErrorsCollectionChanged;
            }

            protected void OnHasErrorChanged()
            {
                if (HasErrorChanged != null)
                    OnHasErrorChanged();
            }

            public event Action HasErrorChanged;
        }
#endregion
    }
}
            