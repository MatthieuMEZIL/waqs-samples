//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

            using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using WAQS.ClientContext;
using WAQS.ClientContext.Interfaces;
using WAQS.ClientContext.Interfaces.Errors;
using WAQS.ComponentModel;
using WAQS.Entities;
using WAQS.EntitiesTracking;

namespace WAQSWorkshopClient
{
    [DataContract(IsReference = true, Namespace = "http://Northwind/Entities")]
    [KnownType(typeof (Customer))]
    [KnownType(typeof (InvoiceDetail))]
    [KnownType(typeof (Order))]
    public partial class Invoice : DynamicType, IEntityWithErrors
    {
#region DynamicType
        protected override ICustomTypeDescriptor CustomTypeDescriptor
        {
            get
            {
                return new DynamicType<Invoice>(this, CustomPropertyDescriptors);
            }
        }

        protected override IEnumerable<CustomPropertyDescriptor> CustomPropertyDescriptors
        {
            get
            {
                return DynamicType<Invoice>.CustomProperties;
            }
        }

#endregion
#region Simple Properties
        [DataMember]
        public int OrderId
        {
            get
            {
                return _orderId;
            }

            set
            {
                if (_orderId == value)
                {
                    return;
                }

                OnOrderIdPropertyChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    throw new InvalidOperationException("The property 'OrderId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                if (!IsDeserializing)
                {
                    if (Order != null && Order.Id != value)
                    {
                        Order = null;
                    }

                    ChangeTracker.RecordOriginalValue("OrderId", _orderId);
                }

                var oldOrderId = _orderId;
                _orderId = value;
                if (!ChangeTracker.Saving)
                {
                    OnOrderIdPropertyChanged(value);
                    OnPropertyChanged("OrderId");
                    ResetEntityKey();
                    OnOrderFKsChanged(oldOrderId, value);
                    RaiseNavigationPropertyChanged("OrderId");
                }
            }
        }

        private int _orderId;
        partial void OnOrderIdPropertyChanging(ref int value);
        partial void OnOrderIdPropertyChanged(int value);
        [DataMember]
        public string CustomerId
        {
            get
            {
                return _customerId;
            }

            set
            {
                if (_customerId == value)
                {
                    return;
                }

                OnCustomerIdPropertyChanging(ref value);
                if (!IsDeserializing)
                {
                    if (Customer != null && Customer.Id != value)
                    {
                        Customer = null;
                    }

                    ChangeTracker.RecordOriginalValue("CustomerId", _customerId);
                }

                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateCustomerIdMaxLength(value);
                    if (value != null)
                        value = value.PadRight(5);
                }

                var oldCustomerId = _customerId;
                _customerId = value;
                if (!ChangeTracker.Saving)
                {
                    OnCustomerIdPropertyChanged(value);
                    OnPropertyChanged("CustomerId");
                    OnCustomerFKsChanged(oldCustomerId, value);
                    RaiseNavigationPropertyChanged("CustomerId");
                }
            }
        }

        private string _customerId;
        partial void OnCustomerIdPropertyChanging(ref string value);
        partial void OnCustomerIdPropertyChanged(string value);
        protected virtual Error ValidateCustomerIdMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 5, () => CustomerId, DataErrorInfo);
            var error = Errors.CustomerId.FirstOrDefault(e => e.Key == "CustomerIdMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.CustomerId.Remove(error);
                return null;
            }

            if (error == null)
                Errors.CustomerId.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "CustomerIdMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string CustomerCompanyName
        {
            get
            {
                return _customerCompanyName;
            }

            set
            {
                if (_customerCompanyName == value)
                {
                    return;
                }

                OnCustomerCompanyNamePropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateCustomerCompanyNameMaxLength(value);
                }

                _customerCompanyName = value;
                if (!ChangeTracker.Saving)
                {
                    OnCustomerCompanyNamePropertyChanged(value);
                    OnPropertyChanged("CustomerCompanyName");
                }
            }
        }

        private string _customerCompanyName;
        partial void OnCustomerCompanyNamePropertyChanging(ref string value);
        partial void OnCustomerCompanyNamePropertyChanged(string value);
        protected virtual Error ValidateCustomerCompanyNameMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 40, () => CustomerCompanyName, DataErrorInfo);
            var error = Errors.CustomerCompanyName.FirstOrDefault(e => e.Key == "CustomerCompanyNameMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.CustomerCompanyName.Remove(error);
                return null;
            }

            if (error == null)
                Errors.CustomerCompanyName.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "CustomerCompanyNameMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string CustomerContactName
        {
            get
            {
                return _customerContactName;
            }

            set
            {
                if (_customerContactName == value)
                {
                    return;
                }

                OnCustomerContactNamePropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateCustomerContactNameMaxLength(value);
                }

                _customerContactName = value;
                if (!ChangeTracker.Saving)
                {
                    OnCustomerContactNamePropertyChanged(value);
                    OnPropertyChanged("CustomerContactName");
                }
            }
        }

        private string _customerContactName;
        partial void OnCustomerContactNamePropertyChanging(ref string value);
        partial void OnCustomerContactNamePropertyChanged(string value);
        protected virtual Error ValidateCustomerContactNameMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 30, () => CustomerContactName, DataErrorInfo);
            var error = Errors.CustomerContactName.FirstOrDefault(e => e.Key == "CustomerContactNameMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.CustomerContactName.Remove(error);
                return null;
            }

            if (error == null)
                Errors.CustomerContactName.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "CustomerContactNameMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public double Total
        {
            get
            {
                return _total;
            }

            set
            {
                if (_total == value)
                {
                    return;
                }

                OnTotalPropertyChanging(ref value);
                _total = value;
                if (!ChangeTracker.Saving)
                {
                    OnTotalPropertyChanged(value);
                    OnPropertyChanged("Total");
                }
            }
        }

        private double _total;
        partial void OnTotalPropertyChanging(ref double value);
        partial void OnTotalPropertyChanged(double value);
        [DataMember]
        public double Dicount
        {
            get
            {
                return _dicount;
            }

            set
            {
                if (_dicount == value)
                {
                    return;
                }

                OnDicountPropertyChanging(ref value);
                _dicount = value;
                if (!ChangeTracker.Saving)
                {
                    OnDicountPropertyChanged(value);
                    OnPropertyChanged("Dicount");
                }
            }
        }

        private double _dicount;
        partial void OnDicountPropertyChanging(ref double value);
        partial void OnDicountPropertyChanged(double value);
        [DataMember]
        public bool Paid
        {
            get
            {
                return _paid;
            }

            set
            {
                if (_paid == value)
                {
                    return;
                }

                OnPaidPropertyChanging(ref value);
                _paid = value;
                if (!ChangeTracker.Saving)
                {
                    OnPaidPropertyChanged(value);
                    OnPropertyChanged("Paid");
                }
            }
        }

        private bool _paid;
        partial void OnPaidPropertyChanging(ref bool value);
        partial void OnPaidPropertyChanged(bool value);
#endregion
#region Complex Properties
#endregion
#region Navigation Properties
        [DataMember]
        public Customer Customer
        {
            get
            {
                return _customer;
            }

            set
            {
                if (ReferenceEquals(_customer, value))
                {
                    return;
                }

                var oldCustomer = _customer;
                if (!ChangeTracker.Saving)
                    OnCustomerChanging(ref value);
                _customer = value;
                FixupCustomer(oldCustomer);
                if (!ChangeTracker.Saving)
                {
                    OnCustomerChanged(value);
                }

                OnCustomerPropertyChanging(oldCustomer, _customer);
                if (!IsInitializingRelationships)
                {
                    if (_customer == null || !_customer.IsInitializingRelationships)
                        OnNavigationPropertyChanged("Customer");
                    else
                        NotifyPropertyChanged.RaisePropertyChanged(() => Customer);
                }
            }
        }

        partial void OnCustomerChanging(ref Customer value);
        partial void OnCustomerChanged(Customer value);
        private Customer _customer;
        protected virtual void OnCustomerFKsChanged(string oldCustomerId, string newCustomerId)
        {
            if (CustomerFKsChanged != null)
                CustomerFKsChanged(this, oldCustomerId, newCustomerId);
        }

        public event Action<Invoice, string, string> CustomerFKsChanged;
        protected virtual void OnCustomerPropertyChanging(Customer oldValue, Customer newValue)
        {
            if (CustomerPropertyChanging != null)
                CustomerPropertyChanging(oldValue, newValue);
        }

        protected internal event Action<Customer, Customer> CustomerPropertyChanging;
        [DataMember]
        public TrackableCollection<InvoiceDetail> InvoiceDetails
        {
            get
            {
                if (!ChangeTracker.Saving)
                    OnGetInvoiceDetails();
                if (OnGetInvoiceDetailsAction != null)
                    OnGetInvoiceDetailsAction();
                if (_invoiceDetails == null)
                {
                    _invoiceDetails = new TrackableCollection<InvoiceDetail>();
                    SetFixupInvoiceDetails();
                    OnInvoiceDetailsPropertyChanging(null, _invoiceDetails);
                    OnInvoiceDetailsPropertyChanged(null, _invoiceDetails);
                }

                return _invoiceDetails;
            }

            set
            {
                if (ReferenceEquals(_invoiceDetails, value))
                    return;
                if (ChangeTracker.ChangeTrackingEnabled)
                    throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                var oldInvoiceDetails = _invoiceDetails;
                if (_invoiceDetails != null)
                {
                    _invoiceDetails.CollectionChanged -= FixupInvoiceDetails;
                }

                _invoiceDetails = value;
                if (_invoiceDetails != null)
                {
                    SetFixupInvoiceDetails();
                }

                OnInvoiceDetailsPropertyChanging(oldInvoiceDetails, _invoiceDetails);
                OnInvoiceDetailsPropertyChanged(oldInvoiceDetails, _invoiceDetails);
                OnNavigationPropertyChanged("InvoiceDetails");
            }
        }

        partial void OnGetInvoiceDetails();
        public Action OnGetInvoiceDetailsAction
        {
            get;
            set;
        }

        partial void OnInvoiceDetailsPropertyChanged(TrackableCollection<InvoiceDetail> oldValue, TrackableCollection<InvoiceDetail> newValue);
        private TrackableCollection<InvoiceDetail> _invoiceDetails;
        private void SetFixupInvoiceDetails()
        {
            _invoiceDetails.CollectionChanged += FixupInvoiceDetails;
            var invoiceDetailsAsITrackableCollection = (ITrackableCollection<InvoiceDetail>)_invoiceDetails;
            invoiceDetailsAsITrackableCollection.GetWhereExpression = e => e.InvoiceId == OrderId;
            invoiceDetailsAsITrackableCollection.GetClientContext = () =>
            {
                IClientEntitySet clientEntitySet = ClientEntitySetExtensions.GetClientEntitySet(this);
                return clientEntitySet == null || ChangeTracker.State == ObjectState.Detached ? null : clientEntitySet.Context;
            }

            ;
        }

        protected virtual void OnInvoiceDetailsPropertyChanging(TrackableCollection<InvoiceDetail> oldValue, TrackableCollection<InvoiceDetail> newValue)
        {
            if (InvoiceDetailsPropertyChanging != null)
                InvoiceDetailsPropertyChanging(oldValue, newValue);
        }

        protected internal event Action<TrackableCollection<InvoiceDetail>, TrackableCollection<InvoiceDetail>> InvoiceDetailsPropertyChanging;
        [DataMember]
        public Order Order
        {
            get
            {
                return _order;
            }

            set
            {
                if (ReferenceEquals(_order, value))
                {
                    if (!(IsDeserializing || ChangeTracker.Saving || IsInitializingRelationships || value != null && value.IsInitializingRelationships))
                        ValidateOrderRequired(value);
                    return;
                }

                var oldOrder = _order;
                if (!ChangeTracker.Saving)
                    OnOrderChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                {
                    if (OrderId != value.Id)
                        throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                }

                if (!(IsDeserializing || ChangeTracker.Saving || IsInitializingRelationships || value != null && value.IsInitializingRelationships))
                    ValidateOrderRequired(value);
                _order = value;
                FixupOrder(oldOrder);
                if (!ChangeTracker.Saving)
                {
                    OnOrderChanged(value);
                    if (value != null && value.HasTemporaryKey)
                        ResetEntityKey();
                }

                OnOrderPropertyChanging(oldOrder, _order);
                if (!IsInitializingRelationships)
                {
                    if (_order == null || !_order.IsInitializingRelationships)
                        OnNavigationPropertyChanged("Order");
                    else
                        NotifyPropertyChanged.RaisePropertyChanged(() => Order);
                }
            }
        }

        partial void OnOrderChanging(ref Order value);
        partial void OnOrderChanged(Order value);
        private Order _order;
        protected virtual Error ValidateOrderRequired(Order value)
        {
            var errorInfo = Validators.ValidateRequiredObjectProperty(value, () => Order, DataErrorInfo);
            var error = Errors.Order.FirstOrDefault(e => e.Key == "OrderRequired");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Order.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Order.Add(error = new Error
                {
                Criticity = Criticity.Mandatory, Key = "OrderRequired", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual void OnOrderFKsChanged(int oldOrderId, int newOrderId)
        {
            if (OrderFKsChanged != null)
                OrderFKsChanged(this, oldOrderId, newOrderId);
        }

        public event Action<Invoice, int, int> OrderFKsChanged;
        protected virtual void OnOrderPropertyChanging(Order oldValue, Order newValue)
        {
            if (OrderPropertyChanging != null)
                OrderPropertyChanging(oldValue, newValue);
        }

        protected internal event Action<Order, Order> OrderPropertyChanging;
#endregion
#region Specifications
        public virtual IEnumerable<Error> ValidateOnClient(bool force = false)
        {
            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("CustomerId"))
            {
                Error error = ValidateCustomerIdMaxLength(CustomerId);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("CustomerCompanyName"))
            {
                Error error = ValidateCustomerCompanyNameMaxLength(CustomerCompanyName);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("CustomerContactName"))
            {
                Error error = ValidateCustomerContactNameMaxLength(CustomerContactName);
                if (error != null)
                    yield return error;
            }

            if ((ChangeTracker.State & ObjectState.Deleted) == 0 && (force || ChangeTracker.OriginalValues.ContainsKey("Order")))
            {
                Error error = ValidateOrderRequired(Order);
                if (error != null)
                    yield return error;
            }

            List<Error> errors = null;
            GetCustomValidation(ref errors);
            if (errors != null)
                foreach (var er in errors)
                    yield return er;
        }

        partial void GetCustomValidation(ref List<Error> errors);
#endregion
#region ChangeTracking
        protected virtual void AddValidationProperty(string propertyName)
        {
            if (!ChangeTracker.ValidationProperties.Contains(propertyName))
                ChangeTracker.ValidationProperties.Add(propertyName);
        }

        protected virtual void OnPropertyChanged(string propertyName, bool isTracked = true)
        {
            if (propertyName != "OrderId" && isTracked && ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && (ChangeTracker.State & ObjectState.Deleted) == 0)
            {
                if (!(IsDeserializing || ChangeTracker.ModifiedProperties.Contains(propertyName)))
                    ChangeTracker.ModifiedProperties.Add(propertyName);
                ChangeTracker.State = ObjectState.Modified;
            }

            NotifyPropertyChanged.RaisePropertyChanged(propertyName);
            OnPropertyChangedExtension(propertyName);
        }

        partial void OnPropertyChangedExtension(string propertyName);
        protected virtual void OnNavigationPropertyChanged(string propertyName)
        {
            NotifyPropertyChanged.RaisePropertyChanged(propertyName);
            OnNavigationPropertyChangedExtension(propertyName);
            RaiseNavigationPropertyChanged(propertyName);
        }

        partial void OnNavigationPropertyChangedExtension(string propertyName);
        protected virtual void RaiseNavigationPropertyChanged(string propertyName)
        {
            if (NavigationPropertyChanged != null)
                NavigationPropertyChanged(this, propertyName);
        }

        public event Action<Invoice, string> NavigationPropertyChanged;
        private ObjectChangeTracker _changeTracker;
        [DataMember]
        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanged += HandleObjectStateChanged;
                }

                return _changeTracker;
            }

            set
            {
                if (_changeTracker != null)
                    _changeTracker.ObjectStateChanged -= HandleObjectStateChanged;
                _changeTracker = value;
                if (_changeTracker != null)
                    _changeTracker.ObjectStateChanged += HandleObjectStateChanged;
            }
        }

        private void HandleObjectStateChanged(object sender, ObjectStateChangedEventArgs e)
        {
            switch (e.NewState)
            {
                case ObjectState.Deleted:
                case ObjectState.CascadeDeleted:
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        IsDeleting = true;
                        ClearNavigationProperties();
                        IsDeleting = false;
                    }

                    break;
                case ObjectState.Detached:
                    ClearNavigationProperties();
                    break;
            }

            OnStateChanged(e.NewState);
        }

        protected virtual void OnStateChanged(ObjectState state)
        {
            if (StateChanged != null)
                StateChanged(this, state);
        }

        public event Action<IObjectWithChangeTracker, ObjectState> StateChanged;
        private bool _isDeserializing;
        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public bool IsDeserializing
        {
            get
            {
                return _isDeserializing;
            }

            set
            {
                if (_isDeserializing == value)
                    return;
                _isDeserializing = value;
            }
        }

        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public bool IsInitializingRelationships
        {
            get;
            set;
        }

        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }

        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }

        internal void HandleCascadeDelete(object sender, ObjectStateChangedEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
                this.MarkAsDeleted();
        }

        public virtual void MarkAsModified()
        {
            ChangeTracker.ChangeTrackingEnabled = true;
            ChangeTracker.State = ObjectState.Modified;
            ChangeTracker.ModifiedProperties.Add("OrderId");
            ChangeTracker.ModifiedProperties.Add("CustomerId");
            ChangeTracker.ModifiedProperties.Add("CustomerCompanyName");
            ChangeTracker.ModifiedProperties.Add("CustomerContactName");
            ChangeTracker.ModifiedProperties.Add("Total");
            ChangeTracker.ModifiedProperties.Add("Dicount");
            ChangeTracker.ModifiedProperties.Add("Paid");
        }

        protected virtual void ClearNavigationProperties()
        {
            bool isInitializingRelationships = IsInitializingRelationships;
            IsInitializingRelationships = true;
            Customer = null;
            InvoiceDetails.Clear();
            Order = null;
            IsInitializingRelationships = isInitializingRelationships;
        }

        public bool HasTemporaryKey
        {
            get
            {
                return ChangeTracker.State == ObjectState.Added;
            }
        }

        public virtual bool HasChanges
        {
            get
            {
                return ChangeTracker.State != ObjectState.Unchanged || ChangeTracker.ObjectsRemovedFromCollectionProperties.Any() || ChangeTracker.OriginalValues.Any() || ChangeTracker.ObjectsAddedToCollectionProperties.Any();
            }
        }

#endregion
#region Association Fixup
        private bool IsDeleting
        {
            get;
            set;
        }

        internal virtual void Detach()
        {
            ChangeTracker.State = ObjectState.Detached;
        }

        private void FixupCustomer(Customer previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
                return;
            if (Customer == null && ChangeTracker.ChangeTrackingEnabled && previousValue.ChangeTracker.State == ObjectState.Detached && previousValue.ChangeTracker.DetachedPreviousState != ObjectState.Added)
            {
                object originalValue;
                if (ChangeTracker.OriginalValues.TryGetValue("Customer", out originalValue) && (originalValue == null || originalValue == previousValue))
                    ChangeTracker.OriginalValues.Remove("Customer");
                return;
            }

            bool isInitializingRelationships = IsInitializingRelationships || (Customer != null && Customer.IsInitializingRelationships);
            var changeTrackingEnabled = ChangeTracker.ChangeTrackingEnabled;
            if (isInitializingRelationships || ChangeTracker.IsAttaching)
                ChangeTracker.ChangeTrackingEnabled = false;
            if (previousValue != null && previousValue.Invoices.Contains(this))
                previousValue.Invoices.Remove(this);
            if (Customer != null)
            {
                if (!Customer.Invoices.Contains(this))
                {
                    if (isInitializingRelationships)
                        Customer.Invoices.Attach(this);
                    else
                        Customer.Invoices.Add(this);
                }

                CustomerId = Customer.Id;
            }
            else if (!(skipKeys || IsDeserializing || ChangeTracker.State == ObjectState.Detached) && (ChangeTracker.State & ObjectState.Deleted) == 0)
            {
                CustomerId = default (string);
            }

            if (ChangeTracker.ChangeTrackingEnabled && (!isInitializingRelationships || ChangeTracker.State == ObjectState.Added || Customer != null && Customer.ChangeTracker.State == ObjectState.Added))
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Customer") && (ChangeTracker.OriginalValues["Customer"] == Customer))
                    ChangeTracker.OriginalValues.Remove("Customer");
                else
                {
                    ChangeTracker.RecordOriginalValue("Customer", previousValue);
                }

                if (Customer != null && !Customer.ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Detached)
                    Customer.MarkAsAdded();
            }

            ChangeTracker.ChangeTrackingEnabled |= changeTrackingEnabled;
        }

        private void FixupOrder(Order previousValue)
        {
            if (IsDeserializing)
                return;
            if (Order == null && ChangeTracker.ChangeTrackingEnabled && previousValue.ChangeTracker.State == ObjectState.Detached && previousValue.ChangeTracker.DetachedPreviousState != ObjectState.Added)
            {
                object originalValue;
                if (ChangeTracker.OriginalValues.TryGetValue("Order", out originalValue) && (originalValue == null || originalValue == previousValue))
                    ChangeTracker.OriginalValues.Remove("Order");
                return;
            }

            bool isInitializingRelationships = IsInitializingRelationships || (Order != null && Order.IsInitializingRelationships);
            var changeTrackingEnabled = ChangeTracker.ChangeTrackingEnabled;
            if (isInitializingRelationships || ChangeTracker.IsAttaching)
                ChangeTracker.ChangeTrackingEnabled = false;
            if (previousValue != null && ReferenceEquals(previousValue.Invoice, this))
                previousValue.Invoice = null;
            if (Order != null)
            {
                Order.Invoice = this;
                OrderId = Order.Id;
            }

            if (ChangeTracker.ChangeTrackingEnabled && (!isInitializingRelationships || ChangeTracker.State == ObjectState.Added || Order != null && Order.ChangeTracker.State == ObjectState.Added))
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Order") && (ChangeTracker.OriginalValues["Order"] == Order))
                    ChangeTracker.OriginalValues.Remove("Order");
                else
                {
                    ChangeTracker.RecordOriginalValue("Order", previousValue);
                }

                if (Order != null && !Order.ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Detached)
                    Order.MarkAsAdded();
            }

            ChangeTracker.ChangeTrackingEnabled |= changeTrackingEnabled;
        }

        private void FixupInvoiceDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing || InvoiceDetails.IsAttachingOrDetaching)
                return;
            if (e.NewItems != null)
            {
                foreach (InvoiceDetail item in e.NewItems)
                {
                    bool itemIsInitializingRelationships = item.IsInitializingRelationships;
                    if (IsInitializingRelationships)
                        item.IsInitializingRelationships = true;
                    item.Invoice = this;
                    if (!(IsInitializingRelationships || item.IsInitializingRelationships) && ChangeTracker.ChangeTrackingEnabled && (ChangeTracker.State == ObjectState.Added || item.ChangeTracker.State == ObjectState.Added || !(ChangeTracker.IsAttaching || item.ChangeTracker.IsAttaching)))
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                            item.MarkAsAdded();
                        ChangeTracker.RecordAdditionToCollectionProperties("InvoiceDetails", item);
                    }

                    item.IsInitializingRelationships = itemIsInitializingRelationships;
                }
            }

            if (e.OldItems != null)
            {
                foreach (InvoiceDetail item in e.OldItems)
                {
                    bool itemIsInitializingRelationships = item.IsInitializingRelationships;
                    if (IsInitializingRelationships)
                        item.IsInitializingRelationships = true;
                    if (ReferenceEquals(item.Invoice, this))
                        item.Invoice = null;
                    if (ChangeTracker.ChangeTrackingEnabled && !IsInitializingRelationships)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("InvoiceDetails", item);
                    }

                    item.IsInitializingRelationships = itemIsInitializingRelationships;
                }
            }
        }

#endregion
#region EntityKey
        private Guid? _dataTransferEntityKey;
        [DataMember]
        public virtual Guid DataTransferEntityKey
        {
            get
            {
                return _dataTransferEntityKey ?? (_dataTransferEntityKey = Guid.NewGuid()).Value;
            }

            set
            {
                _dataTransferEntityKey = value;
            }
        }

        private string _entityKey;
        public virtual string EntityKey
        {
            get
            {
                switch (ChangeTracker.State)
                {
                    case ObjectState.Added:
                        if (_entityKey == null)
                            _entityKey = "Invoice - IdentityKey = " + Guid.NewGuid().ToString();
                        return _entityKey;
                    case ObjectState.Detached:
                        if (_entityKey != null)
                            return _entityKey;
                        if (OrderId == default (int))
                            goto case ObjectState.Added;
                        break;
                    case ObjectState.Unchanged:
                    case ObjectState.Modified:
                    case ObjectState.CascadeDeleted:
                    case ObjectState.Deleted:
                        _entityKey = null;
                        break;
                }

                return string.Format("Invoice - OrderId={0};", OrderId);
            }

            set
            {
                _entityKey = value;
            }
        }

        public virtual void ResetEntityKey()
        {
            if (!IsDeserializing)
            {
                var previousEntityKey = _entityKey;
                _entityKey = null;
                OnEntityKeyChanged(previousEntityKey);
            }
        }

        protected virtual void OnEntityKeyChanged(string previousEntityKey)
        {
            if (EntityKeyChanged != null)
                EntityKeyChanged(this, previousEntityKey);
        }

        public event Action<Invoice, string> EntityKeyChanged;
        public virtual bool IsTemporaryKey
        {
            get
            {
                return _entityKey != null;
            }
        }

#endregion
#region Dependences
#endregion
#region UISpecifications
        static Invoice()
        {
            DynamicType<Invoice>.AddProperty("OrderIdIsMandatory", e => e.UISpecifications.GetOrderIdIsMandatory(e));
            DynamicType<Invoice>.AddProperty("OrderIdMinValue", e => e.UISpecifications.GetOrderIdMinValue(e));
            DynamicType<Invoice>.AddProperty("OrderIdMaxValue", e => e.UISpecifications.GetOrderIdMaxValue(e));
            DynamicType<Invoice>.AddProperty("CustomerIdIsMandatory", e => e.UISpecifications.GetCustomerIdIsMandatory(e));
            DynamicType<Invoice>.AddProperty("CustomerIdMaxLength", e => e.UISpecifications.GetCustomerIdMaxLength(e));
            DynamicType<Invoice>.AddProperty("CustomerIdMinLength", e => e.UISpecifications.GetCustomerIdMinLength(e));
            DynamicType<Invoice>.AddProperty("CustomerIdPattern", e => e.UISpecifications.GetCustomerIdPattern(e));
            DynamicType<Invoice>.AddProperty("CustomerCompanyNameIsMandatory", e => e.UISpecifications.GetCustomerCompanyNameIsMandatory(e));
            DynamicType<Invoice>.AddProperty("CustomerCompanyNameMaxLength", e => e.UISpecifications.GetCustomerCompanyNameMaxLength(e));
            DynamicType<Invoice>.AddProperty("CustomerCompanyNameMinLength", e => e.UISpecifications.GetCustomerCompanyNameMinLength(e));
            DynamicType<Invoice>.AddProperty("CustomerCompanyNamePattern", e => e.UISpecifications.GetCustomerCompanyNamePattern(e));
            DynamicType<Invoice>.AddProperty("CustomerContactNameIsMandatory", e => e.UISpecifications.GetCustomerContactNameIsMandatory(e));
            DynamicType<Invoice>.AddProperty("CustomerContactNameMaxLength", e => e.UISpecifications.GetCustomerContactNameMaxLength(e));
            DynamicType<Invoice>.AddProperty("CustomerContactNameMinLength", e => e.UISpecifications.GetCustomerContactNameMinLength(e));
            DynamicType<Invoice>.AddProperty("CustomerContactNamePattern", e => e.UISpecifications.GetCustomerContactNamePattern(e));
            DynamicType<Invoice>.AddProperty("TotalIsMandatory", e => e.UISpecifications.GetTotalIsMandatory(e));
            DynamicType<Invoice>.AddProperty("TotalMinValue", e => e.UISpecifications.GetTotalMinValue(e));
            DynamicType<Invoice>.AddProperty("TotalMaxValue", e => e.UISpecifications.GetTotalMaxValue(e));
            DynamicType<Invoice>.AddProperty("DicountIsMandatory", e => e.UISpecifications.GetDicountIsMandatory(e));
            DynamicType<Invoice>.AddProperty("DicountMinValue", e => e.UISpecifications.GetDicountMinValue(e));
            DynamicType<Invoice>.AddProperty("DicountMaxValue", e => e.UISpecifications.GetDicountMaxValue(e));
            DynamicType<Invoice>.AddProperty("PaidIsMandatory", e => e.UISpecifications.GetPaidIsMandatory(e));
            DynamicType<Invoice>.AddProperty("CustomerIsMandatory", e => e.UISpecifications.GetCustomerIsMandatory(e));
            DynamicType<Invoice>.AddProperty("OrderIsMandatory", e => e.UISpecifications.GetOrderIsMandatory(e));
            DynamicType<Invoice>.AddProperty("AllErrors", e => e.Errors.AllErrors);
            DynamicType<Invoice>.AddProperty("OrderIdErrors", e => e.Errors.OrderId);
            DynamicType<Invoice>.AddProperty("CustomerIdErrors", e => e.Errors.CustomerId);
            DynamicType<Invoice>.AddProperty("CustomerCompanyNameErrors", e => e.Errors.CustomerCompanyName);
            DynamicType<Invoice>.AddProperty("CustomerContactNameErrors", e => e.Errors.CustomerContactName);
            DynamicType<Invoice>.AddProperty("TotalErrors", e => e.Errors.Total);
            DynamicType<Invoice>.AddProperty("DicountErrors", e => e.Errors.Dicount);
            DynamicType<Invoice>.AddProperty("PaidErrors", e => e.Errors.Paid);
            DynamicType<Invoice>.AddProperty("OrderErrors", e => e.Errors.Order);
            StaticInitializer();
        }

        static partial void StaticInitializer();
        private UISpecificationsInfo _uiSpecifications;
        private UISpecificationsInfo UISpecifications
        {
            get
            {
                return _uiSpecifications ?? (_uiSpecifications = CreateInvoiceUISpecifications());
            }
        }

        protected virtual UISpecificationsInfo CreateInvoiceUISpecifications()
        {
            return new UISpecificationsInfo();
        }

        public partial class UISpecificationsInfo
        {
            public virtual bool GetOrderIdIsMandatory(Invoice entity)
            {
                return true;
            }

            public virtual int ? GetOrderIdMinValue(Invoice entity)
            {
                return null;
            }

            public virtual int ? GetOrderIdMaxValue(Invoice entity)
            {
                return null;
            }

            public virtual bool GetCustomerIdIsMandatory(Invoice entity)
            {
                return false;
            }

            public virtual int ? GetCustomerIdMaxLength(Invoice entity)
            {
                return 5;
            }

            public virtual int ? GetCustomerIdMinLength(Invoice entity)
            {
                return null;
            }

            public virtual string GetCustomerIdPattern(Invoice entity)
            {
                return null;
            }

            public virtual bool GetCustomerCompanyNameIsMandatory(Invoice entity)
            {
                return false;
            }

            public virtual int ? GetCustomerCompanyNameMaxLength(Invoice entity)
            {
                return 40;
            }

            public virtual int ? GetCustomerCompanyNameMinLength(Invoice entity)
            {
                return null;
            }

            public virtual string GetCustomerCompanyNamePattern(Invoice entity)
            {
                return null;
            }

            public virtual bool GetCustomerContactNameIsMandatory(Invoice entity)
            {
                return false;
            }

            public virtual int ? GetCustomerContactNameMaxLength(Invoice entity)
            {
                return 30;
            }

            public virtual int ? GetCustomerContactNameMinLength(Invoice entity)
            {
                return null;
            }

            public virtual string GetCustomerContactNamePattern(Invoice entity)
            {
                return null;
            }

            public virtual bool GetTotalIsMandatory(Invoice entity)
            {
                return true;
            }

            public virtual double ? GetTotalMinValue(Invoice entity)
            {
                return null;
            }

            public virtual double ? GetTotalMaxValue(Invoice entity)
            {
                return null;
            }

            public virtual bool GetDicountIsMandatory(Invoice entity)
            {
                return true;
            }

            public virtual double ? GetDicountMinValue(Invoice entity)
            {
                return null;
            }

            public virtual double ? GetDicountMaxValue(Invoice entity)
            {
                return null;
            }

            public virtual bool GetPaidIsMandatory(Invoice entity)
            {
                return true;
            }

            public virtual bool GetCustomerIsMandatory(WAQSWorkshopClient.Invoice entity)
            {
                return false;
            }

            public virtual bool GetOrderIsMandatory(WAQSWorkshopClient.Invoice entity)
            {
                return true;
            }
        }

        private ErrorsSpecifications _errors;
        protected ErrorsSpecifications Errors
        {
            get
            {
                return _errors ?? (_errors = new ErrorsSpecifications());
            }
        }

        bool IEntityWithErrors.HasErrors
        {
            get
            {
                return Errors.AllErrors.Count != 0;
            }
        }

        event Action IEntityWithErrors.HasErrorsChanged
        {
            add
            {
                Errors.HasErrorChanged += value;
            }

            remove
            {
                Errors.HasErrorChanged += value;
            }
        }

        public partial class ErrorsSpecifications
        {
            private ObservableCollection<Error> _orderId;
            public ObservableCollection<Error> OrderId
            {
                get
                {
                    return _orderId ?? (_orderId = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _customerId;
            public ObservableCollection<Error> CustomerId
            {
                get
                {
                    return _customerId ?? (_customerId = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _customerCompanyName;
            public ObservableCollection<Error> CustomerCompanyName
            {
                get
                {
                    return _customerCompanyName ?? (_customerCompanyName = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _customerContactName;
            public ObservableCollection<Error> CustomerContactName
            {
                get
                {
                    return _customerContactName ?? (_customerContactName = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _total;
            public ObservableCollection<Error> Total
            {
                get
                {
                    return _total ?? (_total = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _dicount;
            public ObservableCollection<Error> Dicount
            {
                get
                {
                    return _dicount ?? (_dicount = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _paid;
            public ObservableCollection<Error> Paid
            {
                get
                {
                    return _paid ?? (_paid = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _order;
            public ObservableCollection<Error> Order
            {
                get
                {
                    return _order ?? (_order = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _allErrors;
            public ObservableCollection<Error> AllErrors
            {
                get
                {
                    if (_allErrors == null)
                    {
                        _allErrors = new ObservableCollection<Error>();
                        NotifyCollectionChangedEventHandler errorsCollectionChanged = (_, e) =>
                        {
                            if (e.NewItems != null)
                                foreach (Error error in e.NewItems)
                                {
                                    if (!_allErrors.Any(er => er.Key == error.Key))
                                        _allErrors.Add(error);
                                }

                            if (e.OldItems != null)
                                foreach (Error error in e.OldItems)
                                    _allErrors.Remove(error);
                        }

                        ;
                        AddAllErrorsHandlers(errorsCollectionChanged);
                    }

                    return _allErrors;
                }
            }

            protected virtual void AddAllErrorsHandlers(NotifyCollectionChangedEventHandler errorsCollectionChanged)
            {
                NotifyCollectionChangedEventHandler specificErrorsCollectionChanged = (sender, e) =>
                {
                    errorsCollectionChanged(sender, e);
                    switch (e.Action)
                    {
                        case NotifyCollectionChangedAction.Add:
                            if (AllErrors.Count == e.NewItems.Count)
                                OnHasErrorChanged();
                            break;
                        case NotifyCollectionChangedAction.Remove:
                            if (AllErrors.Count == 0)
                                OnHasErrorChanged();
                            break;
                    }
                }

                ;
                OrderId.CollectionChanged += specificErrorsCollectionChanged;
                CustomerId.CollectionChanged += specificErrorsCollectionChanged;
                CustomerCompanyName.CollectionChanged += specificErrorsCollectionChanged;
                CustomerContactName.CollectionChanged += specificErrorsCollectionChanged;
                Total.CollectionChanged += specificErrorsCollectionChanged;
                Dicount.CollectionChanged += specificErrorsCollectionChanged;
                Paid.CollectionChanged += specificErrorsCollectionChanged;
                Order.CollectionChanged += specificErrorsCollectionChanged;
            }

            protected void OnHasErrorChanged()
            {
                if (HasErrorChanged != null)
                    OnHasErrorChanged();
            }

            public event Action HasErrorChanged;
        }
#endregion
    }
}
            