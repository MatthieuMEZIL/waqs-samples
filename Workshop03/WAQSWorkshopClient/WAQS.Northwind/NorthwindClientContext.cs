//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Windows;
using WAQS.ClientContext;
using WAQS.ClientContext.Fault;
using WAQS.ClientContext.Interfaces;
using WAQS.ClientContext.Interfaces.Errors;
using WAQS.ClientContext.Interfaces.ExpressionSerialization;
using WAQS.ClientContext.Interfaces.Querying;
using WAQS.ClientContext.QueryResult;
using WAQS.ComponentModel;
using WAQS.Entities;
using WAQS.EntitiesTracking;
using WAQSWorkshopClient.ClientContext.Fault;
using WAQSWorkshopClient.ClientContext.Interfaces;
using WAQSWorkshopClient.ClientContext.Interfaces.Errors;
using WAQSWorkshopClient.ClientContext.Interfaces.Serialization;
using WAQSWorkshopClient.ClientContext.ServiceReference;

namespace WAQSWorkshopClient.ClientContext
{
    public partial class NorthwindClientContext : NorthwindClientContextBase, INorthwindClientContext, IClientContext
    {
    	public NorthwindClientContext(Func<INorthwindService> serviceFactory)
    		: base(serviceFactory)
    	{
    	}
    
        public bool Init { get; set; }
        public MergeOption MergeOption { get; set; }
    
        private HashSet<object> _entityRemovings;
        protected HashSet<object> EntityRemovings
        {
            get { return _entityRemovings ?? (_entityRemovings = new HashSet<object>()); }
        }
    
        private Dictionary<CategoryKeys, WAQSWorkshopClient.Category> _categoriesDico;
        private Dictionary<CategoryKeys, WAQSWorkshopClient.Category> CategoriesDico
        {
            get { return _categoriesDico ?? (_categoriesDico = new Dictionary<CategoryKeys, WAQSWorkshopClient.Category>()); }
        }
    
        private Dictionary<Guid, WAQSWorkshopClient.Category> _categoriesDataTransferDico;
        private Dictionary<Guid, WAQSWorkshopClient.Category> CategoriesDataTransferDico
        {
            get { return _categoriesDataTransferDico ?? (_categoriesDataTransferDico = new Dictionary<Guid, WAQSWorkshopClient.Category>()); }
        }
    
        private Dictionary<string, WAQSWorkshopClient.Category> _categoriesAddedDico;
        private Dictionary<string, WAQSWorkshopClient.Category> CategoriesAddedDico
        {
            get { return _categoriesAddedDico ?? (_categoriesAddedDico = new Dictionary<string, WAQSWorkshopClient.Category>()); }
        }
        private void AddCategoriesAddedDico(WAQSWorkshopClient.Category entity)
        {
            CategoriesAddedDico.Add(entity.EntityKey, entity);
            entity.EntityKeyChanged += ResetEntityKey;
        }
        private void RemoveCategoriesAddedDico(WAQSWorkshopClient.Category entity)
        {
            CategoriesAddedDico.Remove(entity.EntityKey);
            entity.EntityKeyChanged -= ResetEntityKey;
        }
    
        private void ResetEntityKey(WAQSWorkshopClient.Category entity, string oldEntityKey)
        {
            if (entity.HasTemporaryKey)
            {
                if (entity.EntityKey != oldEntityKey)
                {
                    if (oldEntityKey != null)
                        CategoriesAddedDico.Remove(oldEntityKey);
                    CategoriesAddedDico.Add(entity.EntityKey, entity);
                }
            }
            else
            {
                CategoriesAddedDico.Remove(oldEntityKey);
                entity.EntityKeyChanged -= ResetEntityKey;
                CategoriesDico.Add(new CategoryKeys { Id = entity.Id }, entity);
            }
        }
        public IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Category> Categories 
        { 
            get { return CategoriesInternal; }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Category> CategoriesInternal
        {
            get
            {
                if (_categories == null)
                {
                    _categories = new ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Category>("Categories", this, e => new CategoryKeys { Id = e.Id });
                    _categories.EntityAdded += EntityAddedOrAttached;
                    _categories.EntityAttached += EntityAddedOrAttached;
                    _categories.EntityReplaced += EntityReplaced;
                    _categories.EntityDetached += EntityDetached;
                }
                return _categories;
            }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Category> _categories;
    
        private void EntityAddedOrAttached(WAQSWorkshopClient.Category entity)
        {
    
            ClientEntitySetExtensions.AddEntityInDico(Categories, entity);
            Category entityTmp;
            if (CategoriesDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out entityTmp))
            {
                if (entityTmp == entity)
                    new InvalidOperationException();
            }
            else
                CategoriesDataTransferDico.Add(entity.DataTransferEntityKey, entity);		
            if (entity.HasTemporaryKey)
            {
                WAQSWorkshopClient.Category entityInAddedDico;
                if (! CategoriesAddedDico.TryGetValue(entity.EntityKey, out entityInAddedDico))
                    AddCategoriesAddedDico(entity);
                else if (entityInAddedDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                entity.Products.CollectionChanged += Category_ProductsCollectionChanged;
                EntityAttachWithoutChangingStateSubEntities(entity);
            }
            else
            {
                var categoryKeys = new CategoryKeys { Id = entity.Id };
                WAQSWorkshopClient.Category entityInDico;
                if (! CategoriesDico.TryGetValue(categoryKeys, out entityInDico))
                    CategoriesDico.Add(categoryKeys, entity);
                else if (entityInDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                entity.Products.CollectionChanged += Category_ProductsCollectionChanged;
                EntityAttachWithoutChangingStateSubEntities(entity);
                List<WAQSWorkshopClient.Product> products;
                if (ProductsCategoryFKsDico.TryGetValue(categoryKeys, out products))
                    foreach (var e in products)
                        e.Category = entity;
            }
    
            foreach (var se in entity.Products)
                if (! ProductsInternal.Contains(se))
                    ProductsInternal.AttachWithoutChangingState(se, entity.ChangeTracker.State);
    
            entity.IsInitializingRelationships = false;
        }
    
        private void EntityReplaced(WAQSWorkshopClient.Category entityInEntitySet, WAQSWorkshopClient.Category entity)
        {
            EntityReplacedInternal(entityInEntitySet, entity);
        }
        private void EntityReplacedInternal(WAQSWorkshopClient.Category entityInEntitySet, WAQSWorkshopClient.Category entity)
        {
            if (entityInEntitySet.Name != entity.Name)
                entityInEntitySet.Name = entity.Name;
            if (entityInEntitySet.Description != entity.Description)
                entityInEntitySet.Description = entity.Description;
            if (entityInEntitySet.Picture != entity.Picture)
                entityInEntitySet.Picture = entity.Picture;
        }
    
        private void Category_ProductsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
                foreach (WAQSWorkshopClient.Product subEntity in e.NewItems)
                {
                    WAQSWorkshopClient.Product se = null;
                    if (!subEntity.IsInitializingRelationships && (se = GetEntityInCache(subEntity)) == null)
                        AttachWithoutChangingState(subEntity);
                    else if (se != null && se != subEntity)
                        throw new InvalidOperationException();
                }
        }
         
    
        private void EntityDetached(WAQSWorkshopClient.Category entity)
        {
    
            CategoriesDataTransferDico.Remove(entity.DataTransferEntityKey);		
            if (entity.IsTemporaryKey)
                RemoveCategoriesAddedDico(entity);
            else
            {
                var entityKey = new CategoryKeys { Id = entity.Id };
                CategoriesDico.Remove(entityKey);
            }
        
            entity.Products.CollectionChanged -= Category_ProductsCollectionChanged;
            ClientEntitySetExtensions.RemoveEntityInDico(entity);
    		RemovePropertyDescriptorToEntity(entity);
            foreach (var subEntity in ProductsInternal)
            {
                object originalValue;
                if (subEntity.ChangeTracker.OriginalValues.TryGetValue("Category", out originalValue) && originalValue == entity)
                    subEntity.ChangeTracker.OriginalValues.Remove("Category");
            }
        }
    
        
        private void EntityAttachWithoutChangingStateSubEntities(WAQSWorkshopClient.Category entity)
        {
            var entityInCache = GetEntityInCache(entity);
            bool entityInCacheIsInitializingRelationships = false;
            if (entityInCache != null)
            {
                entityInCacheIsInitializingRelationships = entityInCache.IsInitializingRelationships;
                entityInCache.IsInitializingRelationships = true;
            }
            EntityAttachWithoutChangingStateSubEntitiesBody(entity, entityInCache);
            if (entityInCache != null)
                entityInCache.IsInitializingRelationships = entityInCacheIsInitializingRelationships;
        }
        
        private void EntityAttachWithoutChangingStateSubEntitiesBody(WAQSWorkshopClient.Category entity, WAQSWorkshopClient.Category entityInCache)
        {
            if (entity == entityInCache)
                return;
            foreach (var subEntity in entity.Products.ToList())
            {
                WAQSWorkshopClient.Product subEntityInCache;
                if (Products.Contains(subEntity))
                    subEntityInCache = subEntity;
                else
                    subEntityInCache = AttachWithoutChangingState(subEntity, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
    			if (!(entityInCache == null || entityInCache == entity || entityInCache.Products.Contains(subEntityInCache)))
                    entityInCache.Products.Add(subEntityInCache);
            }
            if (entityInCache != null)
            {
                List<WAQSWorkshopClient.Product> subEntities;
                if (ProductsCategoryFKsDico.TryGetValue(new CategoryKeys { Id = entity.Id }, out subEntities))
                    foreach (var subEntity in subEntities)
                    {
                        if (subEntity.Category == null)
                            ((ITrackableCollection<Product>)entityInCache.Products).AttachWithoutCheckingIfAlreadyExist(subEntity);
                    }
            }
        }
    
        private WAQSWorkshopClient.Category GetEntityInCache(WAQSWorkshopClient.Category entity, bool includingDeleted = false, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            WAQSWorkshopClient.Category value;
            if (! (applyDataTransfer && CategoriesDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out value)) && (! CategoriesDico.TryGetValue(new CategoryKeys { Id = entity.Id }, out value) || value.ChangeTracker.State == ObjectState.Detached || ! includingDeleted && value.ChangeTracker.State == ObjectState.Deleted) && ! (entity.HasTemporaryKey && CategoriesAddedDico.TryGetValue(entity.EntityKey, out value)))
                return null;
            return value;
        }
    
        protected override WAQSWorkshopClient.Category GetEntity(WAQSWorkshopClient.Category entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
        {
            return GetEntity(entity, applyState, mergeOption, true, applyDataTransfer: applyDataTransfer);
        }
        private WAQSWorkshopClient.Category GetEntity(WAQSWorkshopClient.Category entity, bool applyState, MergeOption? mergeOption = null, bool includingDeleted = false, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            object entityGot;
            if (EntitiesGot.TryGetValue(entity, out entityGot))
                return (WAQSWorkshopClient.Category)entityGot;
    
            if (mergeOption == null)
                mergeOption = MergeOption;
    
            if (mergeOption == MergeOption.NoTracking)
                return entity;
    
            if (CategoriesInternal.Contains(entity))
                return entity;
    
            entity.IsDeserializing = true;
    
            includingDeleted |= applyState;
    
            var entityProducts = entity.Products.ToList();
            entity.Products.Clear();
    
            WAQSWorkshopClient.Category value;
            var entityInCache = GetEntityInCache(entity, includingDeleted, applyDataTransfer);
            ObjectChangeTracker originalChangeTracker = entity.ChangeTracker;
            if (entityInCache == null)
            {
                var originalState = entity.ChangeTracker.State;
                entity.ChangeTracker = null;
                if (entity.ChangeTracker.State == ObjectState.Detached)
                    entity.ResetEntityKey();
                entity.IsDeserializing = false;
                var state = originalState == ObjectState.Detached ? defaultState : originalState;
                switch(state)
                {
                    case ObjectState.Added:
                        CategoriesInternal.AddWithoutCheckingIfAlreadyExist(entity);
                        break;
                    default:
                        entity.IsInitializingRelationships = true;
                        CategoriesInternal.AttachWithoutCheckingIfAlreadyExist(entity);
                        entity.IsInitializingRelationships = false;
                        break;
                }
                if (applyState)
                    entity.ChangeTracker.State = state;
                value = entity;
            }
            else
            {
                switch (mergeOption)
                {
                    case MergeOption.AppendOnly:
                        RefreshNewLoadedProperties(entityInCache, entity);
                        value = entityInCache;
                        break;
                    case MergeOption.OverwriteChanges:
                        RefreshCurrentValues(entityInCache, entity, applyState: applyState);
                        value = entityInCache;
                        break;
                    case MergeOption.PreserveChanges:
                        RefreshOriginalValues(entityInCache, entity);
                        value = entityInCache;
                        break;
                    default: 
                        throw new NotImplementedException();
                }
                if (applyState)
                {
                    switch(entity.ChangeTracker.State)
                    {
                        case ObjectState.Detached:
                            Categories.Detach(value);
                            break;
                        case ObjectState.Deleted:
                            Categories.Remove(value);
                            break;
                        default:
                            value.ChangeTracker.State = entity.ChangeTracker.State;
                            break;
                    }
                }
            }
            EntitiesGot.Add(entity, value);
            if (! entity.IsInitializingRelationships)
            {
                entity.IsInitializingRelationships = true;
                value.IsInitializingRelationships = true;
    
                foreach (var e in entityProducts)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(e, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Products.Add(GetEntity(e, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer));
                }
    
                if (applyState && originalChangeTracker != null && originalChangeTracker != value.ChangeTracker)
                {
                    foreach (var modifiedProperty in originalChangeTracker.ModifiedProperties)
                        if (! value.ChangeTracker.ModifiedProperties.Contains(modifiedProperty))
                            value.ChangeTracker.ModifiedProperties.Add(modifiedProperty);
                    foreach (var originalValue in originalChangeTracker.OriginalValues)
                    {
                        var originalValueEntity = originalValue.Value as IEntity;
                        if (originalValueEntity != null) 
                        {
                            var originalState = originalValueEntity.ChangeTracker.State;
                            IEntity originalEntity = null;
                            var ov = originalValueEntity == null ? originalValue.Value : originalEntity = GetEntity(originalValueEntity, true, defaultState, applyDataTransfer) as IEntity;
                            if (value.ChangeTracker.State != ObjectState.Detached)
                                value.ChangeTracker.RecordOriginalValue(originalValue.Key, ov);
                            if (originalValueEntity != null && originalState == ObjectState.Detached)
                                Detach(originalEntity);
                        }
                    }
                    foreach (var objectsRemovedToCollectionProperties in originalChangeTracker.ObjectsRemovedFromCollectionProperties)
                        foreach (IEntity objectsRemovedToCollectionProperty in objectsRemovedToCollectionProperties.Value)
                            if (objectsRemovedToCollectionProperty != null)
                            {
                                var originalState = objectsRemovedToCollectionProperty.ChangeTracker.State;
                                IObjectWithChangeTracker removedEntity = (IObjectWithChangeTracker)GetEntity(objectsRemovedToCollectionProperty, true, defaultState, applyDataTransfer);
                                switch (objectsRemovedToCollectionProperties.Key)
                                {
                                    case "Products":
                                            value.Products.Remove((WAQSWorkshopClient.Product)removedEntity);
                                            break;
                                }
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordRemovalFromCollectionProperties(objectsRemovedToCollectionProperties.Key, removedEntity);
                                if (originalState == ObjectState.Detached)
                                    Detach(removedEntity);
                            }
                    foreach (var objectsAddedToCollectionProperties in originalChangeTracker.ObjectsAddedToCollectionProperties)
                        foreach (var objectsAddedToCollectionProperty in objectsAddedToCollectionProperties.Value)
                            if (objectsAddedToCollectionProperty != null)
                            {
                                var addedEntity = (IObjectWithChangeTracker)GetEntity(objectsAddedToCollectionProperty, true, defaultState, applyDataTransfer);
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordAdditionToCollectionProperties(objectsAddedToCollectionProperties.Key, addedEntity);
                            }
                }
    
                value.IsInitializingRelationships = false;
            }
            value.ChangeTracker.ChangeTrackingEnabled = true;
            return value;
        } 
    
        private WAQSWorkshopClient.Category AttachWithoutChangingState(WAQSWorkshopClient.Category entity, ObjectState? defaultState = null)
        {
            if (CategoriesInternal.Contains(entity))
                return entity;
            var entityIncludingCache = Init ? GetEntityInCache(entity) ?? entity : entity;
            if (CategoriesInternal.AttachWithoutChangingState(entityIncludingCache, defaultState))
                EntityAttachWithoutChangingStateSubEntities(entity);
            return entityIncludingCache;
        }
    
        public void RefreshNewLoadedProperties(WAQSWorkshopClient.Category entityInCache, WAQSWorkshopClient.Category entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            entityInCache.IsDeserializing = isDeserializing;
        }
    
        public void RefreshCurrentValues(WAQSWorkshopClient.Category entityInCache, WAQSWorkshopClient.Category entity)
        {
            RefreshCurrentValues(entityInCache, entity, false);
        }
        public void RefreshCurrentValues(WAQSWorkshopClient.Category entityInCache, WAQSWorkshopClient.Category entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            if (entityInCache.Id != entity.Id)
                entityInCache.Id = entity.Id;
            if (entityInCache.Name != entity.Name)
                entityInCache.Name = entity.Name;
            if (entityInCache.Description != entity.Description)
                entityInCache.Description = entity.Description;
            if (entityInCache.Picture != entity.Picture)
                entityInCache.Picture = entity.Picture;
            entityInCache.IsDeserializing = isDeserializing;
            if (applyState)
            {
                entityInCache.ChangeTracker.State = entity.ChangeTracker.State;
                entityInCache.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties;
            }
            else
            {
                entityInCache.ChangeTracker.AcceptChanges();
                entityInCache.ChangeTracker.ModifiedProperties.Clear();
            }
        }
    
        private void RefreshOriginalValues(WAQSWorkshopClient.Category entityInCache, WAQSWorkshopClient.Category entity)
        {
            if (! (entityInCache.Name == entity.Name || entityInCache.ChangeTracker.ModifiedProperties.Contains("Name")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Name");
            if (! (entityInCache.Description == entity.Description || entityInCache.ChangeTracker.ModifiedProperties.Contains("Description")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Description");
            if (! (entityInCache.Picture == entity.Picture || entityInCache.ChangeTracker.ModifiedProperties.Contains("Picture")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Picture");
        }
    
        private WAQSWorkshopClient.Category ReduceToKey(WAQSWorkshopClient.Category entity)
        {
            WAQSWorkshopClient.Category value = new WAQSWorkshopClient.Category { Id = entity.Id };
            return value;
        }
    
        private WAQSWorkshopClient.Category ReduceToModifications(WAQSWorkshopClient.Category entity)
        {
            WAQSWorkshopClient.Category value = new WAQSWorkshopClient.Category { Id = entity.Id };
            value.ChangeTracker.Saving = true;
            value.ChangeTracker.ChangeTrackingEnabled = true;
            value.ChangeTracker.State = entity.ChangeTracker.State;
            switch (entity.ChangeTracker.State)
            {
                case ObjectState.Added:
                    value.Name = entity.Name;
                    value.Description = entity.Description;
                    value.Picture = entity.Picture;
    				break;
                case ObjectState.Deleted:
                    value.ChangeTracker.ChangeTrackingEnabled = false;
                    value.Name = default(string); 
                    value.Description = default(string); 
                    value.Picture = default(byte[]); 
    				break;
                case ObjectState.Modified:
                    value.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties.ToList();
                    foreach (var modifiedPropery in entity.ChangeTracker.ModifiedProperties.Union(entity.ChangeTracker.ValidationProperties))
                        switch (modifiedPropery)
                        {
                            case "Name":
                                value.Name = entity.Name;
                                break;
                            case "Description":
                                value.Description = entity.Description;
                                break;
                            case "Picture":
                                value.Picture = entity.Picture;
                                break;
                        }
                    break;
                case ObjectState.Unchanged:
                case ObjectState.CascadeDeleted:
                    break;
                default: //case ObjectState.Detached:
                    throw new InvalidOperationException();
            }
            return value;
        }
    
        private void ReduceNavigationProperties(WAQSWorkshopClient.Category originalValue, WAQSWorkshopClient.Category newValue, Dictionary<WAQSWorkshopClient.Product, WAQSWorkshopClient.Product> reducedProductsDictionary)
        {
            newValue.ChangeTracker.ObjectsAddedToCollectionProperties.Clear();
            newValue.ChangeTracker.ObjectsRemovedFromCollectionProperties.Clear();
            newValue.ChangeTracker.OriginalValues.Clear();
            if (originalValue.ChangeTracker.State != ObjectState.Unchanged)
            {
                foreach (var subEntity in originalValue.Products.Where(se => se.ChangeTracker.State != ObjectState.Unchanged))
                {
                    var relatedEntity = reducedProductsDictionary[subEntity]; 
                    if (! newValue.Products.Contains(relatedEntity))
                    {
                        ObjectList objectsAddedToCollectionProperties;
                        if (newValue.ChangeTracker.State == ObjectState.Added || relatedEntity.ChangeTracker.State == ObjectState.Added || originalValue.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("Products", out objectsAddedToCollectionProperties) && objectsAddedToCollectionProperties.Contains(subEntity))
                            newValue.Products.Add(relatedEntity);
                        else
                            newValue.Products.Attach(relatedEntity, true);
                    }
                }
    			
            }
        }
    
        private void RefreshComputedValues(WAQSWorkshopClient.Category entity, WAQSWorkshopClient.Category dbEntity)
        {
            if (entity.HasTemporaryKey)
            {
                CategoriesDico.Add(new CategoryKeys { Id = dbEntity.Id }, entity);
                RemoveCategoriesAddedDico(entity);
            }						
            if (dbEntity.HasTemporaryKey)
            {
                entity.Id = dbEntity.Id;
            }
            entity.ResetEntityKey();
        }
    
        private void DisposeCategory()
        {
            if (_categories != null)
            {
                foreach (var entity in _categories.AllEntities.ToList())
                {
                    entity.Products.CollectionChanged -= Category_ProductsCollectionChanged;
                    EntityDetached(entity);
                }
                _categories.EntityAdded -= EntityAddedOrAttached;
                _categories.EntityAttached -= EntityAddedOrAttached;
                _categories.EntityReplaced -= EntityReplaced;
                _categories.EntityDetached -= EntityDetached;
            }
        }
    
        private Dictionary<CustomerKeys, WAQSWorkshopClient.Customer> _customersDico;
        private Dictionary<CustomerKeys, WAQSWorkshopClient.Customer> CustomersDico
        {
            get { return _customersDico ?? (_customersDico = new Dictionary<CustomerKeys, WAQSWorkshopClient.Customer>()); }
        }
    
        private Dictionary<Guid, WAQSWorkshopClient.Customer> _customersDataTransferDico;
        private Dictionary<Guid, WAQSWorkshopClient.Customer> CustomersDataTransferDico
        {
            get { return _customersDataTransferDico ?? (_customersDataTransferDico = new Dictionary<Guid, WAQSWorkshopClient.Customer>()); }
        }
    
        public IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Customer> Customers 
        { 
            get { return CustomersInternal; }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Customer> CustomersInternal
        {
            get
            {
                if (_customers == null)
                {
                    _customers = new ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Customer>("Customers", this, e => new CustomerKeys { Id = e.Id });
                    _customers.EntityAdded += EntityAddedOrAttached;
                    _customers.EntityAttached += EntityAddedOrAttached;
                    _customers.EntityReplaced += EntityReplaced;
                    _customers.EntityDetached += EntityDetached;
                }
                return _customers;
            }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Customer> _customers;
    
        private void EntityAddedOrAttached(WAQSWorkshopClient.Customer entity)
        {
    
            ClientEntitySetExtensions.AddEntityInDico(Customers, entity);
            Customer entityTmp;
            if (CustomersDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out entityTmp))
            {
                if (entityTmp == entity)
                    new InvalidOperationException();
            }
            else
                CustomersDataTransferDico.Add(entity.DataTransferEntityKey, entity);		
            var customerKeys = new CustomerKeys { Id = entity.Id };
            WAQSWorkshopClient.Customer entityInDico;
            if (! CustomersDico.TryGetValue(customerKeys, out entityInDico))
                CustomersDico.Add(customerKeys, entity);
            else if (entityInDico != entity)
                throw new InvalidOperationException();
            entity.IsInitializingRelationships = true;
    		AddPropertyDescriptorToEntity(entity);
            entity.Invoices.CollectionChanged += Customer_InvoicesCollectionChanged;
            entity.Orders.CollectionChanged += Customer_OrdersCollectionChanged;
            EntityAttachWithoutChangingStateSubEntities(entity);
            List<WAQSWorkshopClient.Invoice> invoices;
            if (InvoicesCustomerFKsDico.TryGetValue(customerKeys, out invoices))
                foreach (var e in invoices)
                    e.Customer = entity;
            List<WAQSWorkshopClient.Order> orders;
            if (OrdersCustomerFKsDico.TryGetValue(customerKeys, out orders))
                foreach (var e in orders)
                    e.Customer = entity;
    
            foreach (var se in entity.Invoices)
                if (! InvoicesInternal.Contains(se))
                    InvoicesInternal.AttachWithoutChangingState(se, entity.ChangeTracker.State);
    
    
            foreach (var se in entity.Orders)
                if (! OrdersInternal.Contains(se))
                    OrdersInternal.AttachWithoutChangingState(se, entity.ChangeTracker.State);
    
            entity.IsInitializingRelationships = false;
        }
    
        private void EntityReplaced(WAQSWorkshopClient.Customer entityInEntitySet, WAQSWorkshopClient.Customer entity)
        {
            EntityReplacedInternal(entityInEntitySet, entity);
        }
        private void EntityReplacedInternal(WAQSWorkshopClient.Customer entityInEntitySet, WAQSWorkshopClient.Customer entity)
        {
            if (entityInEntitySet.CompanyName != entity.CompanyName)
                entityInEntitySet.CompanyName = entity.CompanyName;
            if (entityInEntitySet.ContactName != entity.ContactName)
                entityInEntitySet.ContactName = entity.ContactName;
            if (entityInEntitySet.ContactTitle != entity.ContactTitle)
                entityInEntitySet.ContactTitle = entity.ContactTitle;
            if (entityInEntitySet.Address != entity.Address)
                entityInEntitySet.Address = entity.Address;
            if (entityInEntitySet.City != entity.City)
                entityInEntitySet.City = entity.City;
            if (entityInEntitySet.Region != entity.Region)
                entityInEntitySet.Region = entity.Region;
            if (entityInEntitySet.PostalCode != entity.PostalCode)
                entityInEntitySet.PostalCode = entity.PostalCode;
            if (entityInEntitySet.Country != entity.Country)
                entityInEntitySet.Country = entity.Country;
            if (entityInEntitySet.Phone != entity.Phone)
                entityInEntitySet.Phone = entity.Phone;
            if (entityInEntitySet.Fax != entity.Fax)
                entityInEntitySet.Fax = entity.Fax;
            if (entityInEntitySet.IsVIP != entity.IsVIP)
                entityInEntitySet.IsVIP = entity.IsVIP;
        }
    
        private void Customer_InvoicesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
                foreach (WAQSWorkshopClient.Invoice subEntity in e.NewItems)
                {
                    WAQSWorkshopClient.Invoice se = null;
                    if (!subEntity.IsInitializingRelationships && (se = GetEntityInCache(subEntity)) == null)
                        AttachWithoutChangingState(subEntity);
                    else if (se != null && se != subEntity)
                        throw new InvalidOperationException();
                }
        }
         
        private void Customer_OrdersCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
                foreach (WAQSWorkshopClient.Order subEntity in e.NewItems)
                {
                    WAQSWorkshopClient.Order se = null;
                    if (!subEntity.IsInitializingRelationships && (se = GetEntityInCache(subEntity)) == null)
                        AttachWithoutChangingState(subEntity);
                    else if (se != null && se != subEntity)
                        throw new InvalidOperationException();
                }
        }
         
    
        private void EntityDetached(WAQSWorkshopClient.Customer entity)
        {
    
            CustomersDataTransferDico.Remove(entity.DataTransferEntityKey);		
            var entityKey = new CustomerKeys { Id = entity.Id };
            CustomersDico.Remove(entityKey);
        
            entity.Invoices.CollectionChanged -= Customer_InvoicesCollectionChanged;
            entity.Orders.CollectionChanged -= Customer_OrdersCollectionChanged;
            ClientEntitySetExtensions.RemoveEntityInDico(entity);
    		RemovePropertyDescriptorToEntity(entity);
            foreach (var subEntity in InvoicesInternal)
            {
                object originalValue;
                if (subEntity.ChangeTracker.OriginalValues.TryGetValue("Customer", out originalValue) && originalValue == entity)
                    subEntity.ChangeTracker.OriginalValues.Remove("Customer");
            }
            foreach (var subEntity in OrdersInternal)
            {
                object originalValue;
                if (subEntity.ChangeTracker.OriginalValues.TryGetValue("Customer", out originalValue) && originalValue == entity)
                    subEntity.ChangeTracker.OriginalValues.Remove("Customer");
            }
        }
    
        
        private void EntityAttachWithoutChangingStateSubEntities(WAQSWorkshopClient.Customer entity)
        {
            var entityInCache = GetEntityInCache(entity);
            bool entityInCacheIsInitializingRelationships = false;
            if (entityInCache != null)
            {
                entityInCacheIsInitializingRelationships = entityInCache.IsInitializingRelationships;
                entityInCache.IsInitializingRelationships = true;
            }
            EntityAttachWithoutChangingStateSubEntitiesBody(entity, entityInCache);
            if (entityInCache != null)
                entityInCache.IsInitializingRelationships = entityInCacheIsInitializingRelationships;
        }
        
        private void EntityAttachWithoutChangingStateSubEntitiesBody(WAQSWorkshopClient.Customer entity, WAQSWorkshopClient.Customer entityInCache)
        {
            if (entity == entityInCache)
                return;
            foreach (var subEntity in entity.Invoices.ToList())
            {
                WAQSWorkshopClient.Invoice subEntityInCache;
                if (Invoices.Contains(subEntity))
                    subEntityInCache = subEntity;
                else
                    subEntityInCache = AttachWithoutChangingState(subEntity, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
    			if (!(entityInCache == null || entityInCache == entity || entityInCache.Invoices.Contains(subEntityInCache)))
                    entityInCache.Invoices.Add(subEntityInCache);
            }
            if (entityInCache != null)
            {
                List<WAQSWorkshopClient.Invoice> subEntities;
                if (InvoicesCustomerFKsDico.TryGetValue(new CustomerKeys { Id = entity.Id }, out subEntities))
                    foreach (var subEntity in subEntities)
                    {
                        if (subEntity.Customer == null)
                            ((ITrackableCollection<Invoice>)entityInCache.Invoices).AttachWithoutCheckingIfAlreadyExist(subEntity);
                    }
            }
            foreach (var subEntity in entity.Orders.ToList())
            {
                WAQSWorkshopClient.Order subEntityInCache;
                if (Orders.Contains(subEntity))
                    subEntityInCache = subEntity;
                else
                    subEntityInCache = AttachWithoutChangingState(subEntity, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
    			if (!(entityInCache == null || entityInCache == entity || entityInCache.Orders.Contains(subEntityInCache)))
                    entityInCache.Orders.Add(subEntityInCache);
            }
            if (entityInCache != null)
            {
                List<WAQSWorkshopClient.Order> subEntities;
                if (OrdersCustomerFKsDico.TryGetValue(new CustomerKeys { Id = entity.Id }, out subEntities))
                    foreach (var subEntity in subEntities)
                    {
                        if (subEntity.Customer == null)
                            ((ITrackableCollection<Order>)entityInCache.Orders).AttachWithoutCheckingIfAlreadyExist(subEntity);
                    }
            }
        }
    
        private WAQSWorkshopClient.Customer GetEntityInCache(WAQSWorkshopClient.Customer entity, bool includingDeleted = false, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            WAQSWorkshopClient.Customer value;
            if (! (applyDataTransfer && CustomersDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out value)) && (! CustomersDico.TryGetValue(new CustomerKeys { Id = entity.Id }, out value) || value.ChangeTracker.State == ObjectState.Detached || ! includingDeleted && value.ChangeTracker.State == ObjectState.Deleted))
                return null;
            return value;
        }
    
        protected override WAQSWorkshopClient.Customer GetEntity(WAQSWorkshopClient.Customer entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
        {
            return GetEntity(entity, applyState, mergeOption, true, applyDataTransfer: applyDataTransfer);
        }
        private WAQSWorkshopClient.Customer GetEntity(WAQSWorkshopClient.Customer entity, bool applyState, MergeOption? mergeOption = null, bool includingDeleted = false, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            object entityGot;
            if (EntitiesGot.TryGetValue(entity, out entityGot))
                return (WAQSWorkshopClient.Customer)entityGot;
    
            if (mergeOption == null)
                mergeOption = MergeOption;
    
            if (mergeOption == MergeOption.NoTracking)
                return entity;
    
            if (CustomersInternal.Contains(entity))
                return entity;
    
            entity.IsDeserializing = true;
    
            includingDeleted |= applyState;
    
            var entityInvoices = entity.Invoices.ToList();
            entity.Invoices.Clear();
            var entityOrders = entity.Orders.ToList();
            entity.Orders.Clear();
    
            WAQSWorkshopClient.Customer value;
            var entityInCache = GetEntityInCache(entity, includingDeleted, applyDataTransfer);
            ObjectChangeTracker originalChangeTracker = entity.ChangeTracker;
            if (entityInCache == null)
            {
                var originalState = entity.ChangeTracker.State;
                entity.ChangeTracker = null;
                entity.IsDeserializing = false;
                var state = originalState == ObjectState.Detached ? defaultState : originalState;
                switch(state)
                {
                    case ObjectState.Added:
                        CustomersInternal.AddWithoutCheckingIfAlreadyExist(entity);
                        break;
                    default:
                        entity.IsInitializingRelationships = true;
                        CustomersInternal.AttachWithoutCheckingIfAlreadyExist(entity);
                        entity.IsInitializingRelationships = false;
                        break;
                }
                if (applyState)
                    entity.ChangeTracker.State = state;
                value = entity;
            }
            else
            {
                switch (mergeOption)
                {
                    case MergeOption.AppendOnly:
                        RefreshNewLoadedProperties(entityInCache, entity);
                        value = entityInCache;
                        break;
                    case MergeOption.OverwriteChanges:
                        RefreshCurrentValues(entityInCache, entity, applyState: applyState);
                        value = entityInCache;
                        break;
                    case MergeOption.PreserveChanges:
                        RefreshOriginalValues(entityInCache, entity);
                        value = entityInCache;
                        break;
                    default: 
                        throw new NotImplementedException();
                }
                if (applyState)
                {
                    switch(entity.ChangeTracker.State)
                    {
                        case ObjectState.Detached:
                            Customers.Detach(value);
                            break;
                        case ObjectState.Deleted:
                            Customers.Remove(value);
                            break;
                        default:
                            value.ChangeTracker.State = entity.ChangeTracker.State;
                            break;
                    }
                }
            }
            EntitiesGot.Add(entity, value);
            if (! entity.IsInitializingRelationships)
            {
                entity.IsInitializingRelationships = true;
                value.IsInitializingRelationships = true;
    
                foreach (var e in entityInvoices)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(e, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Invoices.Add(GetEntity(e, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer));
                }
                foreach (var e in entityOrders)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(e, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Orders.Add(GetEntity(e, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer));
                }
    
                if (applyState && originalChangeTracker != null && originalChangeTracker != value.ChangeTracker)
                {
                    foreach (var modifiedProperty in originalChangeTracker.ModifiedProperties)
                        if (! value.ChangeTracker.ModifiedProperties.Contains(modifiedProperty))
                            value.ChangeTracker.ModifiedProperties.Add(modifiedProperty);
                    foreach (var originalValue in originalChangeTracker.OriginalValues)
                    {
                        var originalValueEntity = originalValue.Value as IEntity;
                        if (originalValueEntity != null) 
                        {
                            var originalState = originalValueEntity.ChangeTracker.State;
                            IEntity originalEntity = null;
                            var ov = originalValueEntity == null ? originalValue.Value : originalEntity = GetEntity(originalValueEntity, true, defaultState, applyDataTransfer) as IEntity;
                            if (value.ChangeTracker.State != ObjectState.Detached)
                                value.ChangeTracker.RecordOriginalValue(originalValue.Key, ov);
                            if (originalValueEntity != null && originalState == ObjectState.Detached)
                                Detach(originalEntity);
                        }
                    }
                    foreach (var objectsRemovedToCollectionProperties in originalChangeTracker.ObjectsRemovedFromCollectionProperties)
                        foreach (IEntity objectsRemovedToCollectionProperty in objectsRemovedToCollectionProperties.Value)
                            if (objectsRemovedToCollectionProperty != null)
                            {
                                var originalState = objectsRemovedToCollectionProperty.ChangeTracker.State;
                                IObjectWithChangeTracker removedEntity = (IObjectWithChangeTracker)GetEntity(objectsRemovedToCollectionProperty, true, defaultState, applyDataTransfer);
                                switch (objectsRemovedToCollectionProperties.Key)
                                {
                                    case "Invoices":
                                            value.Invoices.Remove((WAQSWorkshopClient.Invoice)removedEntity);
                                            break;
                                    case "Orders":
                                            value.Orders.Remove((WAQSWorkshopClient.Order)removedEntity);
                                            break;
                                }
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordRemovalFromCollectionProperties(objectsRemovedToCollectionProperties.Key, removedEntity);
                                if (originalState == ObjectState.Detached)
                                    Detach(removedEntity);
                            }
                    foreach (var objectsAddedToCollectionProperties in originalChangeTracker.ObjectsAddedToCollectionProperties)
                        foreach (var objectsAddedToCollectionProperty in objectsAddedToCollectionProperties.Value)
                            if (objectsAddedToCollectionProperty != null)
                            {
                                var addedEntity = (IObjectWithChangeTracker)GetEntity(objectsAddedToCollectionProperty, true, defaultState, applyDataTransfer);
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordAdditionToCollectionProperties(objectsAddedToCollectionProperties.Key, addedEntity);
                            }
                }
    
                value.IsInitializingRelationships = false;
            }
            value.ChangeTracker.ChangeTrackingEnabled = true;
            return value;
        } 
    
        private WAQSWorkshopClient.Customer AttachWithoutChangingState(WAQSWorkshopClient.Customer entity, ObjectState? defaultState = null)
        {
            if (CustomersInternal.Contains(entity))
                return entity;
            var entityIncludingCache = Init ? GetEntityInCache(entity) ?? entity : entity;
            if (CustomersInternal.AttachWithoutChangingState(entityIncludingCache, defaultState))
                EntityAttachWithoutChangingStateSubEntities(entity);
            return entityIncludingCache;
        }
    
        public void RefreshNewLoadedProperties(WAQSWorkshopClient.Customer entityInCache, WAQSWorkshopClient.Customer entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            entityInCache.IsDeserializing = isDeserializing;
        }
    
        public void RefreshCurrentValues(WAQSWorkshopClient.Customer entityInCache, WAQSWorkshopClient.Customer entity)
        {
            RefreshCurrentValues(entityInCache, entity, false);
        }
        public void RefreshCurrentValues(WAQSWorkshopClient.Customer entityInCache, WAQSWorkshopClient.Customer entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            if (entityInCache.Id != entity.Id)
                entityInCache.Id = entity.Id;
            if (entityInCache.CompanyName != entity.CompanyName)
                entityInCache.CompanyName = entity.CompanyName;
            if (entityInCache.ContactName != entity.ContactName)
                entityInCache.ContactName = entity.ContactName;
            if (entityInCache.ContactTitle != entity.ContactTitle)
                entityInCache.ContactTitle = entity.ContactTitle;
            if (entityInCache.Address != entity.Address)
                entityInCache.Address = entity.Address;
            if (entityInCache.City != entity.City)
                entityInCache.City = entity.City;
            if (entityInCache.Region != entity.Region)
                entityInCache.Region = entity.Region;
            if (entityInCache.PostalCode != entity.PostalCode)
                entityInCache.PostalCode = entity.PostalCode;
            if (entityInCache.Country != entity.Country)
                entityInCache.Country = entity.Country;
            if (entityInCache.Phone != entity.Phone)
                entityInCache.Phone = entity.Phone;
            if (entityInCache.Fax != entity.Fax)
                entityInCache.Fax = entity.Fax;
            if (entityInCache.IsVIP != entity.IsVIP)
                entityInCache.IsVIP = entity.IsVIP;
            entityInCache.IsDeserializing = isDeserializing;
            if (applyState)
            {
                entityInCache.ChangeTracker.State = entity.ChangeTracker.State;
                entityInCache.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties;
            }
            else
            {
                entityInCache.ChangeTracker.AcceptChanges();
                entityInCache.ChangeTracker.ModifiedProperties.Clear();
            }
        }
    
        private void RefreshOriginalValues(WAQSWorkshopClient.Customer entityInCache, WAQSWorkshopClient.Customer entity)
        {
            if (! (entityInCache.CompanyName == entity.CompanyName || entityInCache.ChangeTracker.ModifiedProperties.Contains("CompanyName")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("CompanyName");
            if (! (entityInCache.ContactName == entity.ContactName || entityInCache.ChangeTracker.ModifiedProperties.Contains("ContactName")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("ContactName");
            if (! (entityInCache.ContactTitle == entity.ContactTitle || entityInCache.ChangeTracker.ModifiedProperties.Contains("ContactTitle")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("ContactTitle");
            if (! (entityInCache.Address == entity.Address || entityInCache.ChangeTracker.ModifiedProperties.Contains("Address")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Address");
            if (! (entityInCache.City == entity.City || entityInCache.ChangeTracker.ModifiedProperties.Contains("City")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("City");
            if (! (entityInCache.Region == entity.Region || entityInCache.ChangeTracker.ModifiedProperties.Contains("Region")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Region");
            if (! (entityInCache.PostalCode == entity.PostalCode || entityInCache.ChangeTracker.ModifiedProperties.Contains("PostalCode")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("PostalCode");
            if (! (entityInCache.Country == entity.Country || entityInCache.ChangeTracker.ModifiedProperties.Contains("Country")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Country");
            if (! (entityInCache.Phone == entity.Phone || entityInCache.ChangeTracker.ModifiedProperties.Contains("Phone")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Phone");
            if (! (entityInCache.Fax == entity.Fax || entityInCache.ChangeTracker.ModifiedProperties.Contains("Fax")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Fax");
            if (! (entityInCache.IsVIP == entity.IsVIP || entityInCache.ChangeTracker.ModifiedProperties.Contains("IsVIP")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("IsVIP");
        }
    
        private WAQSWorkshopClient.Customer ReduceToKey(WAQSWorkshopClient.Customer entity)
        {
            WAQSWorkshopClient.Customer value = new WAQSWorkshopClient.Customer { Id = entity.Id };
            return value;
        }
    
        private WAQSWorkshopClient.Customer ReduceToModifications(WAQSWorkshopClient.Customer entity)
        {
            WAQSWorkshopClient.Customer value = new WAQSWorkshopClient.Customer { Id = entity.Id };
            value.ChangeTracker.Saving = true;
            value.ChangeTracker.ChangeTrackingEnabled = true;
            value.ChangeTracker.State = entity.ChangeTracker.State;
            switch (entity.ChangeTracker.State)
            {
                case ObjectState.Added:
                    value.CompanyName = entity.CompanyName;
                    value.ContactName = entity.ContactName;
                    value.ContactTitle = entity.ContactTitle;
                    value.Address = entity.Address;
                    value.City = entity.City;
                    value.Region = entity.Region;
                    value.PostalCode = entity.PostalCode;
                    value.Country = entity.Country;
                    value.Phone = entity.Phone;
                    value.Fax = entity.Fax;
                    value.IsVIP = entity.IsVIP;
    				break;
                case ObjectState.Deleted:
                    value.ChangeTracker.ChangeTrackingEnabled = false;
                    value.CompanyName = default(string); 
                    value.ContactName = default(string); 
                    value.ContactTitle = default(string); 
                    value.Address = default(string); 
                    value.City = default(string); 
                    value.Region = default(string); 
                    value.PostalCode = default(string); 
                    value.Country = default(string); 
                    value.Phone = default(string); 
                    value.Fax = default(string); 
                    value.IsVIP = default(bool); 
    				break;
                case ObjectState.Modified:
                    value.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties.ToList();
                    foreach (var modifiedPropery in entity.ChangeTracker.ModifiedProperties.Union(entity.ChangeTracker.ValidationProperties))
                        switch (modifiedPropery)
                        {
                            case "CompanyName":
                                value.CompanyName = entity.CompanyName;
                                break;
                            case "ContactName":
                                value.ContactName = entity.ContactName;
                                break;
                            case "ContactTitle":
                                value.ContactTitle = entity.ContactTitle;
                                break;
                            case "Address":
                                value.Address = entity.Address;
                                break;
                            case "City":
                                value.City = entity.City;
                                break;
                            case "Region":
                                value.Region = entity.Region;
                                break;
                            case "PostalCode":
                                value.PostalCode = entity.PostalCode;
                                break;
                            case "Country":
                                value.Country = entity.Country;
                                break;
                            case "Phone":
                                value.Phone = entity.Phone;
                                break;
                            case "Fax":
                                value.Fax = entity.Fax;
                                break;
                            case "IsVIP":
                                value.IsVIP = entity.IsVIP;
                                break;
                        }
                    break;
                case ObjectState.Unchanged:
                case ObjectState.CascadeDeleted:
                    break;
                default: //case ObjectState.Detached:
                    throw new InvalidOperationException();
            }
            return value;
        }
    
        private void ReduceNavigationProperties(WAQSWorkshopClient.Customer originalValue, WAQSWorkshopClient.Customer newValue, Dictionary<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice> reducedInvoicesDictionary, Dictionary<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order> reducedOrdersDictionary)
        {
            newValue.ChangeTracker.ObjectsAddedToCollectionProperties.Clear();
            newValue.ChangeTracker.ObjectsRemovedFromCollectionProperties.Clear();
            newValue.ChangeTracker.OriginalValues.Clear();
            if (originalValue.ChangeTracker.State != ObjectState.Unchanged)
            {
                foreach (var subEntity in originalValue.Invoices.Where(se => se.ChangeTracker.State != ObjectState.Unchanged))
                {
                    var relatedEntity = reducedInvoicesDictionary[subEntity]; 
                    if (! newValue.Invoices.Contains(relatedEntity))
                    {
                        ObjectList objectsAddedToCollectionProperties;
                        if (newValue.ChangeTracker.State == ObjectState.Added || relatedEntity.ChangeTracker.State == ObjectState.Added || originalValue.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("Invoices", out objectsAddedToCollectionProperties) && objectsAddedToCollectionProperties.Contains(subEntity))
                            newValue.Invoices.Add(relatedEntity);
                        else
                            newValue.Invoices.Attach(relatedEntity, true);
                    }
                }
                foreach (var subEntity in originalValue.Orders.Where(se => se.ChangeTracker.State != ObjectState.Unchanged))
                {
                    var relatedEntity = reducedOrdersDictionary[subEntity]; 
                    if (! newValue.Orders.Contains(relatedEntity))
                    {
                        ObjectList objectsAddedToCollectionProperties;
                        if (newValue.ChangeTracker.State == ObjectState.Added || relatedEntity.ChangeTracker.State == ObjectState.Added || originalValue.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("Orders", out objectsAddedToCollectionProperties) && objectsAddedToCollectionProperties.Contains(subEntity))
                            newValue.Orders.Add(relatedEntity);
                        else
                            newValue.Orders.Attach(relatedEntity, true);
                    }
                }
    			
            }
        }
    
        private void RefreshComputedValues(WAQSWorkshopClient.Customer entity, WAQSWorkshopClient.Customer dbEntity)
        {
        }
    
        private void DisposeCustomer()
        {
            if (_customers != null)
            {
                foreach (var entity in _customers.AllEntities.ToList())
                {
                    entity.Invoices.CollectionChanged -= Customer_InvoicesCollectionChanged;
                    entity.Orders.CollectionChanged -= Customer_OrdersCollectionChanged;
                    EntityDetached(entity);
                }
                _customers.EntityAdded -= EntityAddedOrAttached;
                _customers.EntityAttached -= EntityAddedOrAttached;
                _customers.EntityReplaced -= EntityReplaced;
                _customers.EntityDetached -= EntityDetached;
            }
        }
    
        private Dictionary<EmployeeKeys, WAQSWorkshopClient.Employee> _employeesDico;
        private Dictionary<EmployeeKeys, WAQSWorkshopClient.Employee> EmployeesDico
        {
            get { return _employeesDico ?? (_employeesDico = new Dictionary<EmployeeKeys, WAQSWorkshopClient.Employee>()); }
        }
    
        private Dictionary<Guid, WAQSWorkshopClient.Employee> _employeesDataTransferDico;
        private Dictionary<Guid, WAQSWorkshopClient.Employee> EmployeesDataTransferDico
        {
            get { return _employeesDataTransferDico ?? (_employeesDataTransferDico = new Dictionary<Guid, WAQSWorkshopClient.Employee>()); }
        }
    
        private Dictionary<string, WAQSWorkshopClient.Employee> _employeesAddedDico;
        private Dictionary<string, WAQSWorkshopClient.Employee> EmployeesAddedDico
        {
            get { return _employeesAddedDico ?? (_employeesAddedDico = new Dictionary<string, WAQSWorkshopClient.Employee>()); }
        }
        private void AddEmployeesAddedDico(WAQSWorkshopClient.Employee entity)
        {
            EmployeesAddedDico.Add(entity.EntityKey, entity);
            entity.EntityKeyChanged += ResetEntityKey;
        }
        private void RemoveEmployeesAddedDico(WAQSWorkshopClient.Employee entity)
        {
            EmployeesAddedDico.Remove(entity.EntityKey);
            entity.EntityKeyChanged -= ResetEntityKey;
        }
    
        private void ResetEntityKey(WAQSWorkshopClient.Employee entity, string oldEntityKey)
        {
            if (entity.HasTemporaryKey)
            {
                if (entity.EntityKey != oldEntityKey)
                {
                    if (oldEntityKey != null)
                        EmployeesAddedDico.Remove(oldEntityKey);
                    EmployeesAddedDico.Add(entity.EntityKey, entity);
                }
            }
            else
            {
                EmployeesAddedDico.Remove(oldEntityKey);
                entity.EntityKeyChanged -= ResetEntityKey;
                EmployeesDico.Add(new EmployeeKeys { Id = entity.Id }, entity);
            }
        }
        public IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Employee> Employees 
        { 
            get { return EmployeesInternal; }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Employee> EmployeesInternal
        {
            get
            {
                if (_employees == null)
                {
                    _employees = new ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Employee>("Employees", this, e => new EmployeeKeys { Id = e.Id });
                    _employees.EntityAdded += EntityAddedOrAttached;
                    _employees.EntityAttached += EntityAddedOrAttached;
                    _employees.EntityReplaced += EntityReplaced;
                    _employees.EntityDetached += EntityDetached;
                }
                return _employees;
            }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Employee> _employees;
        private Dictionary<EmployeeKeys, List<WAQSWorkshopClient.Employee>> _employeesEmployee1FKsDico;
        private Dictionary<EmployeeKeys, List<WAQSWorkshopClient.Employee>> EmployeesEmployee1FKsDico
        {
            get { return _employeesEmployee1FKsDico ?? (_employeesEmployee1FKsDico = new Dictionary<EmployeeKeys, List<WAQSWorkshopClient.Employee>>()); }
        }
    
        private void EntityAddedOrAttached(WAQSWorkshopClient.Employee entity)
        {
    
            ClientEntitySetExtensions.AddEntityInDico(Employees, entity);
            Employee entityTmp;
            if (EmployeesDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out entityTmp))
            {
                if (entityTmp == entity)
                    new InvalidOperationException();
            }
            else
                EmployeesDataTransferDico.Add(entity.DataTransferEntityKey, entity);		
            if (entity.HasTemporaryKey)
            {
                WAQSWorkshopClient.Employee entityInAddedDico;
                if (! EmployeesAddedDico.TryGetValue(entity.EntityKey, out entityInAddedDico))
                    AddEmployeesAddedDico(entity);
                else if (entityInAddedDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                entity.Employees1.CollectionChanged += Employee_Employees1CollectionChanged;
                entity.Orders.CollectionChanged += Employee_OrdersCollectionChanged;
                entity.NavigationPropertyChanged += EmployeeNavigationPropertyChanged;
                EntityAttachWithoutChangingStateSubEntities(entity);
            }
            else
            {
                var employeeKeys = new EmployeeKeys { Id = entity.Id };
                WAQSWorkshopClient.Employee entityInDico;
                if (! EmployeesDico.TryGetValue(employeeKeys, out entityInDico))
                    EmployeesDico.Add(employeeKeys, entity);
                else if (entityInDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                entity.Employees1.CollectionChanged += Employee_Employees1CollectionChanged;
                entity.Orders.CollectionChanged += Employee_OrdersCollectionChanged;
                entity.NavigationPropertyChanged += EmployeeNavigationPropertyChanged;
                EntityAttachWithoutChangingStateSubEntities(entity);
                List<WAQSWorkshopClient.Employee> employees1;
                if (EmployeesEmployee1FKsDico.TryGetValue(employeeKeys, out employees1))
                    foreach (var e in employees1)
                        e.Employee1 = entity;
                List<WAQSWorkshopClient.Order> orders;
                if (OrdersEmployeeFKsDico.TryGetValue(employeeKeys, out orders))
                    foreach (var e in orders)
                        e.Employee = entity;
            }
    
            foreach (var se in entity.Employees1)
                if (! EmployeesInternal.Contains(se))
                    EmployeesInternal.AttachWithoutChangingState(se, entity.ChangeTracker.State);
    
    
            if (! (entity.Employee1 == null || EmployeesInternal.Contains(entity.Employee1)))
                EmployeesInternal.AttachWithoutChangingState(entity.Employee1, entity.ChangeTracker.State);
    
            if (entity.ReportsTo != null)
            {
                var employeesEmployee1Keys = new EmployeeKeys { Id = entity.ReportsTo.Value };
                List<WAQSWorkshopClient.Employee> employeesEmployee1Entities;
                if (! EmployeesEmployee1FKsDico.TryGetValue(employeesEmployee1Keys, out employeesEmployee1Entities))
                    EmployeesEmployee1FKsDico.Add(employeesEmployee1Keys, employeesEmployee1Entities = new List<WAQSWorkshopClient.Employee>());
                employeesEmployee1Entities.Add(entity);
        
                WAQSWorkshopClient.Employee employee1;
                if (EmployeesDico.TryGetValue(employeesEmployee1Keys, out employee1))
                    entity.Employee1 = employee1;
            }
            entity.Employee1FKsChanged += EmployeeEmployee1FKsChanged;
    
            foreach (var se in entity.Orders)
                if (! OrdersInternal.Contains(se))
                    OrdersInternal.AttachWithoutChangingState(se, entity.ChangeTracker.State);
    
            entity.IsInitializingRelationships = false;
        }
    
        private void EntityReplaced(WAQSWorkshopClient.Employee entityInEntitySet, WAQSWorkshopClient.Employee entity)
        {
            EntityReplacedInternal(entityInEntitySet, entity);
        }
        private void EntityReplacedInternal(WAQSWorkshopClient.Employee entityInEntitySet, WAQSWorkshopClient.Employee entity)
        {
            if (entityInEntitySet.LastName != entity.LastName)
                entityInEntitySet.LastName = entity.LastName;
            if (entityInEntitySet.FirstName != entity.FirstName)
                entityInEntitySet.FirstName = entity.FirstName;
            if (entityInEntitySet.Title != entity.Title)
                entityInEntitySet.Title = entity.Title;
            if (entityInEntitySet.TitleOfCourtesy != entity.TitleOfCourtesy)
                entityInEntitySet.TitleOfCourtesy = entity.TitleOfCourtesy;
            if (entityInEntitySet.BirthDate != entity.BirthDate)
                entityInEntitySet.BirthDate = entity.BirthDate;
            if (entityInEntitySet.HireDate != entity.HireDate)
                entityInEntitySet.HireDate = entity.HireDate;
            if (entityInEntitySet.Address != entity.Address)
                entityInEntitySet.Address = entity.Address;
            if (entityInEntitySet.City != entity.City)
                entityInEntitySet.City = entity.City;
            if (entityInEntitySet.Region != entity.Region)
                entityInEntitySet.Region = entity.Region;
            if (entityInEntitySet.PostalCode != entity.PostalCode)
                entityInEntitySet.PostalCode = entity.PostalCode;
            if (entityInEntitySet.Country != entity.Country)
                entityInEntitySet.Country = entity.Country;
            if (entityInEntitySet.HomePhone != entity.HomePhone)
                entityInEntitySet.HomePhone = entity.HomePhone;
            if (entityInEntitySet.Extension != entity.Extension)
                entityInEntitySet.Extension = entity.Extension;
            if (entityInEntitySet.Photo != entity.Photo)
                entityInEntitySet.Photo = entity.Photo;
            if (entityInEntitySet.Notes != entity.Notes)
                entityInEntitySet.Notes = entity.Notes;
            if (entityInEntitySet.ReportsTo != entity.ReportsTo)
                entityInEntitySet.ReportsTo = entity.ReportsTo;
            if (entityInEntitySet.PhotoPath != entity.PhotoPath)
                entityInEntitySet.PhotoPath = entity.PhotoPath;
        }
    
        private void Employee_Employees1CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
                foreach (WAQSWorkshopClient.Employee subEntity in e.NewItems)
                {
                    WAQSWorkshopClient.Employee se = null;
                    if (!subEntity.IsInitializingRelationships && (se = GetEntityInCache(subEntity)) == null)
                        AttachWithoutChangingState(subEntity);
                    else if (se != null && se != subEntity)
                        throw new InvalidOperationException();
                }
        }
         
        private void EmployeeEmployee1FKsChanged(WAQSWorkshopClient.Employee entity, Nullable<int> oldReportsTo, Nullable<int> newReportsTo)
        {
            EmployeeKeys? oldEmployeesEmployee1Keys = oldReportsTo == null ? (EmployeeKeys?)null : new EmployeeKeys { Id = oldReportsTo.Value };
            EmployeeKeys? newEmployeesEmployee1Keys = newReportsTo == null ? (EmployeeKeys?)null : new EmployeeKeys { Id = newReportsTo.Value };
            if (newEmployeesEmployee1Keys.HasValue)
            {
                List<WAQSWorkshopClient.Employee> newCollection;
                if (! EmployeesEmployee1FKsDico.TryGetValue(newEmployeesEmployee1Keys.Value, out newCollection))
                    EmployeesEmployee1FKsDico.Add(newEmployeesEmployee1Keys.Value, newCollection = new List<WAQSWorkshopClient.Employee>());
                newCollection.Add(entity);
        
                WAQSWorkshopClient.Employee employee1;
                if (EmployeesDico.TryGetValue(newEmployeesEmployee1Keys.Value, out employee1))
                    entity.Employee1 = employee1;
            }
            List<WAQSWorkshopClient.Employee> oldCollection;
            if (oldEmployeesEmployee1Keys.HasValue && EmployeesEmployee1FKsDico.TryGetValue(oldEmployeesEmployee1Keys.Value, out oldCollection))
            {
                oldCollection.Remove(entity);
                if (oldCollection.Count == 0)
                    EmployeesEmployee1FKsDico.Remove(oldEmployeesEmployee1Keys.Value);
            }
        }
    
        private void Employee_OrdersCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
                foreach (WAQSWorkshopClient.Order subEntity in e.NewItems)
                {
                    WAQSWorkshopClient.Order se = null;
                    if (!subEntity.IsInitializingRelationships && (se = GetEntityInCache(subEntity)) == null)
                        AttachWithoutChangingState(subEntity);
                    else if (se != null && se != subEntity)
                        throw new InvalidOperationException();
                }
        }
         
        private void EmployeeNavigationPropertyChanged(Employee sender, string propertyName)
        {
            var entity = sender;
            if (propertyName == "Employee1" && entity.Employee1 != null)
            {
                if (! Employees.Contains(entity.Employee1))
                    AttachWithoutChangingState(entity.Employee1);
            }
            else if (new [] { "ReportsTo" }.Contains(propertyName))
            {
                var parentEntityInCache = Employees.FirstOrDefault(pe => pe.Id == entity.ReportsTo);
                if (parentEntityInCache != null && parentEntityInCache.Id != 0)
                    entity.Employee1 = parentEntityInCache;					
            }
        }
    
        private void EntityDetached(WAQSWorkshopClient.Employee entity)
        {
    
            EmployeesDataTransferDico.Remove(entity.DataTransferEntityKey);		
            if (entity.IsTemporaryKey)
                RemoveEmployeesAddedDico(entity);
            else
            {
                var entityKey = new EmployeeKeys { Id = entity.Id };
                EmployeesDico.Remove(entityKey);
            }
            if (entity.ReportsTo != null)
            {
                List<WAQSWorkshopClient.Employee> fkEntities;
                if (EmployeesEmployee1FKsDico.TryGetValue(new EmployeeKeys { Id = entity.ReportsTo.Value }, out fkEntities))
                    fkEntities.Remove(entity);
            }
        
            EmployeeKeys? oldEmployeesEmployee1Keys = entity.ReportsTo == null ? (EmployeeKeys?)null : new EmployeeKeys { Id = entity.ReportsTo.Value };
            {
                List<WAQSWorkshopClient.Employee> oldCollection;
                if (oldEmployeesEmployee1Keys.HasValue && EmployeesEmployee1FKsDico.TryGetValue(oldEmployeesEmployee1Keys.Value, out oldCollection))
                {
                    oldCollection.Remove(entity);
                    if (oldCollection.Count == 0)
                        EmployeesEmployee1FKsDico.Remove(oldEmployeesEmployee1Keys.Value);
                }
            }
    
            entity.Employees1.CollectionChanged -= Employee_Employees1CollectionChanged;
            entity.Orders.CollectionChanged -= Employee_OrdersCollectionChanged;
            entity.NavigationPropertyChanged -= EmployeeNavigationPropertyChanged;
            ClientEntitySetExtensions.RemoveEntityInDico(entity);
    		RemovePropertyDescriptorToEntity(entity);
            foreach (var subEntity in EmployeesInternal)
            {
                object originalValue;
                if (subEntity.ChangeTracker.OriginalValues.TryGetValue("Employee1", out originalValue) && originalValue == entity)
                    subEntity.ChangeTracker.OriginalValues.Remove("Employee1");
            }
            foreach (var subEntity in EmployeesInternal)
            {
                ObjectList originalValues;
                if (subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("Employees1", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.Remove("Employees1");
                }
                if (subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("Employees1", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Remove("Employees1");
                }
            }
            foreach (var subEntity in OrdersInternal)
            {
                object originalValue;
                if (subEntity.ChangeTracker.OriginalValues.TryGetValue("Employee", out originalValue) && originalValue == entity)
                    subEntity.ChangeTracker.OriginalValues.Remove("Employee");
            }
        }
    
        
        private void EntityAttachWithoutChangingStateSubEntities(WAQSWorkshopClient.Employee entity)
        {
            var entityInCache = GetEntityInCache(entity);
            bool entityInCacheIsInitializingRelationships = false;
            if (entityInCache != null)
            {
                entityInCacheIsInitializingRelationships = entityInCache.IsInitializingRelationships;
                entityInCache.IsInitializingRelationships = true;
            }
            EntityAttachWithoutChangingStateSubEntitiesBody(entity, entityInCache);
            if (entityInCache != null)
                entityInCache.IsInitializingRelationships = entityInCacheIsInitializingRelationships;
        }
        
        private void EntityAttachWithoutChangingStateSubEntitiesBody(WAQSWorkshopClient.Employee entity, WAQSWorkshopClient.Employee entityInCache)
        {
            if (entity == entityInCache)
                return;
            foreach (var subEntity in entity.Employees1.ToList())
            {
                WAQSWorkshopClient.Employee subEntityInCache;
                if (Employees.Contains(subEntity))
                    subEntityInCache = subEntity;
                else
                    subEntityInCache = AttachWithoutChangingState(subEntity, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
    			if (!(entityInCache == null || entityInCache == entity || entityInCache.Employees1.Contains(subEntityInCache)))
                    entityInCache.Employees1.Add(subEntityInCache);
            }
            if (entityInCache != null)
            {
                List<WAQSWorkshopClient.Employee> subEntities;
                if (EmployeesEmployee1FKsDico.TryGetValue(new EmployeeKeys { Id = entity.Id }, out subEntities))
                    foreach (var subEntity in subEntities)
                    {
                        if (subEntity.Employee1 == null)
                            ((ITrackableCollection<Employee>)entityInCache.Employees1).AttachWithoutCheckingIfAlreadyExist(subEntity);
                    }
            }
            if (entity.Employee1 != null)
            {
                WAQSWorkshopClient.Employee parentEntityInCache;
                if (EmployeesInternal.Contains(entity.Employee1))
                    parentEntityInCache = entity.Employee1;
                else
                    parentEntityInCache = AttachWithoutChangingState(entity.Employee1, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
                if (entityInCache != null)
                    entityInCache.Employee1 = parentEntityInCache;
            }
            else if (! (entityInCache == null || entityInCache.ReportsTo == null))
            {
                WAQSWorkshopClient.Employee parentEntityInCache;
                if (EmployeesDico.TryGetValue(new EmployeeKeys { Id = entityInCache.ReportsTo.Value }, out parentEntityInCache))
                {
                    entityInCache.Employee1 = parentEntityInCache;
                }
            }
            foreach (var subEntity in entity.Orders.ToList())
            {
                WAQSWorkshopClient.Order subEntityInCache;
                if (Orders.Contains(subEntity))
                    subEntityInCache = subEntity;
                else
                    subEntityInCache = AttachWithoutChangingState(subEntity, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
    			if (!(entityInCache == null || entityInCache == entity || entityInCache.Orders.Contains(subEntityInCache)))
                    entityInCache.Orders.Add(subEntityInCache);
            }
            if (entityInCache != null)
            {
                List<WAQSWorkshopClient.Order> subEntities;
                if (OrdersEmployeeFKsDico.TryGetValue(new EmployeeKeys { Id = entity.Id }, out subEntities))
                    foreach (var subEntity in subEntities)
                    {
                        if (subEntity.Employee == null)
                            ((ITrackableCollection<Order>)entityInCache.Orders).AttachWithoutCheckingIfAlreadyExist(subEntity);
                    }
            }
        }
    
        private WAQSWorkshopClient.Employee GetEntityInCache(WAQSWorkshopClient.Employee entity, bool includingDeleted = false, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            WAQSWorkshopClient.Employee value;
            if (! (applyDataTransfer && EmployeesDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out value)) && (! EmployeesDico.TryGetValue(new EmployeeKeys { Id = entity.Id }, out value) || value.ChangeTracker.State == ObjectState.Detached || ! includingDeleted && value.ChangeTracker.State == ObjectState.Deleted) && ! (entity.HasTemporaryKey && EmployeesAddedDico.TryGetValue(entity.EntityKey, out value)))
                return null;
            return value;
        }
    
        protected override WAQSWorkshopClient.Employee GetEntity(WAQSWorkshopClient.Employee entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
        {
            return GetEntity(entity, applyState, mergeOption, true, applyDataTransfer: applyDataTransfer);
        }
        private WAQSWorkshopClient.Employee GetEntity(WAQSWorkshopClient.Employee entity, bool applyState, MergeOption? mergeOption = null, bool includingDeleted = false, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            object entityGot;
            if (EntitiesGot.TryGetValue(entity, out entityGot))
                return (WAQSWorkshopClient.Employee)entityGot;
    
            if (mergeOption == null)
                mergeOption = MergeOption;
    
            if (mergeOption == MergeOption.NoTracking)
                return entity;
    
            if (EmployeesInternal.Contains(entity))
                return entity;
    
            entity.IsDeserializing = true;
    
            includingDeleted |= applyState;
    
            var entityEmployees1 = entity.Employees1.ToList();
            entity.Employees1.Clear();
            var entityEmployee1 = entity.Employee1;
            entity.Employee1 = null;
            var entityOrders = entity.Orders.ToList();
            entity.Orders.Clear();
    
            WAQSWorkshopClient.Employee value;
            var entityInCache = GetEntityInCache(entity, includingDeleted, applyDataTransfer);
            ObjectChangeTracker originalChangeTracker = entity.ChangeTracker;
            if (entityInCache == null)
            {
                var originalState = entity.ChangeTracker.State;
                entity.ChangeTracker = null;
                if (entity.ChangeTracker.State == ObjectState.Detached)
                    entity.ResetEntityKey();
                entity.IsDeserializing = false;
                var state = originalState == ObjectState.Detached ? defaultState : originalState;
                switch(state)
                {
                    case ObjectState.Added:
                        EmployeesInternal.AddWithoutCheckingIfAlreadyExist(entity);
                        break;
                    default:
                        entity.IsInitializingRelationships = true;
                        EmployeesInternal.AttachWithoutCheckingIfAlreadyExist(entity);
                        entity.IsInitializingRelationships = false;
                        break;
                }
                if (applyState)
                    entity.ChangeTracker.State = state;
                value = entity;
            }
            else
            {
                switch (mergeOption)
                {
                    case MergeOption.AppendOnly:
                        RefreshNewLoadedProperties(entityInCache, entity);
                        value = entityInCache;
                        break;
                    case MergeOption.OverwriteChanges:
                        RefreshCurrentValues(entityInCache, entity, applyState: applyState);
                        value = entityInCache;
                        break;
                    case MergeOption.PreserveChanges:
                        RefreshOriginalValues(entityInCache, entity);
                        value = entityInCache;
                        break;
                    default: 
                        throw new NotImplementedException();
                }
                if (applyState)
                {
                    switch(entity.ChangeTracker.State)
                    {
                        case ObjectState.Detached:
                            Employees.Detach(value);
                            break;
                        case ObjectState.Deleted:
                            Employees.Remove(value);
                            break;
                        default:
                            value.ChangeTracker.State = entity.ChangeTracker.State;
                            break;
                    }
                }
            }
            EntitiesGot.Add(entity, value);
            if (! entity.IsInitializingRelationships)
            {
                entity.IsInitializingRelationships = true;
                value.IsInitializingRelationships = true;
    
                foreach (var e in entityEmployees1)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(e, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Employees1.Add(GetEntity(e, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer));
                }
                if (entityEmployee1 != null)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(entityEmployee1, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Employee1 = GetEntity(entityEmployee1, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer);
                }
                foreach (var e in entityOrders)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(e, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Orders.Add(GetEntity(e, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer));
                }
    
                if (applyState && originalChangeTracker != null && originalChangeTracker != value.ChangeTracker)
                {
                    foreach (var modifiedProperty in originalChangeTracker.ModifiedProperties)
                        if (! value.ChangeTracker.ModifiedProperties.Contains(modifiedProperty))
                            value.ChangeTracker.ModifiedProperties.Add(modifiedProperty);
                    foreach (var originalValue in originalChangeTracker.OriginalValues)
                    {
                        var originalValueEntity = originalValue.Value as IEntity;
                        if (originalValueEntity != null) 
                        {
                            var originalState = originalValueEntity.ChangeTracker.State;
                            IEntity originalEntity = null;
                            var ov = originalValueEntity == null ? originalValue.Value : originalEntity = GetEntity(originalValueEntity, true, defaultState, applyDataTransfer) as IEntity;
                            if (value.ChangeTracker.State != ObjectState.Detached)
                                value.ChangeTracker.RecordOriginalValue(originalValue.Key, ov);
                            if (originalValueEntity != null && originalState == ObjectState.Detached)
                                Detach(originalEntity);
                        }
                    }
                    foreach (var objectsRemovedToCollectionProperties in originalChangeTracker.ObjectsRemovedFromCollectionProperties)
                        foreach (IEntity objectsRemovedToCollectionProperty in objectsRemovedToCollectionProperties.Value)
                            if (objectsRemovedToCollectionProperty != null)
                            {
                                var originalState = objectsRemovedToCollectionProperty.ChangeTracker.State;
                                IObjectWithChangeTracker removedEntity = (IObjectWithChangeTracker)GetEntity(objectsRemovedToCollectionProperty, true, defaultState, applyDataTransfer);
                                switch (objectsRemovedToCollectionProperties.Key)
                                {
                                    case "Employees1":
                                            value.Employees1.Remove((WAQSWorkshopClient.Employee)removedEntity);
                                            break;
                                    case "Orders":
                                            value.Orders.Remove((WAQSWorkshopClient.Order)removedEntity);
                                            break;
                                }
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordRemovalFromCollectionProperties(objectsRemovedToCollectionProperties.Key, removedEntity);
                                if (originalState == ObjectState.Detached)
                                    Detach(removedEntity);
                            }
                    foreach (var objectsAddedToCollectionProperties in originalChangeTracker.ObjectsAddedToCollectionProperties)
                        foreach (var objectsAddedToCollectionProperty in objectsAddedToCollectionProperties.Value)
                            if (objectsAddedToCollectionProperty != null)
                            {
                                var addedEntity = (IObjectWithChangeTracker)GetEntity(objectsAddedToCollectionProperty, true, defaultState, applyDataTransfer);
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordAdditionToCollectionProperties(objectsAddedToCollectionProperties.Key, addedEntity);
                            }
                }
    
                value.IsInitializingRelationships = false;
            }
            value.ChangeTracker.ChangeTrackingEnabled = true;
            return value;
        } 
    
        private WAQSWorkshopClient.Employee AttachWithoutChangingState(WAQSWorkshopClient.Employee entity, ObjectState? defaultState = null)
        {
            if (EmployeesInternal.Contains(entity))
                return entity;
            var entityIncludingCache = Init ? GetEntityInCache(entity) ?? entity : entity;
            if (EmployeesInternal.AttachWithoutChangingState(entityIncludingCache, defaultState))
                EntityAttachWithoutChangingStateSubEntities(entity);
            return entityIncludingCache;
        }
    
        public void RefreshNewLoadedProperties(WAQSWorkshopClient.Employee entityInCache, WAQSWorkshopClient.Employee entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            entityInCache.IsDeserializing = isDeserializing;
        }
    
        public void RefreshCurrentValues(WAQSWorkshopClient.Employee entityInCache, WAQSWorkshopClient.Employee entity)
        {
            RefreshCurrentValues(entityInCache, entity, false);
        }
        public void RefreshCurrentValues(WAQSWorkshopClient.Employee entityInCache, WAQSWorkshopClient.Employee entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            if (entityInCache.Id != entity.Id)
                entityInCache.Id = entity.Id;
            if (entityInCache.LastName != entity.LastName)
                entityInCache.LastName = entity.LastName;
            if (entityInCache.FirstName != entity.FirstName)
                entityInCache.FirstName = entity.FirstName;
            if (entityInCache.Title != entity.Title)
                entityInCache.Title = entity.Title;
            if (entityInCache.TitleOfCourtesy != entity.TitleOfCourtesy)
                entityInCache.TitleOfCourtesy = entity.TitleOfCourtesy;
            if (entityInCache.BirthDate != entity.BirthDate)
                entityInCache.BirthDate = entity.BirthDate;
            if (entityInCache.HireDate != entity.HireDate)
                entityInCache.HireDate = entity.HireDate;
            if (entityInCache.Address != entity.Address)
                entityInCache.Address = entity.Address;
            if (entityInCache.City != entity.City)
                entityInCache.City = entity.City;
            if (entityInCache.Region != entity.Region)
                entityInCache.Region = entity.Region;
            if (entityInCache.PostalCode != entity.PostalCode)
                entityInCache.PostalCode = entity.PostalCode;
            if (entityInCache.Country != entity.Country)
                entityInCache.Country = entity.Country;
            if (entityInCache.HomePhone != entity.HomePhone)
                entityInCache.HomePhone = entity.HomePhone;
            if (entityInCache.Extension != entity.Extension)
                entityInCache.Extension = entity.Extension;
            if (entityInCache.Photo != entity.Photo)
                entityInCache.Photo = entity.Photo;
            if (entityInCache.Notes != entity.Notes)
                entityInCache.Notes = entity.Notes;
            if (entityInCache.ReportsTo != entity.ReportsTo)
                entityInCache.ReportsTo = entity.ReportsTo;
            if (entityInCache.PhotoPath != entity.PhotoPath)
                entityInCache.PhotoPath = entity.PhotoPath;
            entityInCache.IsDeserializing = isDeserializing;
            if (applyState)
            {
                entityInCache.ChangeTracker.State = entity.ChangeTracker.State;
                entityInCache.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties;
            }
            else
            {
                entityInCache.ChangeTracker.AcceptChanges();
                entityInCache.ChangeTracker.ModifiedProperties.Clear();
            }
        }
    
        private void RefreshOriginalValues(WAQSWorkshopClient.Employee entityInCache, WAQSWorkshopClient.Employee entity)
        {
            if (! (entityInCache.LastName == entity.LastName || entityInCache.ChangeTracker.ModifiedProperties.Contains("LastName")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("LastName");
            if (! (entityInCache.FirstName == entity.FirstName || entityInCache.ChangeTracker.ModifiedProperties.Contains("FirstName")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("FirstName");
            if (! (entityInCache.Title == entity.Title || entityInCache.ChangeTracker.ModifiedProperties.Contains("Title")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Title");
            if (! (entityInCache.TitleOfCourtesy == entity.TitleOfCourtesy || entityInCache.ChangeTracker.ModifiedProperties.Contains("TitleOfCourtesy")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("TitleOfCourtesy");
            if (! (entityInCache.BirthDate == entity.BirthDate || entityInCache.ChangeTracker.ModifiedProperties.Contains("BirthDate")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("BirthDate");
            if (! (entityInCache.HireDate == entity.HireDate || entityInCache.ChangeTracker.ModifiedProperties.Contains("HireDate")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("HireDate");
            if (! (entityInCache.Address == entity.Address || entityInCache.ChangeTracker.ModifiedProperties.Contains("Address")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Address");
            if (! (entityInCache.City == entity.City || entityInCache.ChangeTracker.ModifiedProperties.Contains("City")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("City");
            if (! (entityInCache.Region == entity.Region || entityInCache.ChangeTracker.ModifiedProperties.Contains("Region")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Region");
            if (! (entityInCache.PostalCode == entity.PostalCode || entityInCache.ChangeTracker.ModifiedProperties.Contains("PostalCode")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("PostalCode");
            if (! (entityInCache.Country == entity.Country || entityInCache.ChangeTracker.ModifiedProperties.Contains("Country")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Country");
            if (! (entityInCache.HomePhone == entity.HomePhone || entityInCache.ChangeTracker.ModifiedProperties.Contains("HomePhone")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("HomePhone");
            if (! (entityInCache.Extension == entity.Extension || entityInCache.ChangeTracker.ModifiedProperties.Contains("Extension")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Extension");
            if (! (entityInCache.Photo == entity.Photo || entityInCache.ChangeTracker.ModifiedProperties.Contains("Photo")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Photo");
            if (! (entityInCache.Notes == entity.Notes || entityInCache.ChangeTracker.ModifiedProperties.Contains("Notes")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Notes");
            if (! (entityInCache.ReportsTo == entity.ReportsTo || entityInCache.ChangeTracker.ModifiedProperties.Contains("ReportsTo")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("ReportsTo");
            if (! (entityInCache.PhotoPath == entity.PhotoPath || entityInCache.ChangeTracker.ModifiedProperties.Contains("PhotoPath")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("PhotoPath");
        }
    
        private WAQSWorkshopClient.Employee ReduceToKey(WAQSWorkshopClient.Employee entity)
        {
            WAQSWorkshopClient.Employee value = new WAQSWorkshopClient.Employee { Id = entity.Id };
            return value;
        }
    
        private WAQSWorkshopClient.Employee ReduceToModifications(WAQSWorkshopClient.Employee entity)
        {
            WAQSWorkshopClient.Employee value = new WAQSWorkshopClient.Employee { Id = entity.Id };
            value.ChangeTracker.Saving = true;
            value.ChangeTracker.ChangeTrackingEnabled = true;
            value.ChangeTracker.State = entity.ChangeTracker.State;
            switch (entity.ChangeTracker.State)
            {
                case ObjectState.Added:
                    value.LastName = entity.LastName;
                    value.FirstName = entity.FirstName;
                    value.Title = entity.Title;
                    value.TitleOfCourtesy = entity.TitleOfCourtesy;
                    value.BirthDate = entity.BirthDate;
                    value.HireDate = entity.HireDate;
                    value.Address = entity.Address;
                    value.City = entity.City;
                    value.Region = entity.Region;
                    value.PostalCode = entity.PostalCode;
                    value.Country = entity.Country;
                    value.HomePhone = entity.HomePhone;
                    value.Extension = entity.Extension;
                    value.Photo = entity.Photo;
                    value.Notes = entity.Notes;
                    value.ReportsTo = entity.ReportsTo;
                    value.PhotoPath = entity.PhotoPath;
    				break;
                case ObjectState.Deleted:
                    value.ChangeTracker.ChangeTrackingEnabled = false;
                    value.LastName = default(string); 
                    value.FirstName = default(string); 
                    value.Title = default(string); 
                    value.TitleOfCourtesy = default(string); 
                    value.BirthDate = default(Nullable<System.DateTime>); 
                    value.HireDate = default(Nullable<System.DateTime>); 
                    value.Address = default(string); 
                    value.City = default(string); 
                    value.Region = default(string); 
                    value.PostalCode = default(string); 
                    value.Country = default(string); 
                    value.HomePhone = default(string); 
                    value.Extension = default(string); 
                    value.Photo = default(byte[]); 
                    value.Notes = default(string); 
                                value.ReportsTo = entity.ReportsTo;
                    value.PhotoPath = default(string); 
    				break;
                case ObjectState.Modified:
                    value.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties.ToList();
                    value.ReportsTo = entity.ReportsTo;
                    foreach (var modifiedPropery in entity.ChangeTracker.ModifiedProperties.Union(entity.ChangeTracker.ValidationProperties))
                        switch (modifiedPropery)
                        {
                            case "LastName":
                                value.LastName = entity.LastName;
                                break;
                            case "FirstName":
                                value.FirstName = entity.FirstName;
                                break;
                            case "Title":
                                value.Title = entity.Title;
                                break;
                            case "TitleOfCourtesy":
                                value.TitleOfCourtesy = entity.TitleOfCourtesy;
                                break;
                            case "BirthDate":
                                value.BirthDate = entity.BirthDate;
                                break;
                            case "HireDate":
                                value.HireDate = entity.HireDate;
                                break;
                            case "Address":
                                value.Address = entity.Address;
                                break;
                            case "City":
                                value.City = entity.City;
                                break;
                            case "Region":
                                value.Region = entity.Region;
                                break;
                            case "PostalCode":
                                value.PostalCode = entity.PostalCode;
                                break;
                            case "Country":
                                value.Country = entity.Country;
                                break;
                            case "HomePhone":
                                value.HomePhone = entity.HomePhone;
                                break;
                            case "Extension":
                                value.Extension = entity.Extension;
                                break;
                            case "Photo":
                                value.Photo = entity.Photo;
                                break;
                            case "Notes":
                                value.Notes = entity.Notes;
                                break;
                            case "PhotoPath":
                                value.PhotoPath = entity.PhotoPath;
                                break;
                        }
                    break;
                case ObjectState.Unchanged:
                case ObjectState.CascadeDeleted:
                    break;
                default: //case ObjectState.Detached:
                    throw new InvalidOperationException();
            }
            return value;
        }
    
        private void ReduceNavigationProperties(WAQSWorkshopClient.Employee originalValue, WAQSWorkshopClient.Employee newValue, Dictionary<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee> reducedEmployeesDictionary, Dictionary<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order> reducedOrdersDictionary)
        {
            newValue.ChangeTracker.ObjectsAddedToCollectionProperties.Clear();
            newValue.ChangeTracker.ObjectsRemovedFromCollectionProperties.Clear();
            newValue.ChangeTracker.OriginalValues.Clear();
            foreach (var relatedEntity in originalValue.ChangeTracker.OriginalValues)
            {
                if (relatedEntity.Value == null)
                    continue;
                switch (relatedEntity.Key)
                {
    				case "Employee1":
                        var employee1EmployeeParentEntity = (WAQSWorkshopClient.Employee)relatedEntity.Value;
                        WAQSWorkshopClient.Employee newEmployee1EmployeeParentEntity;
                        if (reducedEmployeesDictionary.TryGetValue(employee1EmployeeParentEntity, out newEmployee1EmployeeParentEntity))
                        {
    						
                            newValue.ChangeTracker.OriginalValues.Add("Employee1", newEmployee1EmployeeParentEntity);
                            WAQS.EntitiesTracking.ObjectList employee1EmployeeParentEntityObjectList;
                            if (!newEmployee1EmployeeParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("Employees1", out employee1EmployeeParentEntityObjectList))
                            {
                                employee1EmployeeParentEntityObjectList = new WAQS.EntitiesTracking.ObjectList();
                                newEmployee1EmployeeParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Add("Employees1", employee1EmployeeParentEntityObjectList);
                            }
                            employee1EmployeeParentEntityObjectList.Add(newValue);
                        }
                        newValue.ReportsTo = originalValue.ReportsTo;
                    break;
                    case "ReportsTo":
                        if (! newValue.ChangeTracker.OriginalValues.ContainsKey(relatedEntity.Key))
                            newValue.ChangeTracker.OriginalValues.Add(relatedEntity.Key, relatedEntity.Value);
                    break;
                }
            }
            if (originalValue.ChangeTracker.State != ObjectState.Unchanged)
            {
                foreach (var subEntity in originalValue.Employees1.Where(se => se.ChangeTracker.State != ObjectState.Unchanged))
                {
                    var relatedEntity = reducedEmployeesDictionary[subEntity]; 
                    if (! newValue.Employees1.Contains(relatedEntity))
                    {
                        ObjectList objectsAddedToCollectionProperties;
                        if (newValue.ChangeTracker.State == ObjectState.Added || relatedEntity.ChangeTracker.State == ObjectState.Added || originalValue.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("Employees1", out objectsAddedToCollectionProperties) && objectsAddedToCollectionProperties.Contains(subEntity))
                            newValue.Employees1.Add(relatedEntity);
                        else
                            newValue.Employees1.Attach(relatedEntity, true);
                    }
                }
                if (originalValue.Employee1 != null)
                {
                    WAQSWorkshopClient.Employee relatedEntity;
                    if (reducedEmployeesDictionary.TryGetValue(originalValue.Employee1, out relatedEntity))
                    {
                        if (newValue.Employee1 != relatedEntity)
                            newValue.Employee1 = relatedEntity;
                    }
                    else
                    {
                        newValue.ReportsTo = originalValue.ReportsTo;
                    }
                }
                foreach (var subEntity in originalValue.Orders.Where(se => se.ChangeTracker.State != ObjectState.Unchanged))
                {
                    var relatedEntity = reducedOrdersDictionary[subEntity]; 
                    if (! newValue.Orders.Contains(relatedEntity))
                    {
                        ObjectList objectsAddedToCollectionProperties;
                        if (newValue.ChangeTracker.State == ObjectState.Added || relatedEntity.ChangeTracker.State == ObjectState.Added || originalValue.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("Orders", out objectsAddedToCollectionProperties) && objectsAddedToCollectionProperties.Contains(subEntity))
                            newValue.Orders.Add(relatedEntity);
                        else
                            newValue.Orders.Attach(relatedEntity, true);
                    }
                }
    			
            }
        }
    
        private void RefreshComputedValues(WAQSWorkshopClient.Employee entity, WAQSWorkshopClient.Employee dbEntity)
        {
            if (entity.HasTemporaryKey)
            {
                EmployeesDico.Add(new EmployeeKeys { Id = dbEntity.Id }, entity);
                RemoveEmployeesAddedDico(entity);
            }						
            if (dbEntity.HasTemporaryKey)
            {
                entity.Id = dbEntity.Id;
            }
            entity.IsDeserializing = true;
            if (dbEntity.Employee1 != null && dbEntity.Employee1.ChangeTracker.State == ObjectState.Added)
                entity.ReportsTo = dbEntity.ReportsTo;
            entity.IsDeserializing = false;
            entity.ResetEntityKey();
        }
    
        private void DisposeEmployee()
        {
            if (_employees != null)
            {
                foreach (var entity in _employees.AllEntities.ToList())
                {
                    entity.Employees1.CollectionChanged -= Employee_Employees1CollectionChanged;
                    entity.Employee1FKsChanged -= EmployeeEmployee1FKsChanged;
                    entity.Orders.CollectionChanged -= Employee_OrdersCollectionChanged;
                    entity.NavigationPropertyChanged -= EmployeeNavigationPropertyChanged;
                    EntityDetached(entity);
                }
                _employees.EntityAdded -= EntityAddedOrAttached;
                _employees.EntityAttached -= EntityAddedOrAttached;
                _employees.EntityReplaced -= EntityReplaced;
                _employees.EntityDetached -= EntityDetached;
            }
        }
    
        private Dictionary<InvoiceKeys, WAQSWorkshopClient.Invoice> _invoicesDico;
        private Dictionary<InvoiceKeys, WAQSWorkshopClient.Invoice> InvoicesDico
        {
            get { return _invoicesDico ?? (_invoicesDico = new Dictionary<InvoiceKeys, WAQSWorkshopClient.Invoice>()); }
        }
    
        private Dictionary<Guid, WAQSWorkshopClient.Invoice> _invoicesDataTransferDico;
        private Dictionary<Guid, WAQSWorkshopClient.Invoice> InvoicesDataTransferDico
        {
            get { return _invoicesDataTransferDico ?? (_invoicesDataTransferDico = new Dictionary<Guid, WAQSWorkshopClient.Invoice>()); }
        }
    
        private Dictionary<string, WAQSWorkshopClient.Invoice> _invoicesAddedDico;
        private Dictionary<string, WAQSWorkshopClient.Invoice> InvoicesAddedDico
        {
            get { return _invoicesAddedDico ?? (_invoicesAddedDico = new Dictionary<string, WAQSWorkshopClient.Invoice>()); }
        }
        private void AddInvoicesAddedDico(WAQSWorkshopClient.Invoice entity)
        {
            InvoicesAddedDico.Add(entity.EntityKey, entity);
            entity.EntityKeyChanged += ResetEntityKey;
        }
        private void RemoveInvoicesAddedDico(WAQSWorkshopClient.Invoice entity)
        {
            InvoicesAddedDico.Remove(entity.EntityKey);
            entity.EntityKeyChanged -= ResetEntityKey;
        }
    
        private void ResetEntityKey(WAQSWorkshopClient.Invoice entity, string oldEntityKey)
        {
            if (entity.HasTemporaryKey)
            {
                if (entity.EntityKey != oldEntityKey)
                {
                    if (oldEntityKey != null)
                        InvoicesAddedDico.Remove(oldEntityKey);
                    InvoicesAddedDico.Add(entity.EntityKey, entity);
                }
            }
            else
            {
                InvoicesAddedDico.Remove(oldEntityKey);
                entity.EntityKeyChanged -= ResetEntityKey;
                InvoicesDico.Add(new InvoiceKeys { OrderId = entity.OrderId }, entity);
            }
        }
        public IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Invoice> Invoices 
        { 
            get { return InvoicesInternal; }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Invoice> InvoicesInternal
        {
            get
            {
                if (_invoices == null)
                {
                    _invoices = new ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Invoice>("Invoices", this, e => new InvoiceKeys { OrderId = e.OrderId });
                    _invoices.EntityAdded += EntityAddedOrAttached;
                    _invoices.EntityAttached += EntityAddedOrAttached;
                    _invoices.EntityReplaced += EntityReplaced;
                    _invoices.EntityDetached += EntityDetached;
                }
                return _invoices;
            }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Invoice> _invoices;
        private Dictionary<CustomerKeys, List<WAQSWorkshopClient.Invoice>> _invoicesCustomerFKsDico;
        private Dictionary<CustomerKeys, List<WAQSWorkshopClient.Invoice>> InvoicesCustomerFKsDico
        {
            get { return _invoicesCustomerFKsDico ?? (_invoicesCustomerFKsDico = new Dictionary<CustomerKeys, List<WAQSWorkshopClient.Invoice>>()); }
        }
        private Dictionary<OrderKeys, List<WAQSWorkshopClient.Invoice>> _invoicesOrderFKsDico;
        private Dictionary<OrderKeys, List<WAQSWorkshopClient.Invoice>> InvoicesOrderFKsDico
        {
            get { return _invoicesOrderFKsDico ?? (_invoicesOrderFKsDico = new Dictionary<OrderKeys, List<WAQSWorkshopClient.Invoice>>()); }
        }
    
        private void EntityAddedOrAttached(WAQSWorkshopClient.Invoice entity)
        {
    
            ClientEntitySetExtensions.AddEntityInDico(Invoices, entity);
            Invoice entityTmp;
            if (InvoicesDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out entityTmp))
            {
                if (entityTmp == entity)
                    new InvalidOperationException();
            }
            else
                InvoicesDataTransferDico.Add(entity.DataTransferEntityKey, entity);		
            if (entity.HasTemporaryKey)
            {
                WAQSWorkshopClient.Invoice entityInAddedDico;
                if (! InvoicesAddedDico.TryGetValue(entity.EntityKey, out entityInAddedDico))
                    AddInvoicesAddedDico(entity);
                else if (entityInAddedDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                entity.InvoiceDetails.CollectionChanged += Invoice_InvoiceDetailsCollectionChanged;
                entity.NavigationPropertyChanged += InvoiceNavigationPropertyChanged;
                EntityAttachWithoutChangingStateSubEntities(entity);
            }
            else
            {
                var invoiceKeys = new InvoiceKeys { OrderId = entity.OrderId };
                WAQSWorkshopClient.Invoice entityInDico;
                if (! InvoicesDico.TryGetValue(invoiceKeys, out entityInDico))
                    InvoicesDico.Add(invoiceKeys, entity);
                else if (entityInDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                entity.InvoiceDetails.CollectionChanged += Invoice_InvoiceDetailsCollectionChanged;
                entity.NavigationPropertyChanged += InvoiceNavigationPropertyChanged;
                EntityAttachWithoutChangingStateSubEntities(entity);
                List<WAQSWorkshopClient.InvoiceDetail> invoiceDetails;
                if (InvoiceDetailsInvoiceFKsDico.TryGetValue(invoiceKeys, out invoiceDetails))
                    foreach (var e in invoiceDetails)
                        e.Invoice = entity;
            }
    
            if (! (entity.Customer == null || CustomersInternal.Contains(entity.Customer)))
                CustomersInternal.AttachWithoutChangingState(entity.Customer, entity.ChangeTracker.State);
    
            if (entity.CustomerId != null)
            {
                var invoicesCustomerKeys = new CustomerKeys { Id = entity.CustomerId };
                List<WAQSWorkshopClient.Invoice> invoicesCustomerEntities;
                if (! InvoicesCustomerFKsDico.TryGetValue(invoicesCustomerKeys, out invoicesCustomerEntities))
                    InvoicesCustomerFKsDico.Add(invoicesCustomerKeys, invoicesCustomerEntities = new List<WAQSWorkshopClient.Invoice>());
                invoicesCustomerEntities.Add(entity);
        
                WAQSWorkshopClient.Customer customer;
                if (CustomersDico.TryGetValue(invoicesCustomerKeys, out customer))
                    entity.Customer = customer;
            }
            entity.CustomerFKsChanged += InvoiceCustomerFKsChanged;
    
            foreach (var se in entity.InvoiceDetails)
                if (! InvoiceDetailsInternal.Contains(se))
                    InvoiceDetailsInternal.AttachWithoutChangingState(se, entity.ChangeTracker.State);
    
    
            if (! (entity.Order == null || OrdersInternal.Contains(entity.Order)))
                OrdersInternal.AttachWithoutChangingState(entity.Order, entity.ChangeTracker.State);
    
            var invoicesOrderKeys = new OrderKeys { Id = entity.OrderId };
            List<WAQSWorkshopClient.Invoice> invoicesOrderEntities;
            if (! InvoicesOrderFKsDico.TryGetValue(invoicesOrderKeys, out invoicesOrderEntities))
                InvoicesOrderFKsDico.Add(invoicesOrderKeys, invoicesOrderEntities = new List<WAQSWorkshopClient.Invoice>());
            invoicesOrderEntities.Add(entity);
    
            WAQSWorkshopClient.Order order;
            if (OrdersDico.TryGetValue(invoicesOrderKeys, out order))
                entity.Order = order;
            entity.IsInitializingRelationships = false;
        }
    
        private void EntityReplaced(WAQSWorkshopClient.Invoice entityInEntitySet, WAQSWorkshopClient.Invoice entity)
        {
            EntityReplacedInternal(entityInEntitySet, entity);
        }
        private void EntityReplacedInternal(WAQSWorkshopClient.Invoice entityInEntitySet, WAQSWorkshopClient.Invoice entity)
        {
            if (entityInEntitySet.CustomerId != entity.CustomerId)
                entityInEntitySet.CustomerId = entity.CustomerId;
            if (entityInEntitySet.CustomerCompanyName != entity.CustomerCompanyName)
                entityInEntitySet.CustomerCompanyName = entity.CustomerCompanyName;
            if (entityInEntitySet.CustomerContactName != entity.CustomerContactName)
                entityInEntitySet.CustomerContactName = entity.CustomerContactName;
            if (entityInEntitySet.Total != entity.Total)
                entityInEntitySet.Total = entity.Total;
            if (entityInEntitySet.Dicount != entity.Dicount)
                entityInEntitySet.Dicount = entity.Dicount;
            if (entityInEntitySet.Paid != entity.Paid)
                entityInEntitySet.Paid = entity.Paid;
        }
    
        private void InvoiceCustomerFKsChanged(WAQSWorkshopClient.Invoice entity, string oldCustomerId, string newCustomerId)
        {
            CustomerKeys? oldInvoicesCustomerKeys = oldCustomerId == null ? (CustomerKeys?)null : new CustomerKeys { Id = oldCustomerId };
            CustomerKeys? newInvoicesCustomerKeys = newCustomerId == null ? (CustomerKeys?)null : new CustomerKeys { Id = newCustomerId };
            if (newInvoicesCustomerKeys.HasValue)
            {
                List<WAQSWorkshopClient.Invoice> newCollection;
                if (! InvoicesCustomerFKsDico.TryGetValue(newInvoicesCustomerKeys.Value, out newCollection))
                    InvoicesCustomerFKsDico.Add(newInvoicesCustomerKeys.Value, newCollection = new List<WAQSWorkshopClient.Invoice>());
                newCollection.Add(entity);
        
                WAQSWorkshopClient.Customer customer;
                if (CustomersDico.TryGetValue(newInvoicesCustomerKeys.Value, out customer))
                    entity.Customer = customer;
            }
            List<WAQSWorkshopClient.Invoice> oldCollection;
            if (oldInvoicesCustomerKeys.HasValue && InvoicesCustomerFKsDico.TryGetValue(oldInvoicesCustomerKeys.Value, out oldCollection))
            {
                oldCollection.Remove(entity);
                if (oldCollection.Count == 0)
                    InvoicesCustomerFKsDico.Remove(oldInvoicesCustomerKeys.Value);
            }
        }
    
        private void Invoice_InvoiceDetailsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
                foreach (WAQSWorkshopClient.InvoiceDetail subEntity in e.NewItems)
                {
                    WAQSWorkshopClient.InvoiceDetail se = null;
                    if (!subEntity.IsInitializingRelationships && (se = GetEntityInCache(subEntity)) == null)
                        AttachWithoutChangingState(subEntity);
                    else if (se != null && se != subEntity)
                        throw new InvalidOperationException();
                }
        }
         
        private void InvoiceOrderFKsChanged(WAQSWorkshopClient.Invoice entity, int oldOrderId, int newOrderId)
        {
            OrderKeys oldInvoicesOrderKeys = new OrderKeys { Id = oldOrderId };
            OrderKeys newInvoicesOrderKeys = new OrderKeys { Id = newOrderId };
            List<WAQSWorkshopClient.Invoice> newCollection;
            if (! InvoicesOrderFKsDico.TryGetValue(newInvoicesOrderKeys, out newCollection))
                InvoicesOrderFKsDico.Add(newInvoicesOrderKeys, newCollection = new List<WAQSWorkshopClient.Invoice>());
            newCollection.Add(entity);
    
            WAQSWorkshopClient.Order order;
            if (OrdersDico.TryGetValue(newInvoicesOrderKeys, out order))
                entity.Order = order;
            List<WAQSWorkshopClient.Invoice> oldCollection;
            if (InvoicesOrderFKsDico.TryGetValue(oldInvoicesOrderKeys, out oldCollection))
            {
                oldCollection.Remove(entity);
                if (oldCollection.Count == 0)
                    InvoicesOrderFKsDico.Remove(oldInvoicesOrderKeys);
            }
        }
    
        private void InvoiceNavigationPropertyChanged(Invoice sender, string propertyName)
        {
            var entity = sender;
            if (propertyName == "Customer" && entity.Customer != null)
            {
                if (! Customers.Contains(entity.Customer))
                    AttachWithoutChangingState(entity.Customer);
            }
            else if (new [] { "CustomerId" }.Contains(propertyName))
            {
                var parentEntityInCache = Customers.FirstOrDefault(pe => pe.Id == entity.CustomerId);
                if (parentEntityInCache != null)
                    entity.Customer = parentEntityInCache;					
            }
            else if (propertyName == "Order" && entity.Order != null)
            {
                if (! Orders.Contains(entity.Order))
                    AttachWithoutChangingState(entity.Order);
            }
            else if (new [] { "OrderId" }.Contains(propertyName))
            {
                var parentEntityInCache = Orders.FirstOrDefault(pe => pe.Id == entity.OrderId);
                if (parentEntityInCache != null && parentEntityInCache.Id != 0)
                    entity.Order = parentEntityInCache;					
            }
        }
    
        private void EntityDetached(WAQSWorkshopClient.Invoice entity)
        {
    
            InvoicesDataTransferDico.Remove(entity.DataTransferEntityKey);		
            if (entity.IsTemporaryKey)
                RemoveInvoicesAddedDico(entity);
            else
            {
                var entityKey = new InvoiceKeys { OrderId = entity.OrderId };
                InvoicesDico.Remove(entityKey);
            }
            if (entity.CustomerId != null)
            {
                List<WAQSWorkshopClient.Invoice> fkEntities;
                if (InvoicesCustomerFKsDico.TryGetValue(new CustomerKeys { Id = entity.CustomerId }, out fkEntities))
                    fkEntities.Remove(entity);
            }
            {
                List<WAQSWorkshopClient.Invoice> fkEntities;
                if (InvoicesOrderFKsDico.TryGetValue(new OrderKeys { Id = entity.OrderId }, out fkEntities))
                    fkEntities.Remove(entity);
            }
        
            CustomerKeys? oldInvoicesCustomerKeys = entity.CustomerId == null ? (CustomerKeys?)null : new CustomerKeys { Id = entity.CustomerId };
            {
                List<WAQSWorkshopClient.Invoice> oldCollection;
                if (oldInvoicesCustomerKeys.HasValue && InvoicesCustomerFKsDico.TryGetValue(oldInvoicesCustomerKeys.Value, out oldCollection))
                {
                    oldCollection.Remove(entity);
                    if (oldCollection.Count == 0)
                        InvoicesCustomerFKsDico.Remove(oldInvoicesCustomerKeys.Value);
                }
            }
    
            OrderKeys oldInvoicesOrderKeys = new OrderKeys { Id = entity.OrderId };
            {
                List<WAQSWorkshopClient.Invoice> oldCollection;
                if (InvoicesOrderFKsDico.TryGetValue(oldInvoicesOrderKeys, out oldCollection))
                {
                    oldCollection.Remove(entity);
                    if (oldCollection.Count == 0)
                        InvoicesOrderFKsDico.Remove(oldInvoicesOrderKeys);
                }
            }
    
            entity.InvoiceDetails.CollectionChanged -= Invoice_InvoiceDetailsCollectionChanged;
            entity.NavigationPropertyChanged -= InvoiceNavigationPropertyChanged;
            ClientEntitySetExtensions.RemoveEntityInDico(entity);
    		RemovePropertyDescriptorToEntity(entity);
            foreach (var subEntity in CustomersInternal)
            {
                ObjectList originalValues;
                if (subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("Invoices", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.Remove("Invoices");
                }
                if (subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("Invoices", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Remove("Invoices");
                }
            }
            foreach (var subEntity in InvoiceDetailsInternal)
            {
                object originalValue;
                if (subEntity.ChangeTracker.OriginalValues.TryGetValue("Invoice", out originalValue) && originalValue == entity)
                    subEntity.ChangeTracker.OriginalValues.Remove("Invoice");
            }
            foreach (var subEntity in OrdersInternal)
            {
                object originalValue;
                if (subEntity.ChangeTracker.OriginalValues.TryGetValue("Invoice", out originalValue) && originalValue == entity)
                    subEntity.ChangeTracker.OriginalValues.Remove("Invoice");
            }
        }
    
        
        private void EntityAttachWithoutChangingStateSubEntities(WAQSWorkshopClient.Invoice entity)
        {
            var entityInCache = GetEntityInCache(entity);
            bool entityInCacheIsInitializingRelationships = false;
            if (entityInCache != null)
            {
                entityInCacheIsInitializingRelationships = entityInCache.IsInitializingRelationships;
                entityInCache.IsInitializingRelationships = true;
            }
            EntityAttachWithoutChangingStateSubEntitiesBody(entity, entityInCache);
            if (entityInCache != null)
                entityInCache.IsInitializingRelationships = entityInCacheIsInitializingRelationships;
        }
        
        private void EntityAttachWithoutChangingStateSubEntitiesBody(WAQSWorkshopClient.Invoice entity, WAQSWorkshopClient.Invoice entityInCache)
        {
            if (entity == entityInCache)
                return;
            if (entity.Customer != null)
            {
                WAQSWorkshopClient.Customer parentEntityInCache;
                if (CustomersInternal.Contains(entity.Customer))
                    parentEntityInCache = entity.Customer;
                else
                    parentEntityInCache = AttachWithoutChangingState(entity.Customer, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
                if (entityInCache != null)
                    entityInCache.Customer = parentEntityInCache;
            }
            else if (! (entityInCache == null || entityInCache.CustomerId == null))
            {
                WAQSWorkshopClient.Customer parentEntityInCache;
                if (CustomersDico.TryGetValue(new CustomerKeys { Id = entityInCache.CustomerId }, out parentEntityInCache))
                {
                    entityInCache.Customer = parentEntityInCache;
                }
            }
            foreach (var subEntity in entity.InvoiceDetails.ToList())
            {
                WAQSWorkshopClient.InvoiceDetail subEntityInCache;
                if (InvoiceDetails.Contains(subEntity))
                    subEntityInCache = subEntity;
                else
                    subEntityInCache = AttachWithoutChangingState(subEntity, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
    			if (!(entityInCache == null || entityInCache == entity || entityInCache.InvoiceDetails.Contains(subEntityInCache)))
                    entityInCache.InvoiceDetails.Add(subEntityInCache);
            }
            if (entityInCache != null)
            {
                List<WAQSWorkshopClient.InvoiceDetail> subEntities;
                if (InvoiceDetailsInvoiceFKsDico.TryGetValue(new InvoiceKeys { OrderId = entity.OrderId }, out subEntities))
                    foreach (var subEntity in subEntities)
                    {
                        if (subEntity.Invoice == null)
                            ((ITrackableCollection<InvoiceDetail>)entityInCache.InvoiceDetails).AttachWithoutCheckingIfAlreadyExist(subEntity);
                    }
            }
            if (entity.Order != null)
            {
                WAQSWorkshopClient.Order parentEntityInCache;
                if (OrdersInternal.Contains(entity.Order))
                    parentEntityInCache = entity.Order;
                else
                    parentEntityInCache = AttachWithoutChangingState(entity.Order, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
                if (entityInCache != null)
                    entityInCache.Order = parentEntityInCache;
            }
            else if (! (entityInCache == null))
            {
                WAQSWorkshopClient.Order parentEntityInCache;
                if (OrdersDico.TryGetValue(new OrderKeys { Id = entityInCache.OrderId }, out parentEntityInCache))
                {
                    entityInCache.Order = parentEntityInCache;
                }
            }
        }
    
        private WAQSWorkshopClient.Invoice GetEntityInCache(WAQSWorkshopClient.Invoice entity, bool includingDeleted = false, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            WAQSWorkshopClient.Invoice value;
            if (! (applyDataTransfer && InvoicesDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out value)) && (! InvoicesDico.TryGetValue(new InvoiceKeys { OrderId = entity.OrderId }, out value) || value.ChangeTracker.State == ObjectState.Detached || ! includingDeleted && value.ChangeTracker.State == ObjectState.Deleted) && ! (entity.HasTemporaryKey && InvoicesAddedDico.TryGetValue(entity.EntityKey, out value)))
                return null;
            return value;
        }
    
        protected override WAQSWorkshopClient.Invoice GetEntity(WAQSWorkshopClient.Invoice entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
        {
            return GetEntity(entity, applyState, mergeOption, true, applyDataTransfer: applyDataTransfer);
        }
        private WAQSWorkshopClient.Invoice GetEntity(WAQSWorkshopClient.Invoice entity, bool applyState, MergeOption? mergeOption = null, bool includingDeleted = false, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            object entityGot;
            if (EntitiesGot.TryGetValue(entity, out entityGot))
                return (WAQSWorkshopClient.Invoice)entityGot;
    
            if (mergeOption == null)
                mergeOption = MergeOption;
    
            if (mergeOption == MergeOption.NoTracking)
                return entity;
    
            if (InvoicesInternal.Contains(entity))
                return entity;
    
            entity.IsDeserializing = true;
    
            includingDeleted |= applyState;
    
            var entityCustomer = entity.Customer;
            entity.Customer = null;
            var entityInvoiceDetails = entity.InvoiceDetails.ToList();
            entity.InvoiceDetails.Clear();
            var entityOrder = entity.Order;
            entity.Order = null;
    
            WAQSWorkshopClient.Invoice value;
            var entityInCache = GetEntityInCache(entity, includingDeleted, applyDataTransfer);
            ObjectChangeTracker originalChangeTracker = entity.ChangeTracker;
            if (entityInCache == null)
            {
                var originalState = entity.ChangeTracker.State;
                entity.ChangeTracker = null;
                if (entity.ChangeTracker.State == ObjectState.Detached)
                    entity.ResetEntityKey();
                entity.IsDeserializing = false;
                var state = originalState == ObjectState.Detached ? defaultState : originalState;
                switch(state)
                {
                    case ObjectState.Added:
                        InvoicesInternal.AddWithoutCheckingIfAlreadyExist(entity);
                        break;
                    default:
                        entity.IsInitializingRelationships = true;
                        InvoicesInternal.AttachWithoutCheckingIfAlreadyExist(entity);
                        entity.IsInitializingRelationships = false;
                        break;
                }
                if (applyState)
                    entity.ChangeTracker.State = state;
                value = entity;
            }
            else
            {
                switch (mergeOption)
                {
                    case MergeOption.AppendOnly:
                        RefreshNewLoadedProperties(entityInCache, entity);
                        value = entityInCache;
                        break;
                    case MergeOption.OverwriteChanges:
                        RefreshCurrentValues(entityInCache, entity, applyState: applyState);
                        value = entityInCache;
                        break;
                    case MergeOption.PreserveChanges:
                        RefreshOriginalValues(entityInCache, entity);
                        value = entityInCache;
                        break;
                    default: 
                        throw new NotImplementedException();
                }
                if (applyState)
                {
                    switch(entity.ChangeTracker.State)
                    {
                        case ObjectState.Detached:
                            Invoices.Detach(value);
                            break;
                        case ObjectState.Deleted:
                            Invoices.Remove(value);
                            break;
                        default:
                            value.ChangeTracker.State = entity.ChangeTracker.State;
                            break;
                    }
                }
            }
            EntitiesGot.Add(entity, value);
            if (! entity.IsInitializingRelationships)
            {
                entity.IsInitializingRelationships = true;
                value.IsInitializingRelationships = true;
    
                if (entityCustomer != null)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(entityCustomer, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Customer = GetEntity(entityCustomer, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer);
                }
                foreach (var e in entityInvoiceDetails)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(e, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.InvoiceDetails.Add(GetEntity(e, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer));
                }
                if (entityOrder != null)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(entityOrder, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Order = GetEntity(entityOrder, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer);
                }
    
                if (applyState && originalChangeTracker != null && originalChangeTracker != value.ChangeTracker)
                {
                    foreach (var modifiedProperty in originalChangeTracker.ModifiedProperties)
                        if (! value.ChangeTracker.ModifiedProperties.Contains(modifiedProperty))
                            value.ChangeTracker.ModifiedProperties.Add(modifiedProperty);
                    foreach (var originalValue in originalChangeTracker.OriginalValues)
                    {
                        var originalValueEntity = originalValue.Value as IEntity;
                        if (originalValueEntity != null) 
                        {
                            var originalState = originalValueEntity.ChangeTracker.State;
                            IEntity originalEntity = null;
                            var ov = originalValueEntity == null ? originalValue.Value : originalEntity = GetEntity(originalValueEntity, true, defaultState, applyDataTransfer) as IEntity;
                            if (value.ChangeTracker.State != ObjectState.Detached)
                                value.ChangeTracker.RecordOriginalValue(originalValue.Key, ov);
                            if (originalValueEntity != null && originalState == ObjectState.Detached)
                                Detach(originalEntity);
                        }
                    }
                    foreach (var objectsRemovedToCollectionProperties in originalChangeTracker.ObjectsRemovedFromCollectionProperties)
                        foreach (IEntity objectsRemovedToCollectionProperty in objectsRemovedToCollectionProperties.Value)
                            if (objectsRemovedToCollectionProperty != null)
                            {
                                var originalState = objectsRemovedToCollectionProperty.ChangeTracker.State;
                                IObjectWithChangeTracker removedEntity = (IObjectWithChangeTracker)GetEntity(objectsRemovedToCollectionProperty, true, defaultState, applyDataTransfer);
                                switch (objectsRemovedToCollectionProperties.Key)
                                {
                                    case "InvoiceDetails":
                                            value.InvoiceDetails.Remove((WAQSWorkshopClient.InvoiceDetail)removedEntity);
                                            break;
                                }
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordRemovalFromCollectionProperties(objectsRemovedToCollectionProperties.Key, removedEntity);
                                if (originalState == ObjectState.Detached)
                                    Detach(removedEntity);
                            }
                    foreach (var objectsAddedToCollectionProperties in originalChangeTracker.ObjectsAddedToCollectionProperties)
                        foreach (var objectsAddedToCollectionProperty in objectsAddedToCollectionProperties.Value)
                            if (objectsAddedToCollectionProperty != null)
                            {
                                var addedEntity = (IObjectWithChangeTracker)GetEntity(objectsAddedToCollectionProperty, true, defaultState, applyDataTransfer);
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordAdditionToCollectionProperties(objectsAddedToCollectionProperties.Key, addedEntity);
                            }
                }
    
                value.IsInitializingRelationships = false;
            }
            value.ChangeTracker.ChangeTrackingEnabled = true;
            return value;
        } 
    
        private WAQSWorkshopClient.Invoice AttachWithoutChangingState(WAQSWorkshopClient.Invoice entity, ObjectState? defaultState = null)
        {
            if (InvoicesInternal.Contains(entity))
                return entity;
            var entityIncludingCache = Init ? GetEntityInCache(entity) ?? entity : entity;
            if (InvoicesInternal.AttachWithoutChangingState(entityIncludingCache, defaultState))
                EntityAttachWithoutChangingStateSubEntities(entity);
            return entityIncludingCache;
        }
    
        public void RefreshNewLoadedProperties(WAQSWorkshopClient.Invoice entityInCache, WAQSWorkshopClient.Invoice entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            entityInCache.IsDeserializing = isDeserializing;
        }
    
        public void RefreshCurrentValues(WAQSWorkshopClient.Invoice entityInCache, WAQSWorkshopClient.Invoice entity)
        {
            RefreshCurrentValues(entityInCache, entity, false);
        }
        public void RefreshCurrentValues(WAQSWorkshopClient.Invoice entityInCache, WAQSWorkshopClient.Invoice entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            if (entityInCache.OrderId != entity.OrderId)
                entityInCache.OrderId = entity.OrderId;
            if (entityInCache.CustomerId != entity.CustomerId)
                entityInCache.CustomerId = entity.CustomerId;
            if (entityInCache.CustomerCompanyName != entity.CustomerCompanyName)
                entityInCache.CustomerCompanyName = entity.CustomerCompanyName;
            if (entityInCache.CustomerContactName != entity.CustomerContactName)
                entityInCache.CustomerContactName = entity.CustomerContactName;
            if (entityInCache.Total != entity.Total)
                entityInCache.Total = entity.Total;
            if (entityInCache.Dicount != entity.Dicount)
                entityInCache.Dicount = entity.Dicount;
            if (entityInCache.Paid != entity.Paid)
                entityInCache.Paid = entity.Paid;
            entityInCache.IsDeserializing = isDeserializing;
            if (applyState)
            {
                entityInCache.ChangeTracker.State = entity.ChangeTracker.State;
                entityInCache.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties;
            }
            else
            {
                entityInCache.ChangeTracker.AcceptChanges();
                entityInCache.ChangeTracker.ModifiedProperties.Clear();
            }
        }
    
        private void RefreshOriginalValues(WAQSWorkshopClient.Invoice entityInCache, WAQSWorkshopClient.Invoice entity)
        {
            if (! (entityInCache.CustomerId == entity.CustomerId || entityInCache.ChangeTracker.ModifiedProperties.Contains("CustomerId")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("CustomerId");
            if (! (entityInCache.CustomerCompanyName == entity.CustomerCompanyName || entityInCache.ChangeTracker.ModifiedProperties.Contains("CustomerCompanyName")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("CustomerCompanyName");
            if (! (entityInCache.CustomerContactName == entity.CustomerContactName || entityInCache.ChangeTracker.ModifiedProperties.Contains("CustomerContactName")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("CustomerContactName");
            if (! (entityInCache.Total == entity.Total || entityInCache.ChangeTracker.ModifiedProperties.Contains("Total")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Total");
            if (! (entityInCache.Dicount == entity.Dicount || entityInCache.ChangeTracker.ModifiedProperties.Contains("Dicount")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Dicount");
            if (! (entityInCache.Paid == entity.Paid || entityInCache.ChangeTracker.ModifiedProperties.Contains("Paid")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Paid");
        }
    
        private WAQSWorkshopClient.Invoice ReduceToKey(WAQSWorkshopClient.Invoice entity)
        {
            WAQSWorkshopClient.Invoice value = new WAQSWorkshopClient.Invoice { OrderId = entity.OrderId };
            return value;
        }
    
        private WAQSWorkshopClient.Invoice ReduceToModifications(WAQSWorkshopClient.Invoice entity)
        {
            WAQSWorkshopClient.Invoice value = new WAQSWorkshopClient.Invoice { OrderId = entity.OrderId };
            value.ChangeTracker.Saving = true;
            value.ChangeTracker.ChangeTrackingEnabled = true;
            value.ChangeTracker.State = entity.ChangeTracker.State;
            switch (entity.ChangeTracker.State)
            {
                case ObjectState.Added:
                    value.CustomerId = entity.CustomerId;
                    value.CustomerCompanyName = entity.CustomerCompanyName;
                    value.CustomerContactName = entity.CustomerContactName;
                    value.Total = entity.Total;
                    value.Dicount = entity.Dicount;
                    value.Paid = entity.Paid;
    				break;
                case ObjectState.Deleted:
                    value.ChangeTracker.ChangeTrackingEnabled = false;
                                value.CustomerId = entity.CustomerId;
                    value.CustomerCompanyName = default(string); 
                    value.CustomerContactName = default(string); 
                    value.Total = default(double); 
                    value.Dicount = default(double); 
                    value.Paid = default(bool); 
    				break;
                case ObjectState.Modified:
                    value.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties.ToList();
                    value.CustomerId = entity.CustomerId;
                    foreach (var modifiedPropery in entity.ChangeTracker.ModifiedProperties.Union(entity.ChangeTracker.ValidationProperties))
                        switch (modifiedPropery)
                        {
                            case "CustomerCompanyName":
                                value.CustomerCompanyName = entity.CustomerCompanyName;
                                break;
                            case "CustomerContactName":
                                value.CustomerContactName = entity.CustomerContactName;
                                break;
                            case "Total":
                                value.Total = entity.Total;
                                break;
                            case "Dicount":
                                value.Dicount = entity.Dicount;
                                break;
                            case "Paid":
                                value.Paid = entity.Paid;
                                break;
                        }
                    break;
                case ObjectState.Unchanged:
                case ObjectState.CascadeDeleted:
                    break;
                default: //case ObjectState.Detached:
                    throw new InvalidOperationException();
            }
            return value;
        }
    
        private void ReduceNavigationProperties(WAQSWorkshopClient.Invoice originalValue, WAQSWorkshopClient.Invoice newValue, Dictionary<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer> reducedCustomersDictionary, Dictionary<WAQSWorkshopClient.InvoiceDetail, WAQSWorkshopClient.InvoiceDetail> reducedInvoiceDetailsDictionary, Dictionary<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order> reducedOrdersDictionary)
        {
            newValue.ChangeTracker.ObjectsAddedToCollectionProperties.Clear();
            newValue.ChangeTracker.ObjectsRemovedFromCollectionProperties.Clear();
            newValue.ChangeTracker.OriginalValues.Clear();
            foreach (var relatedEntity in originalValue.ChangeTracker.OriginalValues)
            {
                if (relatedEntity.Value == null)
                    continue;
                switch (relatedEntity.Key)
                {
    				case "Customer":
                        var customerCustomerParentEntity = (WAQSWorkshopClient.Customer)relatedEntity.Value;
                        WAQSWorkshopClient.Customer newCustomerCustomerParentEntity;
                        if (reducedCustomersDictionary.TryGetValue(customerCustomerParentEntity, out newCustomerCustomerParentEntity))
                        {
    						
                            newValue.ChangeTracker.OriginalValues.Add("Customer", newCustomerCustomerParentEntity);
                            WAQS.EntitiesTracking.ObjectList customerCustomerParentEntityObjectList;
                            if (!newCustomerCustomerParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("Invoices", out customerCustomerParentEntityObjectList))
                            {
                                customerCustomerParentEntityObjectList = new WAQS.EntitiesTracking.ObjectList();
                                newCustomerCustomerParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Add("Invoices", customerCustomerParentEntityObjectList);
                            }
                            customerCustomerParentEntityObjectList.Add(newValue);
                        }
                        newValue.CustomerId = originalValue.CustomerId;
                    break;
                    case "CustomerId":
                    case "OrderId":
                        if (! newValue.ChangeTracker.OriginalValues.ContainsKey(relatedEntity.Key))
                            newValue.ChangeTracker.OriginalValues.Add(relatedEntity.Key, relatedEntity.Value);
                    break;
                }
            }
            if (originalValue.ChangeTracker.State != ObjectState.Unchanged)
            {
                if (originalValue.Customer != null)
                {
                    WAQSWorkshopClient.Customer relatedEntity;
                    if (reducedCustomersDictionary.TryGetValue(originalValue.Customer, out relatedEntity))
                    {
                        if (newValue.Customer != relatedEntity)
                            newValue.Customer = relatedEntity;
                    }
                    else
                    {
                        newValue.CustomerId = originalValue.CustomerId;
                    }
                }
                foreach (var subEntity in originalValue.InvoiceDetails.Where(se => se.ChangeTracker.State != ObjectState.Unchanged))
                {
                    var relatedEntity = reducedInvoiceDetailsDictionary[subEntity]; 
                    if (! newValue.InvoiceDetails.Contains(relatedEntity))
                    {
                        ObjectList objectsAddedToCollectionProperties;
                        if (newValue.ChangeTracker.State == ObjectState.Added || relatedEntity.ChangeTracker.State == ObjectState.Added || originalValue.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("InvoiceDetails", out objectsAddedToCollectionProperties) && objectsAddedToCollectionProperties.Contains(subEntity))
                            newValue.InvoiceDetails.Add(relatedEntity);
                        else
                            newValue.InvoiceDetails.Attach(relatedEntity, true);
                    }
                }
                if (originalValue.Order != null)
                {
                    WAQSWorkshopClient.Order relatedEntity;
                    if (reducedOrdersDictionary.TryGetValue(originalValue.Order, out relatedEntity))
                    {
                        if (newValue.Order != relatedEntity)
                            newValue.Order = relatedEntity;
                    }
                    else
                    {
                        newValue.OrderId = originalValue.OrderId;
                    }
                }
    			
            }
        }
    
        private void RefreshComputedValues(WAQSWorkshopClient.Invoice entity, WAQSWorkshopClient.Invoice dbEntity)
        {
            if (entity.HasTemporaryKey)
            {
                InvoicesDico.Add(new InvoiceKeys { OrderId = dbEntity.OrderId }, entity);
                RemoveInvoicesAddedDico(entity);
            }						
            entity.IsDeserializing = true;
            if (dbEntity.Order != null && dbEntity.Order.ChangeTracker.State == ObjectState.Added)
                entity.OrderId = dbEntity.OrderId;
            entity.IsDeserializing = false;
            entity.ResetEntityKey();
        }
    
        private void DisposeInvoice()
        {
            if (_invoices != null)
            {
                foreach (var entity in _invoices.AllEntities.ToList())
                {
                    entity.CustomerFKsChanged -= InvoiceCustomerFKsChanged;
                    entity.InvoiceDetails.CollectionChanged -= Invoice_InvoiceDetailsCollectionChanged;
                    entity.NavigationPropertyChanged -= InvoiceNavigationPropertyChanged;
                    EntityDetached(entity);
                }
                _invoices.EntityAdded -= EntityAddedOrAttached;
                _invoices.EntityAttached -= EntityAddedOrAttached;
                _invoices.EntityReplaced -= EntityReplaced;
                _invoices.EntityDetached -= EntityDetached;
            }
        }
    
        private Dictionary<InvoiceDetailKeys, WAQSWorkshopClient.InvoiceDetail> _invoiceDetailsDico;
        private Dictionary<InvoiceDetailKeys, WAQSWorkshopClient.InvoiceDetail> InvoiceDetailsDico
        {
            get { return _invoiceDetailsDico ?? (_invoiceDetailsDico = new Dictionary<InvoiceDetailKeys, WAQSWorkshopClient.InvoiceDetail>()); }
        }
    
        private Dictionary<Guid, WAQSWorkshopClient.InvoiceDetail> _invoiceDetailsDataTransferDico;
        private Dictionary<Guid, WAQSWorkshopClient.InvoiceDetail> InvoiceDetailsDataTransferDico
        {
            get { return _invoiceDetailsDataTransferDico ?? (_invoiceDetailsDataTransferDico = new Dictionary<Guid, WAQSWorkshopClient.InvoiceDetail>()); }
        }
    
        private Dictionary<string, WAQSWorkshopClient.InvoiceDetail> _invoiceDetailsAddedDico;
        private Dictionary<string, WAQSWorkshopClient.InvoiceDetail> InvoiceDetailsAddedDico
        {
            get { return _invoiceDetailsAddedDico ?? (_invoiceDetailsAddedDico = new Dictionary<string, WAQSWorkshopClient.InvoiceDetail>()); }
        }
        private void AddInvoiceDetailsAddedDico(WAQSWorkshopClient.InvoiceDetail entity)
        {
            InvoiceDetailsAddedDico.Add(entity.EntityKey, entity);
            entity.EntityKeyChanged += ResetEntityKey;
        }
        private void RemoveInvoiceDetailsAddedDico(WAQSWorkshopClient.InvoiceDetail entity)
        {
            InvoiceDetailsAddedDico.Remove(entity.EntityKey);
            entity.EntityKeyChanged -= ResetEntityKey;
        }
    
        private void ResetEntityKey(WAQSWorkshopClient.InvoiceDetail entity, string oldEntityKey)
        {
            if (entity.HasTemporaryKey)
            {
                if (entity.EntityKey != oldEntityKey)
                {
                    if (oldEntityKey != null)
                        InvoiceDetailsAddedDico.Remove(oldEntityKey);
                    InvoiceDetailsAddedDico.Add(entity.EntityKey, entity);
                }
            }
            else
            {
                InvoiceDetailsAddedDico.Remove(oldEntityKey);
                entity.EntityKeyChanged -= ResetEntityKey;
                InvoiceDetailsDico.Add(new InvoiceDetailKeys { OrderDetailId = entity.OrderDetailId }, entity);
            }
        }
        public IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.InvoiceDetail> InvoiceDetails 
        { 
            get { return InvoiceDetailsInternal; }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.InvoiceDetail> InvoiceDetailsInternal
        {
            get
            {
                if (_invoiceDetails == null)
                {
                    _invoiceDetails = new ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.InvoiceDetail>("InvoiceDetails", this, e => new InvoiceDetailKeys { OrderDetailId = e.OrderDetailId });
                    _invoiceDetails.EntityAdded += EntityAddedOrAttached;
                    _invoiceDetails.EntityAttached += EntityAddedOrAttached;
                    _invoiceDetails.EntityReplaced += EntityReplaced;
                    _invoiceDetails.EntityDetached += EntityDetached;
                }
                return _invoiceDetails;
            }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.InvoiceDetail> _invoiceDetails;
        private Dictionary<InvoiceKeys, List<WAQSWorkshopClient.InvoiceDetail>> _invoiceDetailsInvoiceFKsDico;
        private Dictionary<InvoiceKeys, List<WAQSWorkshopClient.InvoiceDetail>> InvoiceDetailsInvoiceFKsDico
        {
            get { return _invoiceDetailsInvoiceFKsDico ?? (_invoiceDetailsInvoiceFKsDico = new Dictionary<InvoiceKeys, List<WAQSWorkshopClient.InvoiceDetail>>()); }
        }
        private Dictionary<OrderDetailKeys, List<WAQSWorkshopClient.InvoiceDetail>> _invoiceDetailsOrderDetailFKsDico;
        private Dictionary<OrderDetailKeys, List<WAQSWorkshopClient.InvoiceDetail>> InvoiceDetailsOrderDetailFKsDico
        {
            get { return _invoiceDetailsOrderDetailFKsDico ?? (_invoiceDetailsOrderDetailFKsDico = new Dictionary<OrderDetailKeys, List<WAQSWorkshopClient.InvoiceDetail>>()); }
        }
    
        private void EntityAddedOrAttached(WAQSWorkshopClient.InvoiceDetail entity)
        {
    
            ClientEntitySetExtensions.AddEntityInDico(InvoiceDetails, entity);
            InvoiceDetail entityTmp;
            if (InvoiceDetailsDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out entityTmp))
            {
                if (entityTmp == entity)
                    new InvalidOperationException();
            }
            else
                InvoiceDetailsDataTransferDico.Add(entity.DataTransferEntityKey, entity);		
            if (entity.HasTemporaryKey)
            {
                WAQSWorkshopClient.InvoiceDetail entityInAddedDico;
                if (! InvoiceDetailsAddedDico.TryGetValue(entity.EntityKey, out entityInAddedDico))
                    AddInvoiceDetailsAddedDico(entity);
                else if (entityInAddedDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                entity.NavigationPropertyChanged += InvoiceDetailNavigationPropertyChanged;
                EntityAttachWithoutChangingStateSubEntities(entity);
            }
            else
            {
                var invoiceDetailKeys = new InvoiceDetailKeys { OrderDetailId = entity.OrderDetailId };
                WAQSWorkshopClient.InvoiceDetail entityInDico;
                if (! InvoiceDetailsDico.TryGetValue(invoiceDetailKeys, out entityInDico))
                    InvoiceDetailsDico.Add(invoiceDetailKeys, entity);
                else if (entityInDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                entity.NavigationPropertyChanged += InvoiceDetailNavigationPropertyChanged;
                EntityAttachWithoutChangingStateSubEntities(entity);
            }
    
            if (! (entity.Invoice == null || InvoicesInternal.Contains(entity.Invoice)))
                InvoicesInternal.AttachWithoutChangingState(entity.Invoice, entity.ChangeTracker.State);
    
            var invoiceDetailsInvoiceKeys = new InvoiceKeys { OrderId = entity.InvoiceId };
            List<WAQSWorkshopClient.InvoiceDetail> invoiceDetailsInvoiceEntities;
            if (! InvoiceDetailsInvoiceFKsDico.TryGetValue(invoiceDetailsInvoiceKeys, out invoiceDetailsInvoiceEntities))
                InvoiceDetailsInvoiceFKsDico.Add(invoiceDetailsInvoiceKeys, invoiceDetailsInvoiceEntities = new List<WAQSWorkshopClient.InvoiceDetail>());
            invoiceDetailsInvoiceEntities.Add(entity);
    
            WAQSWorkshopClient.Invoice invoice;
            if (InvoicesDico.TryGetValue(invoiceDetailsInvoiceKeys, out invoice))
                entity.Invoice = invoice;
            entity.InvoiceFKsChanged += InvoiceDetailInvoiceFKsChanged;
    
            if (! (entity.OrderDetail == null || OrderDetailsInternal.Contains(entity.OrderDetail)))
                OrderDetailsInternal.AttachWithoutChangingState(entity.OrderDetail, entity.ChangeTracker.State);
    
            var invoiceDetailsOrderDetailKeys = new OrderDetailKeys { Id = entity.OrderDetailId };
            List<WAQSWorkshopClient.InvoiceDetail> invoiceDetailsOrderDetailEntities;
            if (! InvoiceDetailsOrderDetailFKsDico.TryGetValue(invoiceDetailsOrderDetailKeys, out invoiceDetailsOrderDetailEntities))
                InvoiceDetailsOrderDetailFKsDico.Add(invoiceDetailsOrderDetailKeys, invoiceDetailsOrderDetailEntities = new List<WAQSWorkshopClient.InvoiceDetail>());
            invoiceDetailsOrderDetailEntities.Add(entity);
    
            WAQSWorkshopClient.OrderDetail orderDetail;
            if (OrderDetailsDico.TryGetValue(invoiceDetailsOrderDetailKeys, out orderDetail))
                entity.OrderDetail = orderDetail;
            entity.IsInitializingRelationships = false;
        }
    
        private void EntityReplaced(WAQSWorkshopClient.InvoiceDetail entityInEntitySet, WAQSWorkshopClient.InvoiceDetail entity)
        {
            EntityReplacedInternal(entityInEntitySet, entity);
        }
        private void EntityReplacedInternal(WAQSWorkshopClient.InvoiceDetail entityInEntitySet, WAQSWorkshopClient.InvoiceDetail entity)
        {
            if (entityInEntitySet.InvoiceId != entity.InvoiceId)
                entityInEntitySet.InvoiceId = entity.InvoiceId;
            if (entityInEntitySet.UnitPrice != entity.UnitPrice)
                entityInEntitySet.UnitPrice = entity.UnitPrice;
            if (entityInEntitySet.Quantity != entity.Quantity)
                entityInEntitySet.Quantity = entity.Quantity;
            if (entityInEntitySet.Discount != entity.Discount)
                entityInEntitySet.Discount = entity.Discount;
            if (entityInEntitySet.Amount != entity.Amount)
                entityInEntitySet.Amount = entity.Amount;
        }
    
        private void InvoiceDetailInvoiceFKsChanged(WAQSWorkshopClient.InvoiceDetail entity, int oldInvoiceId, int newInvoiceId)
        {
            InvoiceKeys oldInvoiceDetailsInvoiceKeys = new InvoiceKeys { OrderId = oldInvoiceId };
            InvoiceKeys newInvoiceDetailsInvoiceKeys = new InvoiceKeys { OrderId = newInvoiceId };
            List<WAQSWorkshopClient.InvoiceDetail> newCollection;
            if (! InvoiceDetailsInvoiceFKsDico.TryGetValue(newInvoiceDetailsInvoiceKeys, out newCollection))
                InvoiceDetailsInvoiceFKsDico.Add(newInvoiceDetailsInvoiceKeys, newCollection = new List<WAQSWorkshopClient.InvoiceDetail>());
            newCollection.Add(entity);
    
            WAQSWorkshopClient.Invoice invoice;
            if (InvoicesDico.TryGetValue(newInvoiceDetailsInvoiceKeys, out invoice))
                entity.Invoice = invoice;
            List<WAQSWorkshopClient.InvoiceDetail> oldCollection;
            if (InvoiceDetailsInvoiceFKsDico.TryGetValue(oldInvoiceDetailsInvoiceKeys, out oldCollection))
            {
                oldCollection.Remove(entity);
                if (oldCollection.Count == 0)
                    InvoiceDetailsInvoiceFKsDico.Remove(oldInvoiceDetailsInvoiceKeys);
            }
        }
    
        private void InvoiceDetailOrderDetailFKsChanged(WAQSWorkshopClient.InvoiceDetail entity, int oldOrderDetailId, int newOrderDetailId)
        {
            OrderDetailKeys oldInvoiceDetailsOrderDetailKeys = new OrderDetailKeys { Id = oldOrderDetailId };
            OrderDetailKeys newInvoiceDetailsOrderDetailKeys = new OrderDetailKeys { Id = newOrderDetailId };
            List<WAQSWorkshopClient.InvoiceDetail> newCollection;
            if (! InvoiceDetailsOrderDetailFKsDico.TryGetValue(newInvoiceDetailsOrderDetailKeys, out newCollection))
                InvoiceDetailsOrderDetailFKsDico.Add(newInvoiceDetailsOrderDetailKeys, newCollection = new List<WAQSWorkshopClient.InvoiceDetail>());
            newCollection.Add(entity);
    
            WAQSWorkshopClient.OrderDetail orderDetail;
            if (OrderDetailsDico.TryGetValue(newInvoiceDetailsOrderDetailKeys, out orderDetail))
                entity.OrderDetail = orderDetail;
            List<WAQSWorkshopClient.InvoiceDetail> oldCollection;
            if (InvoiceDetailsOrderDetailFKsDico.TryGetValue(oldInvoiceDetailsOrderDetailKeys, out oldCollection))
            {
                oldCollection.Remove(entity);
                if (oldCollection.Count == 0)
                    InvoiceDetailsOrderDetailFKsDico.Remove(oldInvoiceDetailsOrderDetailKeys);
            }
        }
    
        private void InvoiceDetailNavigationPropertyChanged(InvoiceDetail sender, string propertyName)
        {
            var entity = sender;
            if (propertyName == "Invoice" && entity.Invoice != null)
            {
                if (! Invoices.Contains(entity.Invoice))
                    AttachWithoutChangingState(entity.Invoice);
            }
            else if (new [] { "InvoiceId" }.Contains(propertyName))
            {
                var parentEntityInCache = Invoices.FirstOrDefault(pe => pe.OrderId == entity.InvoiceId);
                if (parentEntityInCache != null && parentEntityInCache.OrderId != 0)
                    entity.Invoice = parentEntityInCache;					
            }
            else if (propertyName == "OrderDetail" && entity.OrderDetail != null)
            {
                if (! OrderDetails.Contains(entity.OrderDetail))
                    AttachWithoutChangingState(entity.OrderDetail);
            }
            else if (new [] { "OrderDetailId" }.Contains(propertyName))
            {
                var parentEntityInCache = OrderDetails.FirstOrDefault(pe => pe.Id == entity.OrderDetailId);
                if (parentEntityInCache != null && parentEntityInCache.Id != 0)
                    entity.OrderDetail = parentEntityInCache;					
            }
        }
    
        private void EntityDetached(WAQSWorkshopClient.InvoiceDetail entity)
        {
    
            InvoiceDetailsDataTransferDico.Remove(entity.DataTransferEntityKey);		
            if (entity.IsTemporaryKey)
                RemoveInvoiceDetailsAddedDico(entity);
            else
            {
                var entityKey = new InvoiceDetailKeys { OrderDetailId = entity.OrderDetailId };
                InvoiceDetailsDico.Remove(entityKey);
            }
            {
                List<WAQSWorkshopClient.InvoiceDetail> fkEntities;
                if (InvoiceDetailsInvoiceFKsDico.TryGetValue(new InvoiceKeys { OrderId = entity.InvoiceId }, out fkEntities))
                    fkEntities.Remove(entity);
            }
            {
                List<WAQSWorkshopClient.InvoiceDetail> fkEntities;
                if (InvoiceDetailsOrderDetailFKsDico.TryGetValue(new OrderDetailKeys { Id = entity.OrderDetailId }, out fkEntities))
                    fkEntities.Remove(entity);
            }
        
            InvoiceKeys oldInvoiceDetailsInvoiceKeys = new InvoiceKeys { OrderId = entity.InvoiceId };
            {
                List<WAQSWorkshopClient.InvoiceDetail> oldCollection;
                if (InvoiceDetailsInvoiceFKsDico.TryGetValue(oldInvoiceDetailsInvoiceKeys, out oldCollection))
                {
                    oldCollection.Remove(entity);
                    if (oldCollection.Count == 0)
                        InvoiceDetailsInvoiceFKsDico.Remove(oldInvoiceDetailsInvoiceKeys);
                }
            }
    
            OrderDetailKeys oldInvoiceDetailsOrderDetailKeys = new OrderDetailKeys { Id = entity.OrderDetailId };
            {
                List<WAQSWorkshopClient.InvoiceDetail> oldCollection;
                if (InvoiceDetailsOrderDetailFKsDico.TryGetValue(oldInvoiceDetailsOrderDetailKeys, out oldCollection))
                {
                    oldCollection.Remove(entity);
                    if (oldCollection.Count == 0)
                        InvoiceDetailsOrderDetailFKsDico.Remove(oldInvoiceDetailsOrderDetailKeys);
                }
            }
    
            entity.NavigationPropertyChanged -= InvoiceDetailNavigationPropertyChanged;
            ClientEntitySetExtensions.RemoveEntityInDico(entity);
    		RemovePropertyDescriptorToEntity(entity);
            foreach (var subEntity in InvoicesInternal)
            {
                ObjectList originalValues;
                if (subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("InvoiceDetails", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.Remove("InvoiceDetails");
                }
                if (subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("InvoiceDetails", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Remove("InvoiceDetails");
                }
            }
            foreach (var subEntity in OrderDetailsInternal)
            {
                object originalValue;
                if (subEntity.ChangeTracker.OriginalValues.TryGetValue("InvoiceDetail", out originalValue) && originalValue == entity)
                    subEntity.ChangeTracker.OriginalValues.Remove("InvoiceDetail");
            }
        }
    
        
        private void EntityAttachWithoutChangingStateSubEntities(WAQSWorkshopClient.InvoiceDetail entity)
        {
            var entityInCache = GetEntityInCache(entity);
            bool entityInCacheIsInitializingRelationships = false;
            if (entityInCache != null)
            {
                entityInCacheIsInitializingRelationships = entityInCache.IsInitializingRelationships;
                entityInCache.IsInitializingRelationships = true;
            }
            EntityAttachWithoutChangingStateSubEntitiesBody(entity, entityInCache);
            if (entityInCache != null)
                entityInCache.IsInitializingRelationships = entityInCacheIsInitializingRelationships;
        }
        
        private void EntityAttachWithoutChangingStateSubEntitiesBody(WAQSWorkshopClient.InvoiceDetail entity, WAQSWorkshopClient.InvoiceDetail entityInCache)
        {
            if (entity == entityInCache)
                return;
            if (entity.Invoice != null)
            {
                WAQSWorkshopClient.Invoice parentEntityInCache;
                if (InvoicesInternal.Contains(entity.Invoice))
                    parentEntityInCache = entity.Invoice;
                else
                    parentEntityInCache = AttachWithoutChangingState(entity.Invoice, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
                if (entityInCache != null)
                    entityInCache.Invoice = parentEntityInCache;
            }
            else if (! (entityInCache == null))
            {
                WAQSWorkshopClient.Invoice parentEntityInCache;
                if (InvoicesDico.TryGetValue(new InvoiceKeys { OrderId = entityInCache.InvoiceId }, out parentEntityInCache))
                {
                    entityInCache.Invoice = parentEntityInCache;
                }
            }
            if (entity.OrderDetail != null)
            {
                WAQSWorkshopClient.OrderDetail parentEntityInCache;
                if (OrderDetailsInternal.Contains(entity.OrderDetail))
                    parentEntityInCache = entity.OrderDetail;
                else
                    parentEntityInCache = AttachWithoutChangingState(entity.OrderDetail, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
                if (entityInCache != null)
                    entityInCache.OrderDetail = parentEntityInCache;
            }
            else if (! (entityInCache == null))
            {
                WAQSWorkshopClient.OrderDetail parentEntityInCache;
                if (OrderDetailsDico.TryGetValue(new OrderDetailKeys { Id = entityInCache.OrderDetailId }, out parentEntityInCache))
                {
                    entityInCache.OrderDetail = parentEntityInCache;
                }
            }
        }
    
        private WAQSWorkshopClient.InvoiceDetail GetEntityInCache(WAQSWorkshopClient.InvoiceDetail entity, bool includingDeleted = false, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            WAQSWorkshopClient.InvoiceDetail value;
            if (! (applyDataTransfer && InvoiceDetailsDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out value)) && (! InvoiceDetailsDico.TryGetValue(new InvoiceDetailKeys { OrderDetailId = entity.OrderDetailId }, out value) || value.ChangeTracker.State == ObjectState.Detached || ! includingDeleted && value.ChangeTracker.State == ObjectState.Deleted) && ! (entity.HasTemporaryKey && InvoiceDetailsAddedDico.TryGetValue(entity.EntityKey, out value)))
                return null;
            return value;
        }
    
        protected override WAQSWorkshopClient.InvoiceDetail GetEntity(WAQSWorkshopClient.InvoiceDetail entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
        {
            return GetEntity(entity, applyState, mergeOption, true, applyDataTransfer: applyDataTransfer);
        }
        private WAQSWorkshopClient.InvoiceDetail GetEntity(WAQSWorkshopClient.InvoiceDetail entity, bool applyState, MergeOption? mergeOption = null, bool includingDeleted = false, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            object entityGot;
            if (EntitiesGot.TryGetValue(entity, out entityGot))
                return (WAQSWorkshopClient.InvoiceDetail)entityGot;
    
            if (mergeOption == null)
                mergeOption = MergeOption;
    
            if (mergeOption == MergeOption.NoTracking)
                return entity;
    
            if (InvoiceDetailsInternal.Contains(entity))
                return entity;
    
            entity.IsDeserializing = true;
    
            includingDeleted |= applyState;
    
            var entityInvoice = entity.Invoice;
            entity.Invoice = null;
            var entityOrderDetail = entity.OrderDetail;
            entity.OrderDetail = null;
    
            WAQSWorkshopClient.InvoiceDetail value;
            var entityInCache = GetEntityInCache(entity, includingDeleted, applyDataTransfer);
            ObjectChangeTracker originalChangeTracker = entity.ChangeTracker;
            if (entityInCache == null)
            {
                var originalState = entity.ChangeTracker.State;
                entity.ChangeTracker = null;
                if (entity.ChangeTracker.State == ObjectState.Detached)
                    entity.ResetEntityKey();
                entity.IsDeserializing = false;
                var state = originalState == ObjectState.Detached ? defaultState : originalState;
                switch(state)
                {
                    case ObjectState.Added:
                        InvoiceDetailsInternal.AddWithoutCheckingIfAlreadyExist(entity);
                        break;
                    default:
                        entity.IsInitializingRelationships = true;
                        InvoiceDetailsInternal.AttachWithoutCheckingIfAlreadyExist(entity);
                        entity.IsInitializingRelationships = false;
                        break;
                }
                if (applyState)
                    entity.ChangeTracker.State = state;
                value = entity;
            }
            else
            {
                switch (mergeOption)
                {
                    case MergeOption.AppendOnly:
                        RefreshNewLoadedProperties(entityInCache, entity);
                        value = entityInCache;
                        break;
                    case MergeOption.OverwriteChanges:
                        RefreshCurrentValues(entityInCache, entity, applyState: applyState);
                        value = entityInCache;
                        break;
                    case MergeOption.PreserveChanges:
                        RefreshOriginalValues(entityInCache, entity);
                        value = entityInCache;
                        break;
                    default: 
                        throw new NotImplementedException();
                }
                if (applyState)
                {
                    switch(entity.ChangeTracker.State)
                    {
                        case ObjectState.Detached:
                            InvoiceDetails.Detach(value);
                            break;
                        case ObjectState.Deleted:
                            InvoiceDetails.Remove(value);
                            break;
                        default:
                            value.ChangeTracker.State = entity.ChangeTracker.State;
                            break;
                    }
                }
            }
            EntitiesGot.Add(entity, value);
            if (! entity.IsInitializingRelationships)
            {
                entity.IsInitializingRelationships = true;
                value.IsInitializingRelationships = true;
    
                if (entityInvoice != null)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(entityInvoice, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Invoice = GetEntity(entityInvoice, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer);
                }
                if (entityOrderDetail != null)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(entityOrderDetail, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.OrderDetail = GetEntity(entityOrderDetail, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer);
                }
    
                if (applyState && originalChangeTracker != null && originalChangeTracker != value.ChangeTracker)
                {
                    foreach (var modifiedProperty in originalChangeTracker.ModifiedProperties)
                        if (! value.ChangeTracker.ModifiedProperties.Contains(modifiedProperty))
                            value.ChangeTracker.ModifiedProperties.Add(modifiedProperty);
                    foreach (var originalValue in originalChangeTracker.OriginalValues)
                    {
                        var originalValueEntity = originalValue.Value as IEntity;
                        if (originalValueEntity != null) 
                        {
                            var originalState = originalValueEntity.ChangeTracker.State;
                            IEntity originalEntity = null;
                            var ov = originalValueEntity == null ? originalValue.Value : originalEntity = GetEntity(originalValueEntity, true, defaultState, applyDataTransfer) as IEntity;
                            if (value.ChangeTracker.State != ObjectState.Detached)
                                value.ChangeTracker.RecordOriginalValue(originalValue.Key, ov);
                            if (originalValueEntity != null && originalState == ObjectState.Detached)
                                Detach(originalEntity);
                        }
                    }
                    foreach (var objectsRemovedToCollectionProperties in originalChangeTracker.ObjectsRemovedFromCollectionProperties)
                        foreach (IEntity objectsRemovedToCollectionProperty in objectsRemovedToCollectionProperties.Value)
                            if (objectsRemovedToCollectionProperty != null)
                            {
                                var originalState = objectsRemovedToCollectionProperty.ChangeTracker.State;
                                IObjectWithChangeTracker removedEntity = (IObjectWithChangeTracker)GetEntity(objectsRemovedToCollectionProperty, true, defaultState, applyDataTransfer);
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordRemovalFromCollectionProperties(objectsRemovedToCollectionProperties.Key, removedEntity);
                                if (originalState == ObjectState.Detached)
                                    Detach(removedEntity);
                            }
                    foreach (var objectsAddedToCollectionProperties in originalChangeTracker.ObjectsAddedToCollectionProperties)
                        foreach (var objectsAddedToCollectionProperty in objectsAddedToCollectionProperties.Value)
                            if (objectsAddedToCollectionProperty != null)
                            {
                                var addedEntity = (IObjectWithChangeTracker)GetEntity(objectsAddedToCollectionProperty, true, defaultState, applyDataTransfer);
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordAdditionToCollectionProperties(objectsAddedToCollectionProperties.Key, addedEntity);
                            }
                }
    
                value.IsInitializingRelationships = false;
            }
            value.ChangeTracker.ChangeTrackingEnabled = true;
            return value;
        } 
    
        private WAQSWorkshopClient.InvoiceDetail AttachWithoutChangingState(WAQSWorkshopClient.InvoiceDetail entity, ObjectState? defaultState = null)
        {
            if (InvoiceDetailsInternal.Contains(entity))
                return entity;
            var entityIncludingCache = Init ? GetEntityInCache(entity) ?? entity : entity;
            if (InvoiceDetailsInternal.AttachWithoutChangingState(entityIncludingCache, defaultState))
                EntityAttachWithoutChangingStateSubEntities(entity);
            return entityIncludingCache;
        }
    
        public void RefreshNewLoadedProperties(WAQSWorkshopClient.InvoiceDetail entityInCache, WAQSWorkshopClient.InvoiceDetail entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            entityInCache.IsDeserializing = isDeserializing;
        }
    
        public void RefreshCurrentValues(WAQSWorkshopClient.InvoiceDetail entityInCache, WAQSWorkshopClient.InvoiceDetail entity)
        {
            RefreshCurrentValues(entityInCache, entity, false);
        }
        public void RefreshCurrentValues(WAQSWorkshopClient.InvoiceDetail entityInCache, WAQSWorkshopClient.InvoiceDetail entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            if (entityInCache.OrderDetailId != entity.OrderDetailId)
                entityInCache.OrderDetailId = entity.OrderDetailId;
            if (entityInCache.InvoiceId != entity.InvoiceId)
                entityInCache.InvoiceId = entity.InvoiceId;
            if (entityInCache.UnitPrice != entity.UnitPrice)
                entityInCache.UnitPrice = entity.UnitPrice;
            if (entityInCache.Quantity != entity.Quantity)
                entityInCache.Quantity = entity.Quantity;
            if (entityInCache.Discount != entity.Discount)
                entityInCache.Discount = entity.Discount;
            if (entityInCache.Amount != entity.Amount)
                entityInCache.Amount = entity.Amount;
            entityInCache.IsDeserializing = isDeserializing;
            if (applyState)
            {
                entityInCache.ChangeTracker.State = entity.ChangeTracker.State;
                entityInCache.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties;
            }
            else
            {
                entityInCache.ChangeTracker.AcceptChanges();
                entityInCache.ChangeTracker.ModifiedProperties.Clear();
            }
        }
    
        private void RefreshOriginalValues(WAQSWorkshopClient.InvoiceDetail entityInCache, WAQSWorkshopClient.InvoiceDetail entity)
        {
            if (! (entityInCache.InvoiceId == entity.InvoiceId || entityInCache.ChangeTracker.ModifiedProperties.Contains("InvoiceId")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("InvoiceId");
            if (! (entityInCache.UnitPrice == entity.UnitPrice || entityInCache.ChangeTracker.ModifiedProperties.Contains("UnitPrice")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("UnitPrice");
            if (! (entityInCache.Quantity == entity.Quantity || entityInCache.ChangeTracker.ModifiedProperties.Contains("Quantity")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Quantity");
            if (! (entityInCache.Discount == entity.Discount || entityInCache.ChangeTracker.ModifiedProperties.Contains("Discount")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Discount");
            if (! (entityInCache.Amount == entity.Amount || entityInCache.ChangeTracker.ModifiedProperties.Contains("Amount")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Amount");
        }
    
        private WAQSWorkshopClient.InvoiceDetail ReduceToKey(WAQSWorkshopClient.InvoiceDetail entity)
        {
            WAQSWorkshopClient.InvoiceDetail value = new WAQSWorkshopClient.InvoiceDetail { OrderDetailId = entity.OrderDetailId };
            return value;
        }
    
        private WAQSWorkshopClient.InvoiceDetail ReduceToModifications(WAQSWorkshopClient.InvoiceDetail entity)
        {
            WAQSWorkshopClient.InvoiceDetail value = new WAQSWorkshopClient.InvoiceDetail { OrderDetailId = entity.OrderDetailId };
            value.ChangeTracker.Saving = true;
            value.ChangeTracker.ChangeTrackingEnabled = true;
            value.ChangeTracker.State = entity.ChangeTracker.State;
            switch (entity.ChangeTracker.State)
            {
                case ObjectState.Added:
                    value.InvoiceId = entity.InvoiceId;
                    value.UnitPrice = entity.UnitPrice;
                    value.Quantity = entity.Quantity;
                    value.Discount = entity.Discount;
                    value.Amount = entity.Amount;
    				break;
                case ObjectState.Deleted:
                    value.ChangeTracker.ChangeTrackingEnabled = false;
                                value.InvoiceId = entity.InvoiceId;
                    value.UnitPrice = default(double); 
                    value.Quantity = default(short); 
                    value.Discount = default(double); 
                    value.Amount = default(double); 
    				break;
                case ObjectState.Modified:
                    value.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties.ToList();
                    value.InvoiceId = entity.InvoiceId;
                    foreach (var modifiedPropery in entity.ChangeTracker.ModifiedProperties.Union(entity.ChangeTracker.ValidationProperties))
                        switch (modifiedPropery)
                        {
                            case "UnitPrice":
                                value.UnitPrice = entity.UnitPrice;
                                break;
                            case "Quantity":
                                value.Quantity = entity.Quantity;
                                break;
                            case "Discount":
                                value.Discount = entity.Discount;
                                break;
                            case "Amount":
                                value.Amount = entity.Amount;
                                break;
                        }
                    break;
                case ObjectState.Unchanged:
                case ObjectState.CascadeDeleted:
                    break;
                default: //case ObjectState.Detached:
                    throw new InvalidOperationException();
            }
            return value;
        }
    
        private void ReduceNavigationProperties(WAQSWorkshopClient.InvoiceDetail originalValue, WAQSWorkshopClient.InvoiceDetail newValue, Dictionary<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice> reducedInvoicesDictionary, Dictionary<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.OrderDetail> reducedOrderDetailsDictionary)
        {
            newValue.ChangeTracker.ObjectsAddedToCollectionProperties.Clear();
            newValue.ChangeTracker.ObjectsRemovedFromCollectionProperties.Clear();
            newValue.ChangeTracker.OriginalValues.Clear();
            foreach (var relatedEntity in originalValue.ChangeTracker.OriginalValues)
            {
                if (relatedEntity.Value == null)
                    continue;
                switch (relatedEntity.Key)
                {
    				case "Invoice":
                        var invoiceInvoiceParentEntity = (WAQSWorkshopClient.Invoice)relatedEntity.Value;
                        WAQSWorkshopClient.Invoice newInvoiceInvoiceParentEntity;
                        if (reducedInvoicesDictionary.TryGetValue(invoiceInvoiceParentEntity, out newInvoiceInvoiceParentEntity))
                        {
    						
                            newValue.ChangeTracker.OriginalValues.Add("Invoice", newInvoiceInvoiceParentEntity);
                            WAQS.EntitiesTracking.ObjectList invoiceInvoiceParentEntityObjectList;
                            if (!newInvoiceInvoiceParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("InvoiceDetails", out invoiceInvoiceParentEntityObjectList))
                            {
                                invoiceInvoiceParentEntityObjectList = new WAQS.EntitiesTracking.ObjectList();
                                newInvoiceInvoiceParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Add("InvoiceDetails", invoiceInvoiceParentEntityObjectList);
                            }
                            invoiceInvoiceParentEntityObjectList.Add(newValue);
                        }
                        newValue.InvoiceId = originalValue.InvoiceId;
                    break;
                    case "InvoiceId":
                    case "OrderDetailId":
                        if (! newValue.ChangeTracker.OriginalValues.ContainsKey(relatedEntity.Key))
                            newValue.ChangeTracker.OriginalValues.Add(relatedEntity.Key, relatedEntity.Value);
                    break;
                }
            }
            if (originalValue.ChangeTracker.State != ObjectState.Unchanged)
            {
                if (originalValue.Invoice != null)
                {
                    WAQSWorkshopClient.Invoice relatedEntity;
                    if (reducedInvoicesDictionary.TryGetValue(originalValue.Invoice, out relatedEntity))
                    {
                        if (newValue.Invoice != relatedEntity)
                            newValue.Invoice = relatedEntity;
                    }
                    else
                    {
                        newValue.InvoiceId = originalValue.InvoiceId;
                    }
                }
                if (originalValue.OrderDetail != null)
                {
                    WAQSWorkshopClient.OrderDetail relatedEntity;
                    if (reducedOrderDetailsDictionary.TryGetValue(originalValue.OrderDetail, out relatedEntity))
                    {
                        if (newValue.OrderDetail != relatedEntity)
                            newValue.OrderDetail = relatedEntity;
                    }
                    else
                    {
                        newValue.OrderDetailId = originalValue.OrderDetailId;
                    }
                }
    			
            }
        }
    
        private void RefreshComputedValues(WAQSWorkshopClient.InvoiceDetail entity, WAQSWorkshopClient.InvoiceDetail dbEntity)
        {
            if (entity.HasTemporaryKey)
            {
                InvoiceDetailsDico.Add(new InvoiceDetailKeys { OrderDetailId = dbEntity.OrderDetailId }, entity);
                RemoveInvoiceDetailsAddedDico(entity);
            }						
            entity.IsDeserializing = true;
            if (dbEntity.Invoice != null && dbEntity.Invoice.ChangeTracker.State == ObjectState.Added)
                entity.InvoiceId = dbEntity.InvoiceId;
            if (dbEntity.OrderDetail != null && dbEntity.OrderDetail.ChangeTracker.State == ObjectState.Added)
                entity.OrderDetailId = dbEntity.OrderDetailId;
            entity.IsDeserializing = false;
            entity.ResetEntityKey();
        }
    
        private void DisposeInvoiceDetail()
        {
            if (_invoiceDetails != null)
            {
                foreach (var entity in _invoiceDetails.AllEntities.ToList())
                {
                    entity.InvoiceFKsChanged -= InvoiceDetailInvoiceFKsChanged;
                    entity.NavigationPropertyChanged -= InvoiceDetailNavigationPropertyChanged;
                    EntityDetached(entity);
                }
                _invoiceDetails.EntityAdded -= EntityAddedOrAttached;
                _invoiceDetails.EntityAttached -= EntityAddedOrAttached;
                _invoiceDetails.EntityReplaced -= EntityReplaced;
                _invoiceDetails.EntityDetached -= EntityDetached;
            }
        }
    
        private Dictionary<OrderKeys, WAQSWorkshopClient.Order> _ordersDico;
        private Dictionary<OrderKeys, WAQSWorkshopClient.Order> OrdersDico
        {
            get { return _ordersDico ?? (_ordersDico = new Dictionary<OrderKeys, WAQSWorkshopClient.Order>()); }
        }
    
        private Dictionary<Guid, WAQSWorkshopClient.Order> _ordersDataTransferDico;
        private Dictionary<Guid, WAQSWorkshopClient.Order> OrdersDataTransferDico
        {
            get { return _ordersDataTransferDico ?? (_ordersDataTransferDico = new Dictionary<Guid, WAQSWorkshopClient.Order>()); }
        }
    
        private Dictionary<string, WAQSWorkshopClient.Order> _ordersAddedDico;
        private Dictionary<string, WAQSWorkshopClient.Order> OrdersAddedDico
        {
            get { return _ordersAddedDico ?? (_ordersAddedDico = new Dictionary<string, WAQSWorkshopClient.Order>()); }
        }
        private void AddOrdersAddedDico(WAQSWorkshopClient.Order entity)
        {
            OrdersAddedDico.Add(entity.EntityKey, entity);
            entity.EntityKeyChanged += ResetEntityKey;
        }
        private void RemoveOrdersAddedDico(WAQSWorkshopClient.Order entity)
        {
            OrdersAddedDico.Remove(entity.EntityKey);
            entity.EntityKeyChanged -= ResetEntityKey;
        }
    
        private void ResetEntityKey(WAQSWorkshopClient.Order entity, string oldEntityKey)
        {
            if (entity.HasTemporaryKey)
            {
                if (entity.EntityKey != oldEntityKey)
                {
                    if (oldEntityKey != null)
                        OrdersAddedDico.Remove(oldEntityKey);
                    OrdersAddedDico.Add(entity.EntityKey, entity);
                }
            }
            else
            {
                OrdersAddedDico.Remove(oldEntityKey);
                entity.EntityKeyChanged -= ResetEntityKey;
                OrdersDico.Add(new OrderKeys { Id = entity.Id }, entity);
            }
        }
        public IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Order> Orders 
        { 
            get { return OrdersInternal; }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Order> OrdersInternal
        {
            get
            {
                if (_orders == null)
                {
                    _orders = new ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Order>("Orders", this, e => new OrderKeys { Id = e.Id });
                    _orders.EntityAdded += EntityAddedOrAttached;
                    _orders.EntityAttached += EntityAddedOrAttached;
                    _orders.EntityReplaced += EntityReplaced;
                    _orders.EntityDetached += EntityDetached;
                }
                return _orders;
            }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Order> _orders;
        private Dictionary<CustomerKeys, List<WAQSWorkshopClient.Order>> _ordersCustomerFKsDico;
        private Dictionary<CustomerKeys, List<WAQSWorkshopClient.Order>> OrdersCustomerFKsDico
        {
            get { return _ordersCustomerFKsDico ?? (_ordersCustomerFKsDico = new Dictionary<CustomerKeys, List<WAQSWorkshopClient.Order>>()); }
        }
        private Dictionary<EmployeeKeys, List<WAQSWorkshopClient.Order>> _ordersEmployeeFKsDico;
        private Dictionary<EmployeeKeys, List<WAQSWorkshopClient.Order>> OrdersEmployeeFKsDico
        {
            get { return _ordersEmployeeFKsDico ?? (_ordersEmployeeFKsDico = new Dictionary<EmployeeKeys, List<WAQSWorkshopClient.Order>>()); }
        }
        private Dictionary<InvoiceKeys, List<WAQSWorkshopClient.Order>> _ordersInvoiceFKsDico;
        private Dictionary<InvoiceKeys, List<WAQSWorkshopClient.Order>> OrdersInvoiceFKsDico
        {
            get { return _ordersInvoiceFKsDico ?? (_ordersInvoiceFKsDico = new Dictionary<InvoiceKeys, List<WAQSWorkshopClient.Order>>()); }
        }
    
        private void EntityAddedOrAttached(WAQSWorkshopClient.Order entity)
        {
    
            ClientEntitySetExtensions.AddEntityInDico(Orders, entity);
            Order entityTmp;
            if (OrdersDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out entityTmp))
            {
                if (entityTmp == entity)
                    new InvalidOperationException();
            }
            else
                OrdersDataTransferDico.Add(entity.DataTransferEntityKey, entity);		
            if (entity.HasTemporaryKey)
            {
                WAQSWorkshopClient.Order entityInAddedDico;
                if (! OrdersAddedDico.TryGetValue(entity.EntityKey, out entityInAddedDico))
                    AddOrdersAddedDico(entity);
                else if (entityInAddedDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                entity.OrderDetails.CollectionChanged += Order_OrderDetailsCollectionChanged;
                entity.NavigationPropertyChanged += OrderNavigationPropertyChanged;
                EntityAttachWithoutChangingStateSubEntities(entity);
            }
            else
            {
                var orderKeys = new OrderKeys { Id = entity.Id };
                WAQSWorkshopClient.Order entityInDico;
                if (! OrdersDico.TryGetValue(orderKeys, out entityInDico))
                    OrdersDico.Add(orderKeys, entity);
                else if (entityInDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                entity.OrderDetails.CollectionChanged += Order_OrderDetailsCollectionChanged;
                entity.NavigationPropertyChanged += OrderNavigationPropertyChanged;
                EntityAttachWithoutChangingStateSubEntities(entity);
                List<WAQSWorkshopClient.OrderDetail> orderDetails;
                if (OrderDetailsOrderFKsDico.TryGetValue(orderKeys, out orderDetails))
                    foreach (var e in orderDetails)
                        e.Order = entity;
            }
    
            if (! (entity.Customer == null || CustomersInternal.Contains(entity.Customer)))
                CustomersInternal.AttachWithoutChangingState(entity.Customer, entity.ChangeTracker.State);
    
            if (entity.CustomerId != null)
            {
                var ordersCustomerKeys = new CustomerKeys { Id = entity.CustomerId };
                List<WAQSWorkshopClient.Order> ordersCustomerEntities;
                if (! OrdersCustomerFKsDico.TryGetValue(ordersCustomerKeys, out ordersCustomerEntities))
                    OrdersCustomerFKsDico.Add(ordersCustomerKeys, ordersCustomerEntities = new List<WAQSWorkshopClient.Order>());
                ordersCustomerEntities.Add(entity);
        
                WAQSWorkshopClient.Customer customer;
                if (CustomersDico.TryGetValue(ordersCustomerKeys, out customer))
                    entity.Customer = customer;
            }
            entity.CustomerFKsChanged += OrderCustomerFKsChanged;
    
            if (! (entity.Employee == null || EmployeesInternal.Contains(entity.Employee)))
                EmployeesInternal.AttachWithoutChangingState(entity.Employee, entity.ChangeTracker.State);
    
            if (entity.EmployeeId != null)
            {
                var ordersEmployeeKeys = new EmployeeKeys { Id = entity.EmployeeId.Value };
                List<WAQSWorkshopClient.Order> ordersEmployeeEntities;
                if (! OrdersEmployeeFKsDico.TryGetValue(ordersEmployeeKeys, out ordersEmployeeEntities))
                    OrdersEmployeeFKsDico.Add(ordersEmployeeKeys, ordersEmployeeEntities = new List<WAQSWorkshopClient.Order>());
                ordersEmployeeEntities.Add(entity);
        
                WAQSWorkshopClient.Employee employee;
                if (EmployeesDico.TryGetValue(ordersEmployeeKeys, out employee))
                    entity.Employee = employee;
            }
            entity.EmployeeFKsChanged += OrderEmployeeFKsChanged;
    
            if (! (entity.Invoice == null || InvoicesInternal.Contains(entity.Invoice)))
                InvoicesInternal.AttachWithoutChangingState(entity.Invoice, entity.ChangeTracker.State);
    
            var ordersInvoiceKeys = new InvoiceKeys { OrderId = entity.Id };
            List<WAQSWorkshopClient.Order> ordersInvoiceEntities;
            if (! OrdersInvoiceFKsDico.TryGetValue(ordersInvoiceKeys, out ordersInvoiceEntities))
                OrdersInvoiceFKsDico.Add(ordersInvoiceKeys, ordersInvoiceEntities = new List<WAQSWorkshopClient.Order>());
            ordersInvoiceEntities.Add(entity);
    
            WAQSWorkshopClient.Invoice invoice;
            if (InvoicesDico.TryGetValue(ordersInvoiceKeys, out invoice))
                entity.Invoice = invoice;
    
            foreach (var se in entity.OrderDetails)
                if (! OrderDetailsInternal.Contains(se))
                    OrderDetailsInternal.AttachWithoutChangingState(se, entity.ChangeTracker.State);
    
            entity.IsInitializingRelationships = false;
        }
    
        private void EntityReplaced(WAQSWorkshopClient.Order entityInEntitySet, WAQSWorkshopClient.Order entity)
        {
            EntityReplacedInternal(entityInEntitySet, entity);
        }
        private void EntityReplacedInternal(WAQSWorkshopClient.Order entityInEntitySet, WAQSWorkshopClient.Order entity)
        {
            if (entityInEntitySet.CustomerId != entity.CustomerId)
                entityInEntitySet.CustomerId = entity.CustomerId;
            if (entityInEntitySet.EmployeeId != entity.EmployeeId)
                entityInEntitySet.EmployeeId = entity.EmployeeId;
            if (entityInEntitySet.OrderDate != entity.OrderDate)
                entityInEntitySet.OrderDate = entity.OrderDate;
            if (entityInEntitySet.RequiredDate != entity.RequiredDate)
                entityInEntitySet.RequiredDate = entity.RequiredDate;
            if (entityInEntitySet.ShippedDate != entity.ShippedDate)
                entityInEntitySet.ShippedDate = entity.ShippedDate;
            if (entityInEntitySet.ShipVia != entity.ShipVia)
                entityInEntitySet.ShipVia = entity.ShipVia;
            if (entityInEntitySet.Freight != entity.Freight)
                entityInEntitySet.Freight = entity.Freight;
            if (entityInEntitySet.ShipName != entity.ShipName)
                entityInEntitySet.ShipName = entity.ShipName;
            if (entityInEntitySet.ShipAddress != entity.ShipAddress)
                entityInEntitySet.ShipAddress = entity.ShipAddress;
            if (entityInEntitySet.ShipCity != entity.ShipCity)
                entityInEntitySet.ShipCity = entity.ShipCity;
            if (entityInEntitySet.ShipRegion != entity.ShipRegion)
                entityInEntitySet.ShipRegion = entity.ShipRegion;
            if (entityInEntitySet.ShipPostalCode != entity.ShipPostalCode)
                entityInEntitySet.ShipPostalCode = entity.ShipPostalCode;
            if (entityInEntitySet.ShipCountry != entity.ShipCountry)
                entityInEntitySet.ShipCountry = entity.ShipCountry;
        }
    
        private void OrderCustomerFKsChanged(WAQSWorkshopClient.Order entity, string oldCustomerId, string newCustomerId)
        {
            CustomerKeys? oldOrdersCustomerKeys = oldCustomerId == null ? (CustomerKeys?)null : new CustomerKeys { Id = oldCustomerId };
            CustomerKeys? newOrdersCustomerKeys = newCustomerId == null ? (CustomerKeys?)null : new CustomerKeys { Id = newCustomerId };
            if (newOrdersCustomerKeys.HasValue)
            {
                List<WAQSWorkshopClient.Order> newCollection;
                if (! OrdersCustomerFKsDico.TryGetValue(newOrdersCustomerKeys.Value, out newCollection))
                    OrdersCustomerFKsDico.Add(newOrdersCustomerKeys.Value, newCollection = new List<WAQSWorkshopClient.Order>());
                newCollection.Add(entity);
        
                WAQSWorkshopClient.Customer customer;
                if (CustomersDico.TryGetValue(newOrdersCustomerKeys.Value, out customer))
                    entity.Customer = customer;
            }
            List<WAQSWorkshopClient.Order> oldCollection;
            if (oldOrdersCustomerKeys.HasValue && OrdersCustomerFKsDico.TryGetValue(oldOrdersCustomerKeys.Value, out oldCollection))
            {
                oldCollection.Remove(entity);
                if (oldCollection.Count == 0)
                    OrdersCustomerFKsDico.Remove(oldOrdersCustomerKeys.Value);
            }
        }
    
        private void OrderEmployeeFKsChanged(WAQSWorkshopClient.Order entity, Nullable<int> oldEmployeeId, Nullable<int> newEmployeeId)
        {
            EmployeeKeys? oldOrdersEmployeeKeys = oldEmployeeId == null ? (EmployeeKeys?)null : new EmployeeKeys { Id = oldEmployeeId.Value };
            EmployeeKeys? newOrdersEmployeeKeys = newEmployeeId == null ? (EmployeeKeys?)null : new EmployeeKeys { Id = newEmployeeId.Value };
            if (newOrdersEmployeeKeys.HasValue)
            {
                List<WAQSWorkshopClient.Order> newCollection;
                if (! OrdersEmployeeFKsDico.TryGetValue(newOrdersEmployeeKeys.Value, out newCollection))
                    OrdersEmployeeFKsDico.Add(newOrdersEmployeeKeys.Value, newCollection = new List<WAQSWorkshopClient.Order>());
                newCollection.Add(entity);
        
                WAQSWorkshopClient.Employee employee;
                if (EmployeesDico.TryGetValue(newOrdersEmployeeKeys.Value, out employee))
                    entity.Employee = employee;
            }
            List<WAQSWorkshopClient.Order> oldCollection;
            if (oldOrdersEmployeeKeys.HasValue && OrdersEmployeeFKsDico.TryGetValue(oldOrdersEmployeeKeys.Value, out oldCollection))
            {
                oldCollection.Remove(entity);
                if (oldCollection.Count == 0)
                    OrdersEmployeeFKsDico.Remove(oldOrdersEmployeeKeys.Value);
            }
        }
    
        private void Order_OrderDetailsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
                foreach (WAQSWorkshopClient.OrderDetail subEntity in e.NewItems)
                {
                    WAQSWorkshopClient.OrderDetail se = null;
                    if (!subEntity.IsInitializingRelationships && (se = GetEntityInCache(subEntity)) == null)
                        AttachWithoutChangingState(subEntity);
                    else if (se != null && se != subEntity)
                        throw new InvalidOperationException();
                }
        }
         
        private void OrderNavigationPropertyChanged(Order sender, string propertyName)
        {
            var entity = sender;
            if (propertyName == "Customer" && entity.Customer != null)
            {
                if (! Customers.Contains(entity.Customer))
                    AttachWithoutChangingState(entity.Customer);
            }
            else if (new [] { "CustomerId" }.Contains(propertyName))
            {
                var parentEntityInCache = Customers.FirstOrDefault(pe => pe.Id == entity.CustomerId);
                if (parentEntityInCache != null)
                    entity.Customer = parentEntityInCache;					
            }
            else if (propertyName == "Employee" && entity.Employee != null)
            {
                if (! Employees.Contains(entity.Employee))
                    AttachWithoutChangingState(entity.Employee);
            }
            else if (new [] { "EmployeeId" }.Contains(propertyName))
            {
                var parentEntityInCache = Employees.FirstOrDefault(pe => pe.Id == entity.EmployeeId);
                if (parentEntityInCache != null && parentEntityInCache.Id != 0)
                    entity.Employee = parentEntityInCache;					
            }
            else if (propertyName == "Invoice" && entity.Invoice != null)
            {
                if (! Invoices.Contains(entity.Invoice))
                    AttachWithoutChangingState(entity.Invoice);
            }
            else if (new [] { "Id" }.Contains(propertyName))
            {
                var parentEntityInCache = Invoices.FirstOrDefault(pe => pe.OrderId == entity.Id);
                if (parentEntityInCache != null && parentEntityInCache.OrderId != 0)
                    entity.Invoice = parentEntityInCache;					
            }
        }
    
        private void EntityDetached(WAQSWorkshopClient.Order entity)
        {
    
            OrdersDataTransferDico.Remove(entity.DataTransferEntityKey);		
            if (entity.IsTemporaryKey)
                RemoveOrdersAddedDico(entity);
            else
            {
                var entityKey = new OrderKeys { Id = entity.Id };
                OrdersDico.Remove(entityKey);
            }
            if (entity.CustomerId != null)
            {
                List<WAQSWorkshopClient.Order> fkEntities;
                if (OrdersCustomerFKsDico.TryGetValue(new CustomerKeys { Id = entity.CustomerId }, out fkEntities))
                    fkEntities.Remove(entity);
            }
            if (entity.EmployeeId != null)
            {
                List<WAQSWorkshopClient.Order> fkEntities;
                if (OrdersEmployeeFKsDico.TryGetValue(new EmployeeKeys { Id = entity.EmployeeId.Value }, out fkEntities))
                    fkEntities.Remove(entity);
            }
            {
                List<WAQSWorkshopClient.Order> fkEntities;
                if (OrdersInvoiceFKsDico.TryGetValue(new InvoiceKeys { OrderId = entity.Id }, out fkEntities))
                    fkEntities.Remove(entity);
            }
        
            CustomerKeys? oldOrdersCustomerKeys = entity.CustomerId == null ? (CustomerKeys?)null : new CustomerKeys { Id = entity.CustomerId };
            {
                List<WAQSWorkshopClient.Order> oldCollection;
                if (oldOrdersCustomerKeys.HasValue && OrdersCustomerFKsDico.TryGetValue(oldOrdersCustomerKeys.Value, out oldCollection))
                {
                    oldCollection.Remove(entity);
                    if (oldCollection.Count == 0)
                        OrdersCustomerFKsDico.Remove(oldOrdersCustomerKeys.Value);
                }
            }
    
            EmployeeKeys? oldOrdersEmployeeKeys = entity.EmployeeId == null ? (EmployeeKeys?)null : new EmployeeKeys { Id = entity.EmployeeId.Value };
            {
                List<WAQSWorkshopClient.Order> oldCollection;
                if (oldOrdersEmployeeKeys.HasValue && OrdersEmployeeFKsDico.TryGetValue(oldOrdersEmployeeKeys.Value, out oldCollection))
                {
                    oldCollection.Remove(entity);
                    if (oldCollection.Count == 0)
                        OrdersEmployeeFKsDico.Remove(oldOrdersEmployeeKeys.Value);
                }
            }
    
            InvoiceKeys oldOrdersInvoiceKeys = new InvoiceKeys { OrderId = entity.Id };
            {
                List<WAQSWorkshopClient.Order> oldCollection;
                if (OrdersInvoiceFKsDico.TryGetValue(oldOrdersInvoiceKeys, out oldCollection))
                {
                    oldCollection.Remove(entity);
                    if (oldCollection.Count == 0)
                        OrdersInvoiceFKsDico.Remove(oldOrdersInvoiceKeys);
                }
            }
    
            entity.OrderDetails.CollectionChanged -= Order_OrderDetailsCollectionChanged;
            entity.NavigationPropertyChanged -= OrderNavigationPropertyChanged;
            ClientEntitySetExtensions.RemoveEntityInDico(entity);
    		RemovePropertyDescriptorToEntity(entity);
            foreach (var subEntity in CustomersInternal)
            {
                ObjectList originalValues;
                if (subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("Orders", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.Remove("Orders");
                }
                if (subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("Orders", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Remove("Orders");
                }
            }
            foreach (var subEntity in EmployeesInternal)
            {
                ObjectList originalValues;
                if (subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("Orders", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.Remove("Orders");
                }
                if (subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("Orders", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Remove("Orders");
                }
            }
            foreach (var subEntity in InvoicesInternal)
            {
                object originalValue;
                if (subEntity.ChangeTracker.OriginalValues.TryGetValue("Order", out originalValue) && originalValue == entity)
                    subEntity.ChangeTracker.OriginalValues.Remove("Order");
            }
            foreach (var subEntity in OrderDetailsInternal)
            {
                object originalValue;
                if (subEntity.ChangeTracker.OriginalValues.TryGetValue("Order", out originalValue) && originalValue == entity)
                    subEntity.ChangeTracker.OriginalValues.Remove("Order");
            }
        }
    
        
        private void EntityAttachWithoutChangingStateSubEntities(WAQSWorkshopClient.Order entity)
        {
            var entityInCache = GetEntityInCache(entity);
            bool entityInCacheIsInitializingRelationships = false;
            if (entityInCache != null)
            {
                entityInCacheIsInitializingRelationships = entityInCache.IsInitializingRelationships;
                entityInCache.IsInitializingRelationships = true;
            }
            EntityAttachWithoutChangingStateSubEntitiesBody(entity, entityInCache);
            if (entityInCache != null)
                entityInCache.IsInitializingRelationships = entityInCacheIsInitializingRelationships;
        }
        
        private void EntityAttachWithoutChangingStateSubEntitiesBody(WAQSWorkshopClient.Order entity, WAQSWorkshopClient.Order entityInCache)
        {
            if (entity == entityInCache)
                return;
            if (entity.Customer != null)
            {
                WAQSWorkshopClient.Customer parentEntityInCache;
                if (CustomersInternal.Contains(entity.Customer))
                    parentEntityInCache = entity.Customer;
                else
                    parentEntityInCache = AttachWithoutChangingState(entity.Customer, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
                if (entityInCache != null)
                    entityInCache.Customer = parentEntityInCache;
            }
            else if (! (entityInCache == null || entityInCache.CustomerId == null))
            {
                WAQSWorkshopClient.Customer parentEntityInCache;
                if (CustomersDico.TryGetValue(new CustomerKeys { Id = entityInCache.CustomerId }, out parentEntityInCache))
                {
                    entityInCache.Customer = parentEntityInCache;
                }
            }
            if (entity.Employee != null)
            {
                WAQSWorkshopClient.Employee parentEntityInCache;
                if (EmployeesInternal.Contains(entity.Employee))
                    parentEntityInCache = entity.Employee;
                else
                    parentEntityInCache = AttachWithoutChangingState(entity.Employee, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
                if (entityInCache != null)
                    entityInCache.Employee = parentEntityInCache;
            }
            else if (! (entityInCache == null || entityInCache.EmployeeId == null))
            {
                WAQSWorkshopClient.Employee parentEntityInCache;
                if (EmployeesDico.TryGetValue(new EmployeeKeys { Id = entityInCache.EmployeeId.Value }, out parentEntityInCache))
                {
                    entityInCache.Employee = parentEntityInCache;
                }
            }
            if (entity.Invoice != null)
            {
                WAQSWorkshopClient.Invoice parentEntityInCache;
                if (InvoicesInternal.Contains(entity.Invoice))
                    parentEntityInCache = entity.Invoice;
                else
                    parentEntityInCache = AttachWithoutChangingState(entity.Invoice, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
                if (entityInCache != null)
                    entityInCache.Invoice = parentEntityInCache;
            }
            else if (! (entityInCache == null))
            {
                WAQSWorkshopClient.Invoice parentEntityInCache;
                if (InvoicesDico.TryGetValue(new InvoiceKeys { OrderId = entityInCache.Id }, out parentEntityInCache))
                {
                    entityInCache.Invoice = parentEntityInCache;
                }
            }
            foreach (var subEntity in entity.OrderDetails.ToList())
            {
                WAQSWorkshopClient.OrderDetail subEntityInCache;
                if (OrderDetails.Contains(subEntity))
                    subEntityInCache = subEntity;
                else
                    subEntityInCache = AttachWithoutChangingState(subEntity, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
    			if (!(entityInCache == null || entityInCache == entity || entityInCache.OrderDetails.Contains(subEntityInCache)))
                    entityInCache.OrderDetails.Add(subEntityInCache);
            }
            if (entityInCache != null)
            {
                List<WAQSWorkshopClient.OrderDetail> subEntities;
                if (OrderDetailsOrderFKsDico.TryGetValue(new OrderKeys { Id = entity.Id }, out subEntities))
                    foreach (var subEntity in subEntities)
                    {
                        if (subEntity.Order == null)
                            ((ITrackableCollection<OrderDetail>)entityInCache.OrderDetails).AttachWithoutCheckingIfAlreadyExist(subEntity);
                    }
            }
        }
    
        private WAQSWorkshopClient.Order GetEntityInCache(WAQSWorkshopClient.Order entity, bool includingDeleted = false, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            WAQSWorkshopClient.Order value;
            if (! (applyDataTransfer && OrdersDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out value)) && (! OrdersDico.TryGetValue(new OrderKeys { Id = entity.Id }, out value) || value.ChangeTracker.State == ObjectState.Detached || ! includingDeleted && value.ChangeTracker.State == ObjectState.Deleted) && ! (entity.HasTemporaryKey && OrdersAddedDico.TryGetValue(entity.EntityKey, out value)))
                return null;
            return value;
        }
    
        protected override WAQSWorkshopClient.Order GetEntity(WAQSWorkshopClient.Order entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
        {
            return GetEntity(entity, applyState, mergeOption, true, applyDataTransfer: applyDataTransfer);
        }
        private WAQSWorkshopClient.Order GetEntity(WAQSWorkshopClient.Order entity, bool applyState, MergeOption? mergeOption = null, bool includingDeleted = false, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            object entityGot;
            if (EntitiesGot.TryGetValue(entity, out entityGot))
                return (WAQSWorkshopClient.Order)entityGot;
    
            if (mergeOption == null)
                mergeOption = MergeOption;
    
            if (mergeOption == MergeOption.NoTracking)
                return entity;
    
            if (OrdersInternal.Contains(entity))
                return entity;
    
            entity.IsDeserializing = true;
    
            includingDeleted |= applyState;
    
            var entityCustomer = entity.Customer;
            entity.Customer = null;
            var entityEmployee = entity.Employee;
            entity.Employee = null;
            var entityInvoice = entity.Invoice;
            entity.Invoice = null;
            var entityOrderDetails = entity.OrderDetails.ToList();
            entity.OrderDetails.Clear();
    
            WAQSWorkshopClient.Order value;
            var entityInCache = GetEntityInCache(entity, includingDeleted, applyDataTransfer);
            ObjectChangeTracker originalChangeTracker = entity.ChangeTracker;
            if (entityInCache == null)
            {
                var originalState = entity.ChangeTracker.State;
                entity.ChangeTracker = null;
                if (entity.ChangeTracker.State == ObjectState.Detached)
                    entity.ResetEntityKey();
                entity.IsDeserializing = false;
                var state = originalState == ObjectState.Detached ? defaultState : originalState;
                switch(state)
                {
                    case ObjectState.Added:
                        OrdersInternal.AddWithoutCheckingIfAlreadyExist(entity);
                        break;
                    default:
                        entity.IsInitializingRelationships = true;
                        OrdersInternal.AttachWithoutCheckingIfAlreadyExist(entity);
                        entity.IsInitializingRelationships = false;
                        break;
                }
                if (applyState)
                    entity.ChangeTracker.State = state;
                value = entity;
            }
            else
            {
                switch (mergeOption)
                {
                    case MergeOption.AppendOnly:
                        RefreshNewLoadedProperties(entityInCache, entity);
                        value = entityInCache;
                        break;
                    case MergeOption.OverwriteChanges:
                        RefreshCurrentValues(entityInCache, entity, applyState: applyState);
                        value = entityInCache;
                        break;
                    case MergeOption.PreserveChanges:
                        RefreshOriginalValues(entityInCache, entity);
                        value = entityInCache;
                        break;
                    default: 
                        throw new NotImplementedException();
                }
                if (applyState)
                {
                    switch(entity.ChangeTracker.State)
                    {
                        case ObjectState.Detached:
                            Orders.Detach(value);
                            break;
                        case ObjectState.Deleted:
                            Orders.Remove(value);
                            break;
                        default:
                            value.ChangeTracker.State = entity.ChangeTracker.State;
                            break;
                    }
                }
            }
            EntitiesGot.Add(entity, value);
            if (! entity.IsInitializingRelationships)
            {
                entity.IsInitializingRelationships = true;
                value.IsInitializingRelationships = true;
    
                if (entityCustomer != null)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(entityCustomer, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Customer = GetEntity(entityCustomer, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer);
                }
                if (entityEmployee != null)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(entityEmployee, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Employee = GetEntity(entityEmployee, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer);
                }
                if (entityInvoice != null)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(entityInvoice, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Invoice = GetEntity(entityInvoice, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer);
                }
                foreach (var e in entityOrderDetails)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(e, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.OrderDetails.Add(GetEntity(e, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer));
                }
    
                if (applyState && originalChangeTracker != null && originalChangeTracker != value.ChangeTracker)
                {
                    foreach (var modifiedProperty in originalChangeTracker.ModifiedProperties)
                        if (! value.ChangeTracker.ModifiedProperties.Contains(modifiedProperty))
                            value.ChangeTracker.ModifiedProperties.Add(modifiedProperty);
                    foreach (var originalValue in originalChangeTracker.OriginalValues)
                    {
                        var originalValueEntity = originalValue.Value as IEntity;
                        if (originalValueEntity != null) 
                        {
                            var originalState = originalValueEntity.ChangeTracker.State;
                            IEntity originalEntity = null;
                            var ov = originalValueEntity == null ? originalValue.Value : originalEntity = GetEntity(originalValueEntity, true, defaultState, applyDataTransfer) as IEntity;
                            if (value.ChangeTracker.State != ObjectState.Detached)
                                value.ChangeTracker.RecordOriginalValue(originalValue.Key, ov);
                            if (originalValueEntity != null && originalState == ObjectState.Detached)
                                Detach(originalEntity);
                        }
                    }
                    foreach (var objectsRemovedToCollectionProperties in originalChangeTracker.ObjectsRemovedFromCollectionProperties)
                        foreach (IEntity objectsRemovedToCollectionProperty in objectsRemovedToCollectionProperties.Value)
                            if (objectsRemovedToCollectionProperty != null)
                            {
                                var originalState = objectsRemovedToCollectionProperty.ChangeTracker.State;
                                IObjectWithChangeTracker removedEntity = (IObjectWithChangeTracker)GetEntity(objectsRemovedToCollectionProperty, true, defaultState, applyDataTransfer);
                                switch (objectsRemovedToCollectionProperties.Key)
                                {
                                    case "OrderDetails":
                                            value.OrderDetails.Remove((WAQSWorkshopClient.OrderDetail)removedEntity);
                                            break;
                                }
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordRemovalFromCollectionProperties(objectsRemovedToCollectionProperties.Key, removedEntity);
                                if (originalState == ObjectState.Detached)
                                    Detach(removedEntity);
                            }
                    foreach (var objectsAddedToCollectionProperties in originalChangeTracker.ObjectsAddedToCollectionProperties)
                        foreach (var objectsAddedToCollectionProperty in objectsAddedToCollectionProperties.Value)
                            if (objectsAddedToCollectionProperty != null)
                            {
                                var addedEntity = (IObjectWithChangeTracker)GetEntity(objectsAddedToCollectionProperty, true, defaultState, applyDataTransfer);
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordAdditionToCollectionProperties(objectsAddedToCollectionProperties.Key, addedEntity);
                            }
                }
    
                value.IsInitializingRelationships = false;
            }
            value.ChangeTracker.ChangeTrackingEnabled = true;
            return value;
        } 
    
        private WAQSWorkshopClient.Order AttachWithoutChangingState(WAQSWorkshopClient.Order entity, ObjectState? defaultState = null)
        {
            if (OrdersInternal.Contains(entity))
                return entity;
            var entityIncludingCache = Init ? GetEntityInCache(entity) ?? entity : entity;
            if (OrdersInternal.AttachWithoutChangingState(entityIncludingCache, defaultState))
                EntityAttachWithoutChangingStateSubEntities(entity);
            return entityIncludingCache;
        }
    
        public void RefreshNewLoadedProperties(WAQSWorkshopClient.Order entityInCache, WAQSWorkshopClient.Order entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            entityInCache.IsDeserializing = isDeserializing;
        }
    
        public void RefreshCurrentValues(WAQSWorkshopClient.Order entityInCache, WAQSWorkshopClient.Order entity)
        {
            RefreshCurrentValues(entityInCache, entity, false);
        }
        public void RefreshCurrentValues(WAQSWorkshopClient.Order entityInCache, WAQSWorkshopClient.Order entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            if (entityInCache.Id != entity.Id)
                entityInCache.Id = entity.Id;
            if (entityInCache.CustomerId != entity.CustomerId)
                entityInCache.CustomerId = entity.CustomerId;
            if (entityInCache.EmployeeId != entity.EmployeeId)
                entityInCache.EmployeeId = entity.EmployeeId;
            if (entityInCache.OrderDate != entity.OrderDate)
                entityInCache.OrderDate = entity.OrderDate;
            if (entityInCache.RequiredDate != entity.RequiredDate)
                entityInCache.RequiredDate = entity.RequiredDate;
            if (entityInCache.ShippedDate != entity.ShippedDate)
                entityInCache.ShippedDate = entity.ShippedDate;
            if (entityInCache.ShipVia != entity.ShipVia)
                entityInCache.ShipVia = entity.ShipVia;
            if (entityInCache.Freight != entity.Freight)
                entityInCache.Freight = entity.Freight;
            if (entityInCache.ShipName != entity.ShipName)
                entityInCache.ShipName = entity.ShipName;
            if (entityInCache.ShipAddress != entity.ShipAddress)
                entityInCache.ShipAddress = entity.ShipAddress;
            if (entityInCache.ShipCity != entity.ShipCity)
                entityInCache.ShipCity = entity.ShipCity;
            if (entityInCache.ShipRegion != entity.ShipRegion)
                entityInCache.ShipRegion = entity.ShipRegion;
            if (entityInCache.ShipPostalCode != entity.ShipPostalCode)
                entityInCache.ShipPostalCode = entity.ShipPostalCode;
            if (entityInCache.ShipCountry != entity.ShipCountry)
                entityInCache.ShipCountry = entity.ShipCountry;
            entityInCache.IsDeserializing = isDeserializing;
            if (applyState)
            {
                entityInCache.ChangeTracker.State = entity.ChangeTracker.State;
                entityInCache.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties;
            }
            else
            {
                entityInCache.ChangeTracker.AcceptChanges();
                entityInCache.ChangeTracker.ModifiedProperties.Clear();
            }
        }
    
        private void RefreshOriginalValues(WAQSWorkshopClient.Order entityInCache, WAQSWorkshopClient.Order entity)
        {
            if (! (entityInCache.CustomerId == entity.CustomerId || entityInCache.ChangeTracker.ModifiedProperties.Contains("CustomerId")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("CustomerId");
            if (! (entityInCache.EmployeeId == entity.EmployeeId || entityInCache.ChangeTracker.ModifiedProperties.Contains("EmployeeId")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("EmployeeId");
            if (! (entityInCache.OrderDate == entity.OrderDate || entityInCache.ChangeTracker.ModifiedProperties.Contains("OrderDate")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("OrderDate");
            if (! (entityInCache.RequiredDate == entity.RequiredDate || entityInCache.ChangeTracker.ModifiedProperties.Contains("RequiredDate")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("RequiredDate");
            if (! (entityInCache.ShippedDate == entity.ShippedDate || entityInCache.ChangeTracker.ModifiedProperties.Contains("ShippedDate")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("ShippedDate");
            if (! (entityInCache.ShipVia == entity.ShipVia || entityInCache.ChangeTracker.ModifiedProperties.Contains("ShipVia")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("ShipVia");
            if (! (entityInCache.Freight == entity.Freight || entityInCache.ChangeTracker.ModifiedProperties.Contains("Freight")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Freight");
            if (! (entityInCache.ShipName == entity.ShipName || entityInCache.ChangeTracker.ModifiedProperties.Contains("ShipName")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("ShipName");
            if (! (entityInCache.ShipAddress == entity.ShipAddress || entityInCache.ChangeTracker.ModifiedProperties.Contains("ShipAddress")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("ShipAddress");
            if (! (entityInCache.ShipCity == entity.ShipCity || entityInCache.ChangeTracker.ModifiedProperties.Contains("ShipCity")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("ShipCity");
            if (! (entityInCache.ShipRegion == entity.ShipRegion || entityInCache.ChangeTracker.ModifiedProperties.Contains("ShipRegion")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("ShipRegion");
            if (! (entityInCache.ShipPostalCode == entity.ShipPostalCode || entityInCache.ChangeTracker.ModifiedProperties.Contains("ShipPostalCode")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("ShipPostalCode");
            if (! (entityInCache.ShipCountry == entity.ShipCountry || entityInCache.ChangeTracker.ModifiedProperties.Contains("ShipCountry")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("ShipCountry");
        }
    
        private WAQSWorkshopClient.Order ReduceToKey(WAQSWorkshopClient.Order entity)
        {
            WAQSWorkshopClient.Order value = new WAQSWorkshopClient.Order { Id = entity.Id };
            return value;
        }
    
        private WAQSWorkshopClient.Order ReduceToModifications(WAQSWorkshopClient.Order entity)
        {
            WAQSWorkshopClient.Order value = new WAQSWorkshopClient.Order { Id = entity.Id };
            value.ChangeTracker.Saving = true;
            value.ChangeTracker.ChangeTrackingEnabled = true;
            value.ChangeTracker.State = entity.ChangeTracker.State;
            switch (entity.ChangeTracker.State)
            {
                case ObjectState.Added:
                    value.CustomerId = entity.CustomerId;
                    value.EmployeeId = entity.EmployeeId;
                    value.OrderDate = entity.OrderDate;
                    value.RequiredDate = entity.RequiredDate;
                    value.ShippedDate = entity.ShippedDate;
                    value.ShipVia = entity.ShipVia;
                    value.Freight = entity.Freight;
                    value.ShipName = entity.ShipName;
                    value.ShipAddress = entity.ShipAddress;
                    value.ShipCity = entity.ShipCity;
                    value.ShipRegion = entity.ShipRegion;
                    value.ShipPostalCode = entity.ShipPostalCode;
                    value.ShipCountry = entity.ShipCountry;
    				break;
                case ObjectState.Deleted:
                    value.ChangeTracker.ChangeTrackingEnabled = false;
                                value.CustomerId = entity.CustomerId;
                                value.EmployeeId = entity.EmployeeId;
                    value.OrderDate = default(System.DateTime); 
                    value.RequiredDate = default(Nullable<System.DateTime>); 
                    value.ShippedDate = default(Nullable<System.DateTime>); 
                    value.ShipVia = default(Nullable<int>); 
                    value.Freight = default(Nullable<decimal>); 
                    value.ShipName = default(string); 
                    value.ShipAddress = default(string); 
                    value.ShipCity = default(string); 
                    value.ShipRegion = default(string); 
                    value.ShipPostalCode = default(string); 
                    value.ShipCountry = default(string); 
    				break;
                case ObjectState.Modified:
                    value.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties.ToList();
                    value.CustomerId = entity.CustomerId;
                    value.EmployeeId = entity.EmployeeId;
                    foreach (var modifiedPropery in entity.ChangeTracker.ModifiedProperties.Union(entity.ChangeTracker.ValidationProperties))
                        switch (modifiedPropery)
                        {
                            case "OrderDate":
                                value.OrderDate = entity.OrderDate;
                                break;
                            case "RequiredDate":
                                value.RequiredDate = entity.RequiredDate;
                                break;
                            case "ShippedDate":
                                value.ShippedDate = entity.ShippedDate;
                                break;
                            case "ShipVia":
                                value.ShipVia = entity.ShipVia;
                                break;
                            case "Freight":
                                value.Freight = entity.Freight;
                                break;
                            case "ShipName":
                                value.ShipName = entity.ShipName;
                                break;
                            case "ShipAddress":
                                value.ShipAddress = entity.ShipAddress;
                                break;
                            case "ShipCity":
                                value.ShipCity = entity.ShipCity;
                                break;
                            case "ShipRegion":
                                value.ShipRegion = entity.ShipRegion;
                                break;
                            case "ShipPostalCode":
                                value.ShipPostalCode = entity.ShipPostalCode;
                                break;
                            case "ShipCountry":
                                value.ShipCountry = entity.ShipCountry;
                                break;
                        }
                    break;
                case ObjectState.Unchanged:
                case ObjectState.CascadeDeleted:
                    break;
                default: //case ObjectState.Detached:
                    throw new InvalidOperationException();
            }
            return value;
        }
    
        private void ReduceNavigationProperties(WAQSWorkshopClient.Order originalValue, WAQSWorkshopClient.Order newValue, Dictionary<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer> reducedCustomersDictionary, Dictionary<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee> reducedEmployeesDictionary, Dictionary<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice> reducedInvoicesDictionary, Dictionary<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.OrderDetail> reducedOrderDetailsDictionary)
        {
            newValue.ChangeTracker.ObjectsAddedToCollectionProperties.Clear();
            newValue.ChangeTracker.ObjectsRemovedFromCollectionProperties.Clear();
            newValue.ChangeTracker.OriginalValues.Clear();
            foreach (var relatedEntity in originalValue.ChangeTracker.OriginalValues)
            {
                if (relatedEntity.Value == null)
                    continue;
                switch (relatedEntity.Key)
                {
    				case "Customer":
                        var customerCustomerParentEntity = (WAQSWorkshopClient.Customer)relatedEntity.Value;
                        WAQSWorkshopClient.Customer newCustomerCustomerParentEntity;
                        if (reducedCustomersDictionary.TryGetValue(customerCustomerParentEntity, out newCustomerCustomerParentEntity))
                        {
    						
                            newValue.ChangeTracker.OriginalValues.Add("Customer", newCustomerCustomerParentEntity);
                            WAQS.EntitiesTracking.ObjectList customerCustomerParentEntityObjectList;
                            if (!newCustomerCustomerParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("Orders", out customerCustomerParentEntityObjectList))
                            {
                                customerCustomerParentEntityObjectList = new WAQS.EntitiesTracking.ObjectList();
                                newCustomerCustomerParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Add("Orders", customerCustomerParentEntityObjectList);
                            }
                            customerCustomerParentEntityObjectList.Add(newValue);
                        }
                        newValue.CustomerId = originalValue.CustomerId;
                    break;
    				case "Employee":
                        var employeeEmployeeParentEntity = (WAQSWorkshopClient.Employee)relatedEntity.Value;
                        WAQSWorkshopClient.Employee newEmployeeEmployeeParentEntity;
                        if (reducedEmployeesDictionary.TryGetValue(employeeEmployeeParentEntity, out newEmployeeEmployeeParentEntity))
                        {
    						
                            newValue.ChangeTracker.OriginalValues.Add("Employee", newEmployeeEmployeeParentEntity);
                            WAQS.EntitiesTracking.ObjectList employeeEmployeeParentEntityObjectList;
                            if (!newEmployeeEmployeeParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("Orders", out employeeEmployeeParentEntityObjectList))
                            {
                                employeeEmployeeParentEntityObjectList = new WAQS.EntitiesTracking.ObjectList();
                                newEmployeeEmployeeParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Add("Orders", employeeEmployeeParentEntityObjectList);
                            }
                            employeeEmployeeParentEntityObjectList.Add(newValue);
                        }
                        newValue.EmployeeId = originalValue.EmployeeId;
                    break;
                    case "CustomerId":
                    case "EmployeeId":
                        if (! newValue.ChangeTracker.OriginalValues.ContainsKey(relatedEntity.Key))
                            newValue.ChangeTracker.OriginalValues.Add(relatedEntity.Key, relatedEntity.Value);
                    break;
                }
            }
            if (originalValue.ChangeTracker.State != ObjectState.Unchanged)
            {
                if (originalValue.Customer != null)
                {
                    WAQSWorkshopClient.Customer relatedEntity;
                    if (reducedCustomersDictionary.TryGetValue(originalValue.Customer, out relatedEntity))
                    {
                        if (newValue.Customer != relatedEntity)
                            newValue.Customer = relatedEntity;
                    }
                    else
                    {
                        newValue.CustomerId = originalValue.CustomerId;
                    }
                }
                if (originalValue.Employee != null)
                {
                    WAQSWorkshopClient.Employee relatedEntity;
                    if (reducedEmployeesDictionary.TryGetValue(originalValue.Employee, out relatedEntity))
                    {
                        if (newValue.Employee != relatedEntity)
                            newValue.Employee = relatedEntity;
                    }
                    else
                    {
                        newValue.EmployeeId = originalValue.EmployeeId;
                    }
                }
                if (originalValue.Invoice != null)
                {
                    WAQSWorkshopClient.Invoice relatedEntity;
                    if (reducedInvoicesDictionary.TryGetValue(originalValue.Invoice, out relatedEntity))
                    {
                        if (newValue.Invoice != relatedEntity)
                            newValue.Invoice = relatedEntity;
                    }
                }
                foreach (var subEntity in originalValue.OrderDetails.Where(se => se.ChangeTracker.State != ObjectState.Unchanged))
                {
                    var relatedEntity = reducedOrderDetailsDictionary[subEntity]; 
                    if (! newValue.OrderDetails.Contains(relatedEntity))
                    {
                        ObjectList objectsAddedToCollectionProperties;
                        if (newValue.ChangeTracker.State == ObjectState.Added || relatedEntity.ChangeTracker.State == ObjectState.Added || originalValue.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("OrderDetails", out objectsAddedToCollectionProperties) && objectsAddedToCollectionProperties.Contains(subEntity))
                            newValue.OrderDetails.Add(relatedEntity);
                        else
                            newValue.OrderDetails.Attach(relatedEntity, true);
                    }
                }
    			
            }
        }
    
        private void RefreshComputedValues(WAQSWorkshopClient.Order entity, WAQSWorkshopClient.Order dbEntity)
        {
            if (entity.HasTemporaryKey)
            {
                OrdersDico.Add(new OrderKeys { Id = dbEntity.Id }, entity);
                RemoveOrdersAddedDico(entity);
            }						
            if (dbEntity.HasTemporaryKey)
            {
                entity.Id = dbEntity.Id;
            }
            entity.IsDeserializing = true;
            if (dbEntity.Employee != null && dbEntity.Employee.ChangeTracker.State == ObjectState.Added)
                entity.EmployeeId = dbEntity.EmployeeId;
            if (dbEntity.Invoice != null && dbEntity.Invoice.ChangeTracker.State == ObjectState.Added)
                entity.Id = dbEntity.Id;
            entity.IsDeserializing = false;
            entity.ResetEntityKey();
        }
    
        private void DisposeOrder()
        {
            if (_orders != null)
            {
                foreach (var entity in _orders.AllEntities.ToList())
                {
                    entity.CustomerFKsChanged -= OrderCustomerFKsChanged;
                    entity.EmployeeFKsChanged -= OrderEmployeeFKsChanged;
                    entity.OrderDetails.CollectionChanged -= Order_OrderDetailsCollectionChanged;
                    entity.NavigationPropertyChanged -= OrderNavigationPropertyChanged;
                    EntityDetached(entity);
                }
                _orders.EntityAdded -= EntityAddedOrAttached;
                _orders.EntityAttached -= EntityAddedOrAttached;
                _orders.EntityReplaced -= EntityReplaced;
                _orders.EntityDetached -= EntityDetached;
            }
        }
    
        private Dictionary<OrderDetailKeys, WAQSWorkshopClient.OrderDetail> _orderDetailsDico;
        private Dictionary<OrderDetailKeys, WAQSWorkshopClient.OrderDetail> OrderDetailsDico
        {
            get { return _orderDetailsDico ?? (_orderDetailsDico = new Dictionary<OrderDetailKeys, WAQSWorkshopClient.OrderDetail>()); }
        }
    
        private Dictionary<Guid, WAQSWorkshopClient.OrderDetail> _orderDetailsDataTransferDico;
        private Dictionary<Guid, WAQSWorkshopClient.OrderDetail> OrderDetailsDataTransferDico
        {
            get { return _orderDetailsDataTransferDico ?? (_orderDetailsDataTransferDico = new Dictionary<Guid, WAQSWorkshopClient.OrderDetail>()); }
        }
    
        private Dictionary<string, WAQSWorkshopClient.OrderDetail> _orderDetailsAddedDico;
        private Dictionary<string, WAQSWorkshopClient.OrderDetail> OrderDetailsAddedDico
        {
            get { return _orderDetailsAddedDico ?? (_orderDetailsAddedDico = new Dictionary<string, WAQSWorkshopClient.OrderDetail>()); }
        }
        private void AddOrderDetailsAddedDico(WAQSWorkshopClient.OrderDetail entity)
        {
            OrderDetailsAddedDico.Add(entity.EntityKey, entity);
            entity.EntityKeyChanged += ResetEntityKey;
        }
        private void RemoveOrderDetailsAddedDico(WAQSWorkshopClient.OrderDetail entity)
        {
            OrderDetailsAddedDico.Remove(entity.EntityKey);
            entity.EntityKeyChanged -= ResetEntityKey;
        }
    
        private void ResetEntityKey(WAQSWorkshopClient.OrderDetail entity, string oldEntityKey)
        {
            if (entity.HasTemporaryKey)
            {
                if (entity.EntityKey != oldEntityKey)
                {
                    if (oldEntityKey != null)
                        OrderDetailsAddedDico.Remove(oldEntityKey);
                    OrderDetailsAddedDico.Add(entity.EntityKey, entity);
                }
            }
            else
            {
                OrderDetailsAddedDico.Remove(oldEntityKey);
                entity.EntityKeyChanged -= ResetEntityKey;
                OrderDetailsDico.Add(new OrderDetailKeys { Id = entity.Id }, entity);
            }
        }
        public IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.OrderDetail> OrderDetails 
        { 
            get { return OrderDetailsInternal; }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.OrderDetail> OrderDetailsInternal
        {
            get
            {
                if (_orderDetails == null)
                {
                    _orderDetails = new ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.OrderDetail>("OrderDetails", this, e => new OrderDetailKeys { Id = e.Id });
                    _orderDetails.EntityAdded += EntityAddedOrAttached;
                    _orderDetails.EntityAttached += EntityAddedOrAttached;
                    _orderDetails.EntityReplaced += EntityReplaced;
                    _orderDetails.EntityDetached += EntityDetached;
                }
                return _orderDetails;
            }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.OrderDetail> _orderDetails;
        private Dictionary<InvoiceDetailKeys, List<WAQSWorkshopClient.OrderDetail>> _orderDetailsInvoiceDetailFKsDico;
        private Dictionary<InvoiceDetailKeys, List<WAQSWorkshopClient.OrderDetail>> OrderDetailsInvoiceDetailFKsDico
        {
            get { return _orderDetailsInvoiceDetailFKsDico ?? (_orderDetailsInvoiceDetailFKsDico = new Dictionary<InvoiceDetailKeys, List<WAQSWorkshopClient.OrderDetail>>()); }
        }
        private Dictionary<OrderKeys, List<WAQSWorkshopClient.OrderDetail>> _orderDetailsOrderFKsDico;
        private Dictionary<OrderKeys, List<WAQSWorkshopClient.OrderDetail>> OrderDetailsOrderFKsDico
        {
            get { return _orderDetailsOrderFKsDico ?? (_orderDetailsOrderFKsDico = new Dictionary<OrderKeys, List<WAQSWorkshopClient.OrderDetail>>()); }
        }
        private Dictionary<ProductKeys, List<WAQSWorkshopClient.OrderDetail>> _orderDetailsProductFKsDico;
        private Dictionary<ProductKeys, List<WAQSWorkshopClient.OrderDetail>> OrderDetailsProductFKsDico
        {
            get { return _orderDetailsProductFKsDico ?? (_orderDetailsProductFKsDico = new Dictionary<ProductKeys, List<WAQSWorkshopClient.OrderDetail>>()); }
        }
    
        private void EntityAddedOrAttached(WAQSWorkshopClient.OrderDetail entity)
        {
    
            ClientEntitySetExtensions.AddEntityInDico(OrderDetails, entity);
            OrderDetail entityTmp;
            if (OrderDetailsDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out entityTmp))
            {
                if (entityTmp == entity)
                    new InvalidOperationException();
            }
            else
                OrderDetailsDataTransferDico.Add(entity.DataTransferEntityKey, entity);		
            if (entity.HasTemporaryKey)
            {
                WAQSWorkshopClient.OrderDetail entityInAddedDico;
                if (! OrderDetailsAddedDico.TryGetValue(entity.EntityKey, out entityInAddedDico))
                    AddOrderDetailsAddedDico(entity);
                else if (entityInAddedDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                entity.NavigationPropertyChanged += OrderDetailNavigationPropertyChanged;
                EntityAttachWithoutChangingStateSubEntities(entity);
            }
            else
            {
                var orderDetailKeys = new OrderDetailKeys { Id = entity.Id };
                WAQSWorkshopClient.OrderDetail entityInDico;
                if (! OrderDetailsDico.TryGetValue(orderDetailKeys, out entityInDico))
                    OrderDetailsDico.Add(orderDetailKeys, entity);
                else if (entityInDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                entity.NavigationPropertyChanged += OrderDetailNavigationPropertyChanged;
                EntityAttachWithoutChangingStateSubEntities(entity);
            }
    
            if (! (entity.InvoiceDetail == null || InvoiceDetailsInternal.Contains(entity.InvoiceDetail)))
                InvoiceDetailsInternal.AttachWithoutChangingState(entity.InvoiceDetail, entity.ChangeTracker.State);
    
            var orderDetailsInvoiceDetailKeys = new InvoiceDetailKeys { OrderDetailId = entity.Id };
            List<WAQSWorkshopClient.OrderDetail> orderDetailsInvoiceDetailEntities;
            if (! OrderDetailsInvoiceDetailFKsDico.TryGetValue(orderDetailsInvoiceDetailKeys, out orderDetailsInvoiceDetailEntities))
                OrderDetailsInvoiceDetailFKsDico.Add(orderDetailsInvoiceDetailKeys, orderDetailsInvoiceDetailEntities = new List<WAQSWorkshopClient.OrderDetail>());
            orderDetailsInvoiceDetailEntities.Add(entity);
    
            WAQSWorkshopClient.InvoiceDetail invoiceDetail;
            if (InvoiceDetailsDico.TryGetValue(orderDetailsInvoiceDetailKeys, out invoiceDetail))
                entity.InvoiceDetail = invoiceDetail;
    
            if (! (entity.Order == null || OrdersInternal.Contains(entity.Order)))
                OrdersInternal.AttachWithoutChangingState(entity.Order, entity.ChangeTracker.State);
    
            var orderDetailsOrderKeys = new OrderKeys { Id = entity.OrderId };
            List<WAQSWorkshopClient.OrderDetail> orderDetailsOrderEntities;
            if (! OrderDetailsOrderFKsDico.TryGetValue(orderDetailsOrderKeys, out orderDetailsOrderEntities))
                OrderDetailsOrderFKsDico.Add(orderDetailsOrderKeys, orderDetailsOrderEntities = new List<WAQSWorkshopClient.OrderDetail>());
            orderDetailsOrderEntities.Add(entity);
    
            WAQSWorkshopClient.Order order;
            if (OrdersDico.TryGetValue(orderDetailsOrderKeys, out order))
                entity.Order = order;
            entity.OrderFKsChanged += OrderDetailOrderFKsChanged;
    
            if (! (entity.Product == null || ProductsInternal.Contains(entity.Product)))
                ProductsInternal.AttachWithoutChangingState(entity.Product, entity.ChangeTracker.State);
    
            var orderDetailsProductKeys = new ProductKeys { Id = entity.ProductId };
            List<WAQSWorkshopClient.OrderDetail> orderDetailsProductEntities;
            if (! OrderDetailsProductFKsDico.TryGetValue(orderDetailsProductKeys, out orderDetailsProductEntities))
                OrderDetailsProductFKsDico.Add(orderDetailsProductKeys, orderDetailsProductEntities = new List<WAQSWorkshopClient.OrderDetail>());
            orderDetailsProductEntities.Add(entity);
    
            WAQSWorkshopClient.Product product;
            if (ProductsDico.TryGetValue(orderDetailsProductKeys, out product))
                entity.Product = product;
            entity.ProductFKsChanged += OrderDetailProductFKsChanged;
            entity.IsInitializingRelationships = false;
        }
    
        private void EntityReplaced(WAQSWorkshopClient.OrderDetail entityInEntitySet, WAQSWorkshopClient.OrderDetail entity)
        {
            EntityReplacedInternal(entityInEntitySet, entity);
        }
        private void EntityReplacedInternal(WAQSWorkshopClient.OrderDetail entityInEntitySet, WAQSWorkshopClient.OrderDetail entity)
        {
            if (entityInEntitySet.OrderId != entity.OrderId)
                entityInEntitySet.OrderId = entity.OrderId;
            if (entityInEntitySet.ProductId != entity.ProductId)
                entityInEntitySet.ProductId = entity.ProductId;
            if (entityInEntitySet.UnitPrice != entity.UnitPrice)
                entityInEntitySet.UnitPrice = entity.UnitPrice;
            if (entityInEntitySet.Quantity != entity.Quantity)
                entityInEntitySet.Quantity = entity.Quantity;
            if (entityInEntitySet.Discount != entity.Discount)
                entityInEntitySet.Discount = entity.Discount;
        }
    
        private void OrderDetailOrderFKsChanged(WAQSWorkshopClient.OrderDetail entity, int oldOrderId, int newOrderId)
        {
            OrderKeys oldOrderDetailsOrderKeys = new OrderKeys { Id = oldOrderId };
            OrderKeys newOrderDetailsOrderKeys = new OrderKeys { Id = newOrderId };
            List<WAQSWorkshopClient.OrderDetail> newCollection;
            if (! OrderDetailsOrderFKsDico.TryGetValue(newOrderDetailsOrderKeys, out newCollection))
                OrderDetailsOrderFKsDico.Add(newOrderDetailsOrderKeys, newCollection = new List<WAQSWorkshopClient.OrderDetail>());
            newCollection.Add(entity);
    
            WAQSWorkshopClient.Order order;
            if (OrdersDico.TryGetValue(newOrderDetailsOrderKeys, out order))
                entity.Order = order;
            List<WAQSWorkshopClient.OrderDetail> oldCollection;
            if (OrderDetailsOrderFKsDico.TryGetValue(oldOrderDetailsOrderKeys, out oldCollection))
            {
                oldCollection.Remove(entity);
                if (oldCollection.Count == 0)
                    OrderDetailsOrderFKsDico.Remove(oldOrderDetailsOrderKeys);
            }
        }
    
        private void OrderDetailProductFKsChanged(WAQSWorkshopClient.OrderDetail entity, int oldProductId, int newProductId)
        {
            ProductKeys oldOrderDetailsProductKeys = new ProductKeys { Id = oldProductId };
            ProductKeys newOrderDetailsProductKeys = new ProductKeys { Id = newProductId };
            List<WAQSWorkshopClient.OrderDetail> newCollection;
            if (! OrderDetailsProductFKsDico.TryGetValue(newOrderDetailsProductKeys, out newCollection))
                OrderDetailsProductFKsDico.Add(newOrderDetailsProductKeys, newCollection = new List<WAQSWorkshopClient.OrderDetail>());
            newCollection.Add(entity);
    
            WAQSWorkshopClient.Product product;
            if (ProductsDico.TryGetValue(newOrderDetailsProductKeys, out product))
                entity.Product = product;
            List<WAQSWorkshopClient.OrderDetail> oldCollection;
            if (OrderDetailsProductFKsDico.TryGetValue(oldOrderDetailsProductKeys, out oldCollection))
            {
                oldCollection.Remove(entity);
                if (oldCollection.Count == 0)
                    OrderDetailsProductFKsDico.Remove(oldOrderDetailsProductKeys);
            }
        }
    
        private void OrderDetailNavigationPropertyChanged(OrderDetail sender, string propertyName)
        {
            var entity = sender;
            if (propertyName == "InvoiceDetail" && entity.InvoiceDetail != null)
            {
                if (! InvoiceDetails.Contains(entity.InvoiceDetail))
                    AttachWithoutChangingState(entity.InvoiceDetail);
            }
            else if (new [] { "Id" }.Contains(propertyName))
            {
                var parentEntityInCache = InvoiceDetails.FirstOrDefault(pe => pe.OrderDetailId == entity.Id);
                if (parentEntityInCache != null && parentEntityInCache.OrderDetailId != 0)
                    entity.InvoiceDetail = parentEntityInCache;					
            }
            else if (propertyName == "Order" && entity.Order != null)
            {
                if (! Orders.Contains(entity.Order))
                    AttachWithoutChangingState(entity.Order);
            }
            else if (new [] { "OrderId" }.Contains(propertyName))
            {
                var parentEntityInCache = Orders.FirstOrDefault(pe => pe.Id == entity.OrderId);
                if (parentEntityInCache != null && parentEntityInCache.Id != 0)
                    entity.Order = parentEntityInCache;					
            }
            else if (propertyName == "Product" && entity.Product != null)
            {
                if (! Products.Contains(entity.Product))
                    AttachWithoutChangingState(entity.Product);
            }
            else if (new [] { "ProductId" }.Contains(propertyName))
            {
                var parentEntityInCache = Products.FirstOrDefault(pe => pe.Id == entity.ProductId);
                if (parentEntityInCache != null && parentEntityInCache.Id != 0)
                    entity.Product = parentEntityInCache;					
            }
        }
    
        private void EntityDetached(WAQSWorkshopClient.OrderDetail entity)
        {
    
            OrderDetailsDataTransferDico.Remove(entity.DataTransferEntityKey);		
            if (entity.IsTemporaryKey)
                RemoveOrderDetailsAddedDico(entity);
            else
            {
                var entityKey = new OrderDetailKeys { Id = entity.Id };
                OrderDetailsDico.Remove(entityKey);
            }
            {
                List<WAQSWorkshopClient.OrderDetail> fkEntities;
                if (OrderDetailsInvoiceDetailFKsDico.TryGetValue(new InvoiceDetailKeys { OrderDetailId = entity.Id }, out fkEntities))
                    fkEntities.Remove(entity);
            }
            {
                List<WAQSWorkshopClient.OrderDetail> fkEntities;
                if (OrderDetailsOrderFKsDico.TryGetValue(new OrderKeys { Id = entity.OrderId }, out fkEntities))
                    fkEntities.Remove(entity);
            }
            {
                List<WAQSWorkshopClient.OrderDetail> fkEntities;
                if (OrderDetailsProductFKsDico.TryGetValue(new ProductKeys { Id = entity.ProductId }, out fkEntities))
                    fkEntities.Remove(entity);
            }
        
            InvoiceDetailKeys oldOrderDetailsInvoiceDetailKeys = new InvoiceDetailKeys { OrderDetailId = entity.Id };
            {
                List<WAQSWorkshopClient.OrderDetail> oldCollection;
                if (OrderDetailsInvoiceDetailFKsDico.TryGetValue(oldOrderDetailsInvoiceDetailKeys, out oldCollection))
                {
                    oldCollection.Remove(entity);
                    if (oldCollection.Count == 0)
                        OrderDetailsInvoiceDetailFKsDico.Remove(oldOrderDetailsInvoiceDetailKeys);
                }
            }
    
            OrderKeys oldOrderDetailsOrderKeys = new OrderKeys { Id = entity.OrderId };
            {
                List<WAQSWorkshopClient.OrderDetail> oldCollection;
                if (OrderDetailsOrderFKsDico.TryGetValue(oldOrderDetailsOrderKeys, out oldCollection))
                {
                    oldCollection.Remove(entity);
                    if (oldCollection.Count == 0)
                        OrderDetailsOrderFKsDico.Remove(oldOrderDetailsOrderKeys);
                }
            }
    
            ProductKeys oldOrderDetailsProductKeys = new ProductKeys { Id = entity.ProductId };
            {
                List<WAQSWorkshopClient.OrderDetail> oldCollection;
                if (OrderDetailsProductFKsDico.TryGetValue(oldOrderDetailsProductKeys, out oldCollection))
                {
                    oldCollection.Remove(entity);
                    if (oldCollection.Count == 0)
                        OrderDetailsProductFKsDico.Remove(oldOrderDetailsProductKeys);
                }
            }
    
            entity.NavigationPropertyChanged -= OrderDetailNavigationPropertyChanged;
            ClientEntitySetExtensions.RemoveEntityInDico(entity);
    		RemovePropertyDescriptorToEntity(entity);
            foreach (var subEntity in InvoiceDetailsInternal)
            {
                object originalValue;
                if (subEntity.ChangeTracker.OriginalValues.TryGetValue("OrderDetail", out originalValue) && originalValue == entity)
                    subEntity.ChangeTracker.OriginalValues.Remove("OrderDetail");
            }
            foreach (var subEntity in OrdersInternal)
            {
                ObjectList originalValues;
                if (subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("OrderDetails", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.Remove("OrderDetails");
                }
                if (subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("OrderDetails", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Remove("OrderDetails");
                }
            }
            foreach (var subEntity in ProductsInternal)
            {
                ObjectList originalValues;
                if (subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("OrderDetails", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.Remove("OrderDetails");
                }
                if (subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("OrderDetails", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Remove("OrderDetails");
                }
            }
        }
    
        
        private void EntityAttachWithoutChangingStateSubEntities(WAQSWorkshopClient.OrderDetail entity)
        {
            var entityInCache = GetEntityInCache(entity);
            bool entityInCacheIsInitializingRelationships = false;
            if (entityInCache != null)
            {
                entityInCacheIsInitializingRelationships = entityInCache.IsInitializingRelationships;
                entityInCache.IsInitializingRelationships = true;
            }
            EntityAttachWithoutChangingStateSubEntitiesBody(entity, entityInCache);
            if (entityInCache != null)
                entityInCache.IsInitializingRelationships = entityInCacheIsInitializingRelationships;
        }
        
        private void EntityAttachWithoutChangingStateSubEntitiesBody(WAQSWorkshopClient.OrderDetail entity, WAQSWorkshopClient.OrderDetail entityInCache)
        {
            if (entity == entityInCache)
                return;
            if (entity.InvoiceDetail != null)
            {
                WAQSWorkshopClient.InvoiceDetail parentEntityInCache;
                if (InvoiceDetailsInternal.Contains(entity.InvoiceDetail))
                    parentEntityInCache = entity.InvoiceDetail;
                else
                    parentEntityInCache = AttachWithoutChangingState(entity.InvoiceDetail, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
                if (entityInCache != null)
                    entityInCache.InvoiceDetail = parentEntityInCache;
            }
            else if (! (entityInCache == null))
            {
                WAQSWorkshopClient.InvoiceDetail parentEntityInCache;
                if (InvoiceDetailsDico.TryGetValue(new InvoiceDetailKeys { OrderDetailId = entityInCache.Id }, out parentEntityInCache))
                {
                    entityInCache.InvoiceDetail = parentEntityInCache;
                }
            }
            if (entity.Order != null)
            {
                WAQSWorkshopClient.Order parentEntityInCache;
                if (OrdersInternal.Contains(entity.Order))
                    parentEntityInCache = entity.Order;
                else
                    parentEntityInCache = AttachWithoutChangingState(entity.Order, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
                if (entityInCache != null)
                    entityInCache.Order = parentEntityInCache;
            }
            else if (! (entityInCache == null))
            {
                WAQSWorkshopClient.Order parentEntityInCache;
                if (OrdersDico.TryGetValue(new OrderKeys { Id = entityInCache.OrderId }, out parentEntityInCache))
                {
                    entityInCache.Order = parentEntityInCache;
                }
            }
            if (entity.Product != null)
            {
                WAQSWorkshopClient.Product parentEntityInCache;
                if (ProductsInternal.Contains(entity.Product))
                    parentEntityInCache = entity.Product;
                else
                    parentEntityInCache = AttachWithoutChangingState(entity.Product, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
                if (entityInCache != null)
                    entityInCache.Product = parentEntityInCache;
            }
            else if (! (entityInCache == null))
            {
                WAQSWorkshopClient.Product parentEntityInCache;
                if (ProductsDico.TryGetValue(new ProductKeys { Id = entityInCache.ProductId }, out parentEntityInCache))
                {
                    entityInCache.Product = parentEntityInCache;
                }
            }
        }
    
        private WAQSWorkshopClient.OrderDetail GetEntityInCache(WAQSWorkshopClient.OrderDetail entity, bool includingDeleted = false, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            WAQSWorkshopClient.OrderDetail value;
            if (! (applyDataTransfer && OrderDetailsDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out value)) && (! OrderDetailsDico.TryGetValue(new OrderDetailKeys { Id = entity.Id }, out value) || value.ChangeTracker.State == ObjectState.Detached || ! includingDeleted && value.ChangeTracker.State == ObjectState.Deleted) && ! (entity.HasTemporaryKey && OrderDetailsAddedDico.TryGetValue(entity.EntityKey, out value)))
                return null;
            return value;
        }
    
        protected override WAQSWorkshopClient.OrderDetail GetEntity(WAQSWorkshopClient.OrderDetail entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
        {
            return GetEntity(entity, applyState, mergeOption, true, applyDataTransfer: applyDataTransfer);
        }
        private WAQSWorkshopClient.OrderDetail GetEntity(WAQSWorkshopClient.OrderDetail entity, bool applyState, MergeOption? mergeOption = null, bool includingDeleted = false, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            object entityGot;
            if (EntitiesGot.TryGetValue(entity, out entityGot))
                return (WAQSWorkshopClient.OrderDetail)entityGot;
    
            if (mergeOption == null)
                mergeOption = MergeOption;
    
            if (mergeOption == MergeOption.NoTracking)
                return entity;
    
            if (OrderDetailsInternal.Contains(entity))
                return entity;
    
            entity.IsDeserializing = true;
    
            includingDeleted |= applyState;
    
            var entityInvoiceDetail = entity.InvoiceDetail;
            entity.InvoiceDetail = null;
            var entityOrder = entity.Order;
            entity.Order = null;
            var entityProduct = entity.Product;
            entity.Product = null;
    
            WAQSWorkshopClient.OrderDetail value;
            var entityInCache = GetEntityInCache(entity, includingDeleted, applyDataTransfer);
            ObjectChangeTracker originalChangeTracker = entity.ChangeTracker;
            if (entityInCache == null)
            {
                var originalState = entity.ChangeTracker.State;
                entity.ChangeTracker = null;
                if (entity.ChangeTracker.State == ObjectState.Detached)
                    entity.ResetEntityKey();
                entity.IsDeserializing = false;
                var state = originalState == ObjectState.Detached ? defaultState : originalState;
                switch(state)
                {
                    case ObjectState.Added:
                        OrderDetailsInternal.AddWithoutCheckingIfAlreadyExist(entity);
                        break;
                    default:
                        entity.IsInitializingRelationships = true;
                        OrderDetailsInternal.AttachWithoutCheckingIfAlreadyExist(entity);
                        entity.IsInitializingRelationships = false;
                        break;
                }
                if (applyState)
                    entity.ChangeTracker.State = state;
                value = entity;
            }
            else
            {
                switch (mergeOption)
                {
                    case MergeOption.AppendOnly:
                        RefreshNewLoadedProperties(entityInCache, entity);
                        value = entityInCache;
                        break;
                    case MergeOption.OverwriteChanges:
                        RefreshCurrentValues(entityInCache, entity, applyState: applyState);
                        value = entityInCache;
                        break;
                    case MergeOption.PreserveChanges:
                        RefreshOriginalValues(entityInCache, entity);
                        value = entityInCache;
                        break;
                    default: 
                        throw new NotImplementedException();
                }
                if (applyState)
                {
                    switch(entity.ChangeTracker.State)
                    {
                        case ObjectState.Detached:
                            OrderDetails.Detach(value);
                            break;
                        case ObjectState.Deleted:
                            OrderDetails.Remove(value);
                            break;
                        default:
                            value.ChangeTracker.State = entity.ChangeTracker.State;
                            break;
                    }
                }
            }
            EntitiesGot.Add(entity, value);
            if (! entity.IsInitializingRelationships)
            {
                entity.IsInitializingRelationships = true;
                value.IsInitializingRelationships = true;
    
                if (entityInvoiceDetail != null)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(entityInvoiceDetail, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.InvoiceDetail = GetEntity(entityInvoiceDetail, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer);
                }
                if (entityOrder != null)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(entityOrder, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Order = GetEntity(entityOrder, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer);
                }
                if (entityProduct != null)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(entityProduct, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Product = GetEntity(entityProduct, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer);
                }
    
                if (applyState && originalChangeTracker != null && originalChangeTracker != value.ChangeTracker)
                {
                    foreach (var modifiedProperty in originalChangeTracker.ModifiedProperties)
                        if (! value.ChangeTracker.ModifiedProperties.Contains(modifiedProperty))
                            value.ChangeTracker.ModifiedProperties.Add(modifiedProperty);
                    foreach (var originalValue in originalChangeTracker.OriginalValues)
                    {
                        var originalValueEntity = originalValue.Value as IEntity;
                        if (originalValueEntity != null) 
                        {
                            var originalState = originalValueEntity.ChangeTracker.State;
                            IEntity originalEntity = null;
                            var ov = originalValueEntity == null ? originalValue.Value : originalEntity = GetEntity(originalValueEntity, true, defaultState, applyDataTransfer) as IEntity;
                            if (value.ChangeTracker.State != ObjectState.Detached)
                                value.ChangeTracker.RecordOriginalValue(originalValue.Key, ov);
                            if (originalValueEntity != null && originalState == ObjectState.Detached)
                                Detach(originalEntity);
                        }
                    }
                    foreach (var objectsRemovedToCollectionProperties in originalChangeTracker.ObjectsRemovedFromCollectionProperties)
                        foreach (IEntity objectsRemovedToCollectionProperty in objectsRemovedToCollectionProperties.Value)
                            if (objectsRemovedToCollectionProperty != null)
                            {
                                var originalState = objectsRemovedToCollectionProperty.ChangeTracker.State;
                                IObjectWithChangeTracker removedEntity = (IObjectWithChangeTracker)GetEntity(objectsRemovedToCollectionProperty, true, defaultState, applyDataTransfer);
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordRemovalFromCollectionProperties(objectsRemovedToCollectionProperties.Key, removedEntity);
                                if (originalState == ObjectState.Detached)
                                    Detach(removedEntity);
                            }
                    foreach (var objectsAddedToCollectionProperties in originalChangeTracker.ObjectsAddedToCollectionProperties)
                        foreach (var objectsAddedToCollectionProperty in objectsAddedToCollectionProperties.Value)
                            if (objectsAddedToCollectionProperty != null)
                            {
                                var addedEntity = (IObjectWithChangeTracker)GetEntity(objectsAddedToCollectionProperty, true, defaultState, applyDataTransfer);
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordAdditionToCollectionProperties(objectsAddedToCollectionProperties.Key, addedEntity);
                            }
                }
    
                value.IsInitializingRelationships = false;
            }
            value.ChangeTracker.ChangeTrackingEnabled = true;
            return value;
        } 
    
        private WAQSWorkshopClient.OrderDetail AttachWithoutChangingState(WAQSWorkshopClient.OrderDetail entity, ObjectState? defaultState = null)
        {
            if (OrderDetailsInternal.Contains(entity))
                return entity;
            var entityIncludingCache = Init ? GetEntityInCache(entity) ?? entity : entity;
            if (OrderDetailsInternal.AttachWithoutChangingState(entityIncludingCache, defaultState))
                EntityAttachWithoutChangingStateSubEntities(entity);
            return entityIncludingCache;
        }
    
        public void RefreshNewLoadedProperties(WAQSWorkshopClient.OrderDetail entityInCache, WAQSWorkshopClient.OrderDetail entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            entityInCache.IsDeserializing = isDeserializing;
        }
    
        public void RefreshCurrentValues(WAQSWorkshopClient.OrderDetail entityInCache, WAQSWorkshopClient.OrderDetail entity)
        {
            RefreshCurrentValues(entityInCache, entity, false);
        }
        public void RefreshCurrentValues(WAQSWorkshopClient.OrderDetail entityInCache, WAQSWorkshopClient.OrderDetail entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            if (entityInCache.Id != entity.Id)
                entityInCache.Id = entity.Id;
            if (entityInCache.OrderId != entity.OrderId)
                entityInCache.OrderId = entity.OrderId;
            if (entityInCache.ProductId != entity.ProductId)
                entityInCache.ProductId = entity.ProductId;
            if (entityInCache.UnitPrice != entity.UnitPrice)
                entityInCache.UnitPrice = entity.UnitPrice;
            if (entityInCache.Quantity != entity.Quantity)
                entityInCache.Quantity = entity.Quantity;
            if (entityInCache.Discount != entity.Discount)
                entityInCache.Discount = entity.Discount;
            entityInCache.IsDeserializing = isDeserializing;
            if (applyState)
            {
                entityInCache.ChangeTracker.State = entity.ChangeTracker.State;
                entityInCache.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties;
            }
            else
            {
                entityInCache.ChangeTracker.AcceptChanges();
                entityInCache.ChangeTracker.ModifiedProperties.Clear();
            }
        }
    
        private void RefreshOriginalValues(WAQSWorkshopClient.OrderDetail entityInCache, WAQSWorkshopClient.OrderDetail entity)
        {
            if (! (entityInCache.OrderId == entity.OrderId || entityInCache.ChangeTracker.ModifiedProperties.Contains("OrderId")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("OrderId");
            if (! (entityInCache.ProductId == entity.ProductId || entityInCache.ChangeTracker.ModifiedProperties.Contains("ProductId")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("ProductId");
            if (! (entityInCache.UnitPrice == entity.UnitPrice || entityInCache.ChangeTracker.ModifiedProperties.Contains("UnitPrice")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("UnitPrice");
            if (! (entityInCache.Quantity == entity.Quantity || entityInCache.ChangeTracker.ModifiedProperties.Contains("Quantity")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Quantity");
            if (! (entityInCache.Discount == entity.Discount || entityInCache.ChangeTracker.ModifiedProperties.Contains("Discount")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Discount");
        }
    
        private WAQSWorkshopClient.OrderDetail ReduceToKey(WAQSWorkshopClient.OrderDetail entity)
        {
            WAQSWorkshopClient.OrderDetail value = new WAQSWorkshopClient.OrderDetail { Id = entity.Id };
            return value;
        }
    
        private WAQSWorkshopClient.OrderDetail ReduceToModifications(WAQSWorkshopClient.OrderDetail entity)
        {
            WAQSWorkshopClient.OrderDetail value = new WAQSWorkshopClient.OrderDetail { Id = entity.Id };
            value.ChangeTracker.Saving = true;
            value.ChangeTracker.ChangeTrackingEnabled = true;
            value.ChangeTracker.State = entity.ChangeTracker.State;
            switch (entity.ChangeTracker.State)
            {
                case ObjectState.Added:
                    value.OrderId = entity.OrderId;
                    value.ProductId = entity.ProductId;
                    value.UnitPrice = entity.UnitPrice;
                    value.Quantity = entity.Quantity;
                    value.Discount = entity.Discount;
    				break;
                case ObjectState.Deleted:
                    value.ChangeTracker.ChangeTrackingEnabled = false;
                                value.OrderId = entity.OrderId;
                                value.ProductId = entity.ProductId;
                    value.UnitPrice = default(double); 
                    value.Quantity = default(short); 
                    value.Discount = default(double); 
    				break;
                case ObjectState.Modified:
                    value.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties.ToList();
                    value.OrderId = entity.OrderId;
                    value.ProductId = entity.ProductId;
                    foreach (var modifiedPropery in entity.ChangeTracker.ModifiedProperties.Union(entity.ChangeTracker.ValidationProperties))
                        switch (modifiedPropery)
                        {
                            case "UnitPrice":
                                value.UnitPrice = entity.UnitPrice;
                                break;
                            case "Quantity":
                                value.Quantity = entity.Quantity;
                                break;
                            case "Discount":
                                value.Discount = entity.Discount;
                                break;
                        }
                    break;
                case ObjectState.Unchanged:
                case ObjectState.CascadeDeleted:
                    break;
                default: //case ObjectState.Detached:
                    throw new InvalidOperationException();
            }
            return value;
        }
    
        private void ReduceNavigationProperties(WAQSWorkshopClient.OrderDetail originalValue, WAQSWorkshopClient.OrderDetail newValue, Dictionary<WAQSWorkshopClient.InvoiceDetail, WAQSWorkshopClient.InvoiceDetail> reducedInvoiceDetailsDictionary, Dictionary<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order> reducedOrdersDictionary, Dictionary<WAQSWorkshopClient.Product, WAQSWorkshopClient.Product> reducedProductsDictionary)
        {
            newValue.ChangeTracker.ObjectsAddedToCollectionProperties.Clear();
            newValue.ChangeTracker.ObjectsRemovedFromCollectionProperties.Clear();
            newValue.ChangeTracker.OriginalValues.Clear();
            foreach (var relatedEntity in originalValue.ChangeTracker.OriginalValues)
            {
                if (relatedEntity.Value == null)
                    continue;
                switch (relatedEntity.Key)
                {
    				case "Order":
                        var orderOrderParentEntity = (WAQSWorkshopClient.Order)relatedEntity.Value;
                        WAQSWorkshopClient.Order newOrderOrderParentEntity;
                        if (reducedOrdersDictionary.TryGetValue(orderOrderParentEntity, out newOrderOrderParentEntity))
                        {
    						
                            newValue.ChangeTracker.OriginalValues.Add("Order", newOrderOrderParentEntity);
                            WAQS.EntitiesTracking.ObjectList orderOrderParentEntityObjectList;
                            if (!newOrderOrderParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("OrderDetails", out orderOrderParentEntityObjectList))
                            {
                                orderOrderParentEntityObjectList = new WAQS.EntitiesTracking.ObjectList();
                                newOrderOrderParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Add("OrderDetails", orderOrderParentEntityObjectList);
                            }
                            orderOrderParentEntityObjectList.Add(newValue);
                        }
                        newValue.OrderId = originalValue.OrderId;
                    break;
    				case "Product":
                        var productProductParentEntity = (WAQSWorkshopClient.Product)relatedEntity.Value;
                        WAQSWorkshopClient.Product newProductProductParentEntity;
                        if (reducedProductsDictionary.TryGetValue(productProductParentEntity, out newProductProductParentEntity))
                        {
    						
                            newValue.ChangeTracker.OriginalValues.Add("Product", newProductProductParentEntity);
                            WAQS.EntitiesTracking.ObjectList productProductParentEntityObjectList;
                            if (!newProductProductParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("OrderDetails", out productProductParentEntityObjectList))
                            {
                                productProductParentEntityObjectList = new WAQS.EntitiesTracking.ObjectList();
                                newProductProductParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Add("OrderDetails", productProductParentEntityObjectList);
                            }
                            productProductParentEntityObjectList.Add(newValue);
                        }
                        newValue.ProductId = originalValue.ProductId;
                    break;
                    case "OrderId":
                    case "ProductId":
                        if (! newValue.ChangeTracker.OriginalValues.ContainsKey(relatedEntity.Key))
                            newValue.ChangeTracker.OriginalValues.Add(relatedEntity.Key, relatedEntity.Value);
                    break;
                }
            }
            if (originalValue.ChangeTracker.State != ObjectState.Unchanged)
            {
                if (originalValue.InvoiceDetail != null)
                {
                    WAQSWorkshopClient.InvoiceDetail relatedEntity;
                    if (reducedInvoiceDetailsDictionary.TryGetValue(originalValue.InvoiceDetail, out relatedEntity))
                    {
                        if (newValue.InvoiceDetail != relatedEntity)
                            newValue.InvoiceDetail = relatedEntity;
                    }
                }
                if (originalValue.Order != null)
                {
                    WAQSWorkshopClient.Order relatedEntity;
                    if (reducedOrdersDictionary.TryGetValue(originalValue.Order, out relatedEntity))
                    {
                        if (newValue.Order != relatedEntity)
                            newValue.Order = relatedEntity;
                    }
                    else
                    {
                        newValue.OrderId = originalValue.OrderId;
                    }
                }
                if (originalValue.Product != null)
                {
                    WAQSWorkshopClient.Product relatedEntity;
                    if (reducedProductsDictionary.TryGetValue(originalValue.Product, out relatedEntity))
                    {
                        if (newValue.Product != relatedEntity)
                            newValue.Product = relatedEntity;
                    }
                    else
                    {
                        newValue.ProductId = originalValue.ProductId;
                    }
                }
    			
            }
        }
    
        private void RefreshComputedValues(WAQSWorkshopClient.OrderDetail entity, WAQSWorkshopClient.OrderDetail dbEntity)
        {
            if (entity.HasTemporaryKey)
            {
                OrderDetailsDico.Add(new OrderDetailKeys { Id = dbEntity.Id }, entity);
                RemoveOrderDetailsAddedDico(entity);
            }						
            if (dbEntity.HasTemporaryKey)
            {
                entity.Id = dbEntity.Id;
            }
            entity.IsDeserializing = true;
            if (dbEntity.InvoiceDetail != null && dbEntity.InvoiceDetail.ChangeTracker.State == ObjectState.Added)
                entity.Id = dbEntity.Id;
            if (dbEntity.Order != null && dbEntity.Order.ChangeTracker.State == ObjectState.Added)
                entity.OrderId = dbEntity.OrderId;
            if (dbEntity.Product != null && dbEntity.Product.ChangeTracker.State == ObjectState.Added)
                entity.ProductId = dbEntity.ProductId;
            entity.IsDeserializing = false;
            entity.ResetEntityKey();
        }
    
        private void DisposeOrderDetail()
        {
            if (_orderDetails != null)
            {
                foreach (var entity in _orderDetails.AllEntities.ToList())
                {
                    entity.OrderFKsChanged -= OrderDetailOrderFKsChanged;
                    entity.ProductFKsChanged -= OrderDetailProductFKsChanged;
                    entity.NavigationPropertyChanged -= OrderDetailNavigationPropertyChanged;
                    EntityDetached(entity);
                }
                _orderDetails.EntityAdded -= EntityAddedOrAttached;
                _orderDetails.EntityAttached -= EntityAddedOrAttached;
                _orderDetails.EntityReplaced -= EntityReplaced;
                _orderDetails.EntityDetached -= EntityDetached;
            }
        }
    
        private Dictionary<ProductKeys, WAQSWorkshopClient.Product> _productsDico;
        private Dictionary<ProductKeys, WAQSWorkshopClient.Product> ProductsDico
        {
            get { return _productsDico ?? (_productsDico = new Dictionary<ProductKeys, WAQSWorkshopClient.Product>()); }
        }
    
        private Dictionary<Guid, WAQSWorkshopClient.Product> _productsDataTransferDico;
        private Dictionary<Guid, WAQSWorkshopClient.Product> ProductsDataTransferDico
        {
            get { return _productsDataTransferDico ?? (_productsDataTransferDico = new Dictionary<Guid, WAQSWorkshopClient.Product>()); }
        }
    
        private Dictionary<string, WAQSWorkshopClient.Product> _productsAddedDico;
        private Dictionary<string, WAQSWorkshopClient.Product> ProductsAddedDico
        {
            get { return _productsAddedDico ?? (_productsAddedDico = new Dictionary<string, WAQSWorkshopClient.Product>()); }
        }
        private void AddProductsAddedDico(WAQSWorkshopClient.Product entity)
        {
            ProductsAddedDico.Add(entity.EntityKey, entity);
            entity.EntityKeyChanged += ResetEntityKey;
        }
        private void RemoveProductsAddedDico(WAQSWorkshopClient.Product entity)
        {
            ProductsAddedDico.Remove(entity.EntityKey);
            entity.EntityKeyChanged -= ResetEntityKey;
        }
    
        private void ResetEntityKey(WAQSWorkshopClient.Product entity, string oldEntityKey)
        {
            if (entity.HasTemporaryKey)
            {
                if (entity.EntityKey != oldEntityKey)
                {
                    if (oldEntityKey != null)
                        ProductsAddedDico.Remove(oldEntityKey);
                    ProductsAddedDico.Add(entity.EntityKey, entity);
                }
            }
            else
            {
                ProductsAddedDico.Remove(oldEntityKey);
                entity.EntityKeyChanged -= ResetEntityKey;
                ProductsDico.Add(new ProductKeys { Id = entity.Id }, entity);
            }
        }
        public IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Product> Products 
        { 
            get { return ProductsInternal; }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Product> ProductsInternal
        {
            get
            {
                if (_products == null)
                {
                    _products = new ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Product>("Products", this, e => new ProductKeys { Id = e.Id });
                    _products.EntityAdded += EntityAddedOrAttached;
                    _products.EntityAttached += EntityAddedOrAttached;
                    _products.EntityReplaced += EntityReplaced;
                    _products.EntityDetached += EntityDetached;
                }
                return _products;
            }
        }
        private ClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Product> _products;
        private Dictionary<CategoryKeys, List<WAQSWorkshopClient.Product>> _productsCategoryFKsDico;
        private Dictionary<CategoryKeys, List<WAQSWorkshopClient.Product>> ProductsCategoryFKsDico
        {
            get { return _productsCategoryFKsDico ?? (_productsCategoryFKsDico = new Dictionary<CategoryKeys, List<WAQSWorkshopClient.Product>>()); }
        }
    
        private void EntityAddedOrAttached(WAQSWorkshopClient.Product entity)
        {
    
            ClientEntitySetExtensions.AddEntityInDico(Products, entity);
            Product entityTmp;
            if (ProductsDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out entityTmp))
            {
                if (entityTmp == entity)
                    new InvalidOperationException();
            }
            else
                ProductsDataTransferDico.Add(entity.DataTransferEntityKey, entity);		
            if (entity.HasTemporaryKey)
            {
                WAQSWorkshopClient.Product entityInAddedDico;
                if (! ProductsAddedDico.TryGetValue(entity.EntityKey, out entityInAddedDico))
                    AddProductsAddedDico(entity);
                else if (entityInAddedDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                entity.OrderDetails.CollectionChanged += Product_OrderDetailsCollectionChanged;
                entity.NavigationPropertyChanged += ProductNavigationPropertyChanged;
                EntityAttachWithoutChangingStateSubEntities(entity);
            }
            else
            {
                var productKeys = new ProductKeys { Id = entity.Id };
                WAQSWorkshopClient.Product entityInDico;
                if (! ProductsDico.TryGetValue(productKeys, out entityInDico))
                    ProductsDico.Add(productKeys, entity);
                else if (entityInDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                entity.OrderDetails.CollectionChanged += Product_OrderDetailsCollectionChanged;
                entity.NavigationPropertyChanged += ProductNavigationPropertyChanged;
                EntityAttachWithoutChangingStateSubEntities(entity);
                List<WAQSWorkshopClient.OrderDetail> orderDetails;
                if (OrderDetailsProductFKsDico.TryGetValue(productKeys, out orderDetails))
                    foreach (var e in orderDetails)
                        e.Product = entity;
            }
    
            foreach (var se in entity.OrderDetails)
                if (! OrderDetailsInternal.Contains(se))
                    OrderDetailsInternal.AttachWithoutChangingState(se, entity.ChangeTracker.State);
    
    
            if (! (entity.Category == null || CategoriesInternal.Contains(entity.Category)))
                CategoriesInternal.AttachWithoutChangingState(entity.Category, entity.ChangeTracker.State);
    
            if (entity.CategoryId != null)
            {
                var productsCategoryKeys = new CategoryKeys { Id = entity.CategoryId.Value };
                List<WAQSWorkshopClient.Product> productsCategoryEntities;
                if (! ProductsCategoryFKsDico.TryGetValue(productsCategoryKeys, out productsCategoryEntities))
                    ProductsCategoryFKsDico.Add(productsCategoryKeys, productsCategoryEntities = new List<WAQSWorkshopClient.Product>());
                productsCategoryEntities.Add(entity);
        
                WAQSWorkshopClient.Category category;
                if (CategoriesDico.TryGetValue(productsCategoryKeys, out category))
                    entity.Category = category;
            }
            entity.CategoryFKsChanged += ProductCategoryFKsChanged;
            entity.IsInitializingRelationships = false;
        }
    
        private void EntityReplaced(WAQSWorkshopClient.Product entityInEntitySet, WAQSWorkshopClient.Product entity)
        {
            EntityReplacedInternal(entityInEntitySet, entity);
        }
        private void EntityReplacedInternal(WAQSWorkshopClient.Product entityInEntitySet, WAQSWorkshopClient.Product entity)
        {
            if (entityInEntitySet.Name != entity.Name)
                entityInEntitySet.Name = entity.Name;
            if (entityInEntitySet.SupplierId != entity.SupplierId)
                entityInEntitySet.SupplierId = entity.SupplierId;
            if (entityInEntitySet.CategoryId != entity.CategoryId)
                entityInEntitySet.CategoryId = entity.CategoryId;
            if (entityInEntitySet.QuantityPerUnit != entity.QuantityPerUnit)
                entityInEntitySet.QuantityPerUnit = entity.QuantityPerUnit;
            if (entityInEntitySet.UnitPrice != entity.UnitPrice)
                entityInEntitySet.UnitPrice = entity.UnitPrice;
            if (entityInEntitySet.Discontinued != entity.Discontinued)
                entityInEntitySet.Discontinued = entity.Discontinued;
        }
    
        private void Product_OrderDetailsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
                foreach (WAQSWorkshopClient.OrderDetail subEntity in e.NewItems)
                {
                    WAQSWorkshopClient.OrderDetail se = null;
                    if (!subEntity.IsInitializingRelationships && (se = GetEntityInCache(subEntity)) == null)
                        AttachWithoutChangingState(subEntity);
                    else if (se != null && se != subEntity)
                        throw new InvalidOperationException();
                }
        }
         
        private void ProductCategoryFKsChanged(WAQSWorkshopClient.Product entity, Nullable<int> oldCategoryId, Nullable<int> newCategoryId)
        {
            CategoryKeys? oldProductsCategoryKeys = oldCategoryId == null ? (CategoryKeys?)null : new CategoryKeys { Id = oldCategoryId.Value };
            CategoryKeys? newProductsCategoryKeys = newCategoryId == null ? (CategoryKeys?)null : new CategoryKeys { Id = newCategoryId.Value };
            if (newProductsCategoryKeys.HasValue)
            {
                List<WAQSWorkshopClient.Product> newCollection;
                if (! ProductsCategoryFKsDico.TryGetValue(newProductsCategoryKeys.Value, out newCollection))
                    ProductsCategoryFKsDico.Add(newProductsCategoryKeys.Value, newCollection = new List<WAQSWorkshopClient.Product>());
                newCollection.Add(entity);
        
                WAQSWorkshopClient.Category category;
                if (CategoriesDico.TryGetValue(newProductsCategoryKeys.Value, out category))
                    entity.Category = category;
            }
            List<WAQSWorkshopClient.Product> oldCollection;
            if (oldProductsCategoryKeys.HasValue && ProductsCategoryFKsDico.TryGetValue(oldProductsCategoryKeys.Value, out oldCollection))
            {
                oldCollection.Remove(entity);
                if (oldCollection.Count == 0)
                    ProductsCategoryFKsDico.Remove(oldProductsCategoryKeys.Value);
            }
        }
    
        private void ProductNavigationPropertyChanged(Product sender, string propertyName)
        {
            var entity = sender;
            if (propertyName == "Category" && entity.Category != null)
            {
                if (! Categories.Contains(entity.Category))
                    AttachWithoutChangingState(entity.Category);
            }
            else if (new [] { "CategoryId" }.Contains(propertyName))
            {
                var parentEntityInCache = Categories.FirstOrDefault(pe => pe.Id == entity.CategoryId);
                if (parentEntityInCache != null && parentEntityInCache.Id != 0)
                    entity.Category = parentEntityInCache;					
            }
        }
    
        private void EntityDetached(WAQSWorkshopClient.Product entity)
        {
    
            ProductsDataTransferDico.Remove(entity.DataTransferEntityKey);		
            if (entity.IsTemporaryKey)
                RemoveProductsAddedDico(entity);
            else
            {
                var entityKey = new ProductKeys { Id = entity.Id };
                ProductsDico.Remove(entityKey);
            }
            if (entity.CategoryId != null)
            {
                List<WAQSWorkshopClient.Product> fkEntities;
                if (ProductsCategoryFKsDico.TryGetValue(new CategoryKeys { Id = entity.CategoryId.Value }, out fkEntities))
                    fkEntities.Remove(entity);
            }
        
            CategoryKeys? oldProductsCategoryKeys = entity.CategoryId == null ? (CategoryKeys?)null : new CategoryKeys { Id = entity.CategoryId.Value };
            {
                List<WAQSWorkshopClient.Product> oldCollection;
                if (oldProductsCategoryKeys.HasValue && ProductsCategoryFKsDico.TryGetValue(oldProductsCategoryKeys.Value, out oldCollection))
                {
                    oldCollection.Remove(entity);
                    if (oldCollection.Count == 0)
                        ProductsCategoryFKsDico.Remove(oldProductsCategoryKeys.Value);
                }
            }
    
            entity.OrderDetails.CollectionChanged -= Product_OrderDetailsCollectionChanged;
            entity.NavigationPropertyChanged -= ProductNavigationPropertyChanged;
            ClientEntitySetExtensions.RemoveEntityInDico(entity);
    		RemovePropertyDescriptorToEntity(entity);
            foreach (var subEntity in OrderDetailsInternal)
            {
                object originalValue;
                if (subEntity.ChangeTracker.OriginalValues.TryGetValue("Product", out originalValue) && originalValue == entity)
                    subEntity.ChangeTracker.OriginalValues.Remove("Product");
            }
            foreach (var subEntity in CategoriesInternal)
            {
                ObjectList originalValues;
                if (subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("Products", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.Remove("Products");
                }
                if (subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("Products", out originalValues) && originalValues.Contains(entity))
                {
                    originalValues.Remove(entity);
                    if (originalValues.Count == 0)
                        subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Remove("Products");
                }
            }
        }
    
        
        private void EntityAttachWithoutChangingStateSubEntities(WAQSWorkshopClient.Product entity)
        {
            var entityInCache = GetEntityInCache(entity);
            bool entityInCacheIsInitializingRelationships = false;
            if (entityInCache != null)
            {
                entityInCacheIsInitializingRelationships = entityInCache.IsInitializingRelationships;
                entityInCache.IsInitializingRelationships = true;
            }
            EntityAttachWithoutChangingStateSubEntitiesBody(entity, entityInCache);
            if (entityInCache != null)
                entityInCache.IsInitializingRelationships = entityInCacheIsInitializingRelationships;
        }
        
        private void EntityAttachWithoutChangingStateSubEntitiesBody(WAQSWorkshopClient.Product entity, WAQSWorkshopClient.Product entityInCache)
        {
            if (entity == entityInCache)
                return;
            foreach (var subEntity in entity.OrderDetails.ToList())
            {
                WAQSWorkshopClient.OrderDetail subEntityInCache;
                if (OrderDetails.Contains(subEntity))
                    subEntityInCache = subEntity;
                else
                    subEntityInCache = AttachWithoutChangingState(subEntity, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
    			if (!(entityInCache == null || entityInCache == entity || entityInCache.OrderDetails.Contains(subEntityInCache)))
                    entityInCache.OrderDetails.Add(subEntityInCache);
            }
            if (entityInCache != null)
            {
                List<WAQSWorkshopClient.OrderDetail> subEntities;
                if (OrderDetailsProductFKsDico.TryGetValue(new ProductKeys { Id = entity.Id }, out subEntities))
                    foreach (var subEntity in subEntities)
                    {
                        if (subEntity.Product == null)
                            ((ITrackableCollection<OrderDetail>)entityInCache.OrderDetails).AttachWithoutCheckingIfAlreadyExist(subEntity);
                    }
            }
            if (entity.Category != null)
            {
                WAQSWorkshopClient.Category parentEntityInCache;
                if (CategoriesInternal.Contains(entity.Category))
                    parentEntityInCache = entity.Category;
                else
                    parentEntityInCache = AttachWithoutChangingState(entity.Category, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
                if (entityInCache != null)
                    entityInCache.Category = parentEntityInCache;
            }
            else if (! (entityInCache == null || entityInCache.CategoryId == null))
            {
                WAQSWorkshopClient.Category parentEntityInCache;
                if (CategoriesDico.TryGetValue(new CategoryKeys { Id = entityInCache.CategoryId.Value }, out parentEntityInCache))
                {
                    entityInCache.Category = parentEntityInCache;
                }
            }
        }
    
        private WAQSWorkshopClient.Product GetEntityInCache(WAQSWorkshopClient.Product entity, bool includingDeleted = false, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            WAQSWorkshopClient.Product value;
            if (! (applyDataTransfer && ProductsDataTransferDico.TryGetValue(entity.DataTransferEntityKey, out value)) && (! ProductsDico.TryGetValue(new ProductKeys { Id = entity.Id }, out value) || value.ChangeTracker.State == ObjectState.Detached || ! includingDeleted && value.ChangeTracker.State == ObjectState.Deleted) && ! (entity.HasTemporaryKey && ProductsAddedDico.TryGetValue(entity.EntityKey, out value)))
                return null;
            return value;
        }
    
        protected override WAQSWorkshopClient.Product GetEntity(WAQSWorkshopClient.Product entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
        {
            return GetEntity(entity, applyState, mergeOption, true, applyDataTransfer: applyDataTransfer);
        }
        private WAQSWorkshopClient.Product GetEntity(WAQSWorkshopClient.Product entity, bool applyState, MergeOption? mergeOption = null, bool includingDeleted = false, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            object entityGot;
            if (EntitiesGot.TryGetValue(entity, out entityGot))
                return (WAQSWorkshopClient.Product)entityGot;
    
            if (mergeOption == null)
                mergeOption = MergeOption;
    
            if (mergeOption == MergeOption.NoTracking)
                return entity;
    
            if (ProductsInternal.Contains(entity))
                return entity;
    
            entity.IsDeserializing = true;
    
            includingDeleted |= applyState;
    
            var entityOrderDetails = entity.OrderDetails.ToList();
            entity.OrderDetails.Clear();
            var entityCategory = entity.Category;
            entity.Category = null;
    
            WAQSWorkshopClient.Product value;
            var entityInCache = GetEntityInCache(entity, includingDeleted, applyDataTransfer);
            ObjectChangeTracker originalChangeTracker = entity.ChangeTracker;
            if (entityInCache == null)
            {
                var originalState = entity.ChangeTracker.State;
                entity.ChangeTracker = null;
                if (entity.ChangeTracker.State == ObjectState.Detached)
                    entity.ResetEntityKey();
                entity.IsDeserializing = false;
                var state = originalState == ObjectState.Detached ? defaultState : originalState;
                switch(state)
                {
                    case ObjectState.Added:
                        ProductsInternal.AddWithoutCheckingIfAlreadyExist(entity);
                        break;
                    default:
                        entity.IsInitializingRelationships = true;
                        ProductsInternal.AttachWithoutCheckingIfAlreadyExist(entity);
                        entity.IsInitializingRelationships = false;
                        break;
                }
                if (applyState)
                    entity.ChangeTracker.State = state;
                value = entity;
            }
            else
            {
                switch (mergeOption)
                {
                    case MergeOption.AppendOnly:
                        RefreshNewLoadedProperties(entityInCache, entity);
                        value = entityInCache;
                        break;
                    case MergeOption.OverwriteChanges:
                        RefreshCurrentValues(entityInCache, entity, applyState: applyState);
                        value = entityInCache;
                        break;
                    case MergeOption.PreserveChanges:
                        RefreshOriginalValues(entityInCache, entity);
                        value = entityInCache;
                        break;
                    default: 
                        throw new NotImplementedException();
                }
                if (applyState)
                {
                    switch(entity.ChangeTracker.State)
                    {
                        case ObjectState.Detached:
                            Products.Detach(value);
                            break;
                        case ObjectState.Deleted:
                            Products.Remove(value);
                            break;
                        default:
                            value.ChangeTracker.State = entity.ChangeTracker.State;
                            break;
                    }
                }
            }
            EntitiesGot.Add(entity, value);
            if (! entity.IsInitializingRelationships)
            {
                entity.IsInitializingRelationships = true;
                value.IsInitializingRelationships = true;
    
                foreach (var e in entityOrderDetails)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(e, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.OrderDetails.Add(GetEntity(e, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer));
                }
                if (entityCategory != null)
                {
                    if (value.ChangeTracker.State == ObjectState.Detached)
                        GetEntity(entityCategory, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                    else
                        value.Category = GetEntity(entityCategory, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer);
                }
    
                if (applyState && originalChangeTracker != null && originalChangeTracker != value.ChangeTracker)
                {
                    foreach (var modifiedProperty in originalChangeTracker.ModifiedProperties)
                        if (! value.ChangeTracker.ModifiedProperties.Contains(modifiedProperty))
                            value.ChangeTracker.ModifiedProperties.Add(modifiedProperty);
                    foreach (var originalValue in originalChangeTracker.OriginalValues)
                    {
                        var originalValueEntity = originalValue.Value as IEntity;
                        if (originalValueEntity != null) 
                        {
                            var originalState = originalValueEntity.ChangeTracker.State;
                            IEntity originalEntity = null;
                            var ov = originalValueEntity == null ? originalValue.Value : originalEntity = GetEntity(originalValueEntity, true, defaultState, applyDataTransfer) as IEntity;
                            if (value.ChangeTracker.State != ObjectState.Detached)
                                value.ChangeTracker.RecordOriginalValue(originalValue.Key, ov);
                            if (originalValueEntity != null && originalState == ObjectState.Detached)
                                Detach(originalEntity);
                        }
                    }
                    foreach (var objectsRemovedToCollectionProperties in originalChangeTracker.ObjectsRemovedFromCollectionProperties)
                        foreach (IEntity objectsRemovedToCollectionProperty in objectsRemovedToCollectionProperties.Value)
                            if (objectsRemovedToCollectionProperty != null)
                            {
                                var originalState = objectsRemovedToCollectionProperty.ChangeTracker.State;
                                IObjectWithChangeTracker removedEntity = (IObjectWithChangeTracker)GetEntity(objectsRemovedToCollectionProperty, true, defaultState, applyDataTransfer);
                                switch (objectsRemovedToCollectionProperties.Key)
                                {
                                    case "OrderDetails":
                                            value.OrderDetails.Remove((WAQSWorkshopClient.OrderDetail)removedEntity);
                                            break;
                                }
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordRemovalFromCollectionProperties(objectsRemovedToCollectionProperties.Key, removedEntity);
                                if (originalState == ObjectState.Detached)
                                    Detach(removedEntity);
                            }
                    foreach (var objectsAddedToCollectionProperties in originalChangeTracker.ObjectsAddedToCollectionProperties)
                        foreach (var objectsAddedToCollectionProperty in objectsAddedToCollectionProperties.Value)
                            if (objectsAddedToCollectionProperty != null)
                            {
                                var addedEntity = (IObjectWithChangeTracker)GetEntity(objectsAddedToCollectionProperty, true, defaultState, applyDataTransfer);
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordAdditionToCollectionProperties(objectsAddedToCollectionProperties.Key, addedEntity);
                            }
                }
    
                value.IsInitializingRelationships = false;
            }
            value.ChangeTracker.ChangeTrackingEnabled = true;
            return value;
        } 
    
        private WAQSWorkshopClient.Product AttachWithoutChangingState(WAQSWorkshopClient.Product entity, ObjectState? defaultState = null)
        {
            if (ProductsInternal.Contains(entity))
                return entity;
            var entityIncludingCache = Init ? GetEntityInCache(entity) ?? entity : entity;
            if (ProductsInternal.AttachWithoutChangingState(entityIncludingCache, defaultState))
                EntityAttachWithoutChangingStateSubEntities(entity);
            return entityIncludingCache;
        }
    
        public void RefreshNewLoadedProperties(WAQSWorkshopClient.Product entityInCache, WAQSWorkshopClient.Product entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            entityInCache.IsDeserializing = isDeserializing;
        }
    
        public void RefreshCurrentValues(WAQSWorkshopClient.Product entityInCache, WAQSWorkshopClient.Product entity)
        {
            RefreshCurrentValues(entityInCache, entity, false);
        }
        public void RefreshCurrentValues(WAQSWorkshopClient.Product entityInCache, WAQSWorkshopClient.Product entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            if (entityInCache.Id != entity.Id)
                entityInCache.Id = entity.Id;
            if (entityInCache.Name != entity.Name)
                entityInCache.Name = entity.Name;
            if (entityInCache.SupplierId != entity.SupplierId)
                entityInCache.SupplierId = entity.SupplierId;
            if (entityInCache.CategoryId != entity.CategoryId)
                entityInCache.CategoryId = entity.CategoryId;
            if (entityInCache.QuantityPerUnit != entity.QuantityPerUnit)
                entityInCache.QuantityPerUnit = entity.QuantityPerUnit;
            if (entityInCache.UnitPrice != entity.UnitPrice)
                entityInCache.UnitPrice = entity.UnitPrice;
            if (entityInCache.Discontinued != entity.Discontinued)
                entityInCache.Discontinued = entity.Discontinued;
            entityInCache.IsDeserializing = isDeserializing;
            if (applyState)
            {
                entityInCache.ChangeTracker.State = entity.ChangeTracker.State;
                entityInCache.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties;
            }
            else
            {
                entityInCache.ChangeTracker.AcceptChanges();
                entityInCache.ChangeTracker.ModifiedProperties.Clear();
            }
        }
    
        private void RefreshOriginalValues(WAQSWorkshopClient.Product entityInCache, WAQSWorkshopClient.Product entity)
        {
            if (! (entityInCache.Name == entity.Name || entityInCache.ChangeTracker.ModifiedProperties.Contains("Name")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Name");
            if (! (entityInCache.SupplierId == entity.SupplierId || entityInCache.ChangeTracker.ModifiedProperties.Contains("SupplierId")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("SupplierId");
            if (! (entityInCache.CategoryId == entity.CategoryId || entityInCache.ChangeTracker.ModifiedProperties.Contains("CategoryId")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("CategoryId");
            if (! (entityInCache.QuantityPerUnit == entity.QuantityPerUnit || entityInCache.ChangeTracker.ModifiedProperties.Contains("QuantityPerUnit")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("QuantityPerUnit");
            if (! (entityInCache.UnitPrice == entity.UnitPrice || entityInCache.ChangeTracker.ModifiedProperties.Contains("UnitPrice")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("UnitPrice");
            if (! (entityInCache.Discontinued == entity.Discontinued || entityInCache.ChangeTracker.ModifiedProperties.Contains("Discontinued")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Discontinued");
        }
    
        private WAQSWorkshopClient.Product ReduceToKey(WAQSWorkshopClient.Product entity)
        {
            WAQSWorkshopClient.Product value = new WAQSWorkshopClient.Product { Id = entity.Id };
            return value;
        }
    
        private WAQSWorkshopClient.Product ReduceToModifications(WAQSWorkshopClient.Product entity)
        {
            WAQSWorkshopClient.Product value = new WAQSWorkshopClient.Product { Id = entity.Id };
            value.ChangeTracker.Saving = true;
            value.ChangeTracker.ChangeTrackingEnabled = true;
            value.ChangeTracker.State = entity.ChangeTracker.State;
            switch (entity.ChangeTracker.State)
            {
                case ObjectState.Added:
                    value.Name = entity.Name;
                    value.SupplierId = entity.SupplierId;
                    value.CategoryId = entity.CategoryId;
                    value.QuantityPerUnit = entity.QuantityPerUnit;
                    value.UnitPrice = entity.UnitPrice;
                    value.Discontinued = entity.Discontinued;
    				break;
                case ObjectState.Deleted:
                    value.ChangeTracker.ChangeTrackingEnabled = false;
                    value.Name = default(string); 
                    value.SupplierId = default(Nullable<int>); 
                                value.CategoryId = entity.CategoryId;
                    value.QuantityPerUnit = default(string); 
                    value.UnitPrice = default(double); 
                    value.Discontinued = default(bool); 
    				break;
                case ObjectState.Modified:
                    value.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties.ToList();
                    value.CategoryId = entity.CategoryId;
                    foreach (var modifiedPropery in entity.ChangeTracker.ModifiedProperties.Union(entity.ChangeTracker.ValidationProperties))
                        switch (modifiedPropery)
                        {
                            case "Name":
                                value.Name = entity.Name;
                                break;
                            case "SupplierId":
                                value.SupplierId = entity.SupplierId;
                                break;
                            case "QuantityPerUnit":
                                value.QuantityPerUnit = entity.QuantityPerUnit;
                                break;
                            case "UnitPrice":
                                value.UnitPrice = entity.UnitPrice;
                                break;
                            case "Discontinued":
                                value.Discontinued = entity.Discontinued;
                                break;
                        }
                    break;
                case ObjectState.Unchanged:
                case ObjectState.CascadeDeleted:
                    break;
                default: //case ObjectState.Detached:
                    throw new InvalidOperationException();
            }
            return value;
        }
    
        private void ReduceNavigationProperties(WAQSWorkshopClient.Product originalValue, WAQSWorkshopClient.Product newValue, Dictionary<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.OrderDetail> reducedOrderDetailsDictionary, Dictionary<WAQSWorkshopClient.Category, WAQSWorkshopClient.Category> reducedCategoriesDictionary)
        {
            newValue.ChangeTracker.ObjectsAddedToCollectionProperties.Clear();
            newValue.ChangeTracker.ObjectsRemovedFromCollectionProperties.Clear();
            newValue.ChangeTracker.OriginalValues.Clear();
            foreach (var relatedEntity in originalValue.ChangeTracker.OriginalValues)
            {
                if (relatedEntity.Value == null)
                    continue;
                switch (relatedEntity.Key)
                {
    				case "Category":
                        var categoryCategoryParentEntity = (WAQSWorkshopClient.Category)relatedEntity.Value;
                        WAQSWorkshopClient.Category newCategoryCategoryParentEntity;
                        if (reducedCategoriesDictionary.TryGetValue(categoryCategoryParentEntity, out newCategoryCategoryParentEntity))
                        {
    						
                            newValue.ChangeTracker.OriginalValues.Add("Category", newCategoryCategoryParentEntity);
                            WAQS.EntitiesTracking.ObjectList categoryCategoryParentEntityObjectList;
                            if (!newCategoryCategoryParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("Products", out categoryCategoryParentEntityObjectList))
                            {
                                categoryCategoryParentEntityObjectList = new WAQS.EntitiesTracking.ObjectList();
                                newCategoryCategoryParentEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Add("Products", categoryCategoryParentEntityObjectList);
                            }
                            categoryCategoryParentEntityObjectList.Add(newValue);
                        }
                        newValue.CategoryId = originalValue.CategoryId;
                    break;
                    case "CategoryId":
                        if (! newValue.ChangeTracker.OriginalValues.ContainsKey(relatedEntity.Key))
                            newValue.ChangeTracker.OriginalValues.Add(relatedEntity.Key, relatedEntity.Value);
                    break;
                }
            }
            if (originalValue.ChangeTracker.State != ObjectState.Unchanged)
            {
                foreach (var subEntity in originalValue.OrderDetails.Where(se => se.ChangeTracker.State != ObjectState.Unchanged))
                {
                    var relatedEntity = reducedOrderDetailsDictionary[subEntity]; 
                    if (! newValue.OrderDetails.Contains(relatedEntity))
                    {
                        ObjectList objectsAddedToCollectionProperties;
                        if (newValue.ChangeTracker.State == ObjectState.Added || relatedEntity.ChangeTracker.State == ObjectState.Added || originalValue.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("OrderDetails", out objectsAddedToCollectionProperties) && objectsAddedToCollectionProperties.Contains(subEntity))
                            newValue.OrderDetails.Add(relatedEntity);
                        else
                            newValue.OrderDetails.Attach(relatedEntity, true);
                    }
                }
                if (originalValue.Category != null)
                {
                    WAQSWorkshopClient.Category relatedEntity;
                    if (reducedCategoriesDictionary.TryGetValue(originalValue.Category, out relatedEntity))
                    {
                        if (newValue.Category != relatedEntity)
                            newValue.Category = relatedEntity;
                    }
                    else
                    {
                        newValue.CategoryId = originalValue.CategoryId;
                    }
                }
    			
            }
        }
    
        private void RefreshComputedValues(WAQSWorkshopClient.Product entity, WAQSWorkshopClient.Product dbEntity)
        {
            if (entity.HasTemporaryKey)
            {
                ProductsDico.Add(new ProductKeys { Id = dbEntity.Id }, entity);
                RemoveProductsAddedDico(entity);
            }						
            if (dbEntity.HasTemporaryKey)
            {
                entity.Id = dbEntity.Id;
            }
            entity.IsDeserializing = true;
            if (dbEntity.Category != null && dbEntity.Category.ChangeTracker.State == ObjectState.Added)
                entity.CategoryId = dbEntity.CategoryId;
            entity.IsDeserializing = false;
            entity.ResetEntityKey();
        }
    
        private void DisposeProduct()
        {
            if (_products != null)
            {
                foreach (var entity in _products.AllEntities.ToList())
                {
                    entity.OrderDetails.CollectionChanged -= Product_OrderDetailsCollectionChanged;
                    entity.CategoryFKsChanged -= ProductCategoryFKsChanged;
                    entity.NavigationPropertyChanged -= ProductNavigationPropertyChanged;
                    EntityDetached(entity);
                }
                _products.EntityAdded -= EntityAddedOrAttached;
                _products.EntityAttached -= EntityAddedOrAttached;
                _products.EntityReplaced -= EntityReplaced;
                _products.EntityDetached -= EntityDetached;
            }
        }
    
        public NorthwindSerializableContext GetModifiedEntities()
        {
            return new NorthwindSerializableContext 
            { 
    			Customers = 
                    new List<WAQSWorkshopClient.Customer>(from e in CustomersInternal.AllEntities
                     where e.ChangeTracker.State != ObjectState.CascadeDeleted && (e.ChangeTracker.State != ObjectState.Unchanged || e.ChangeTracker.ObjectsAddedToCollectionProperties.Any() || e.ChangeTracker.ObjectsRemovedFromCollectionProperties.Any())
                     select e), 
    			Employees = 
                    new List<WAQSWorkshopClient.Employee>(from e in EmployeesInternal.AllEntities
                     where e.ChangeTracker.State != ObjectState.CascadeDeleted && (e.ChangeTracker.State != ObjectState.Unchanged || e.ChangeTracker.ObjectsAddedToCollectionProperties.Any() || e.ChangeTracker.ObjectsRemovedFromCollectionProperties.Any())
                     select e), 
    			InvoiceDetails = 
                    new List<WAQSWorkshopClient.InvoiceDetail>(from e in InvoiceDetailsInternal.AllEntities
                     where e.ChangeTracker.State != ObjectState.CascadeDeleted && (e.ChangeTracker.State != ObjectState.Unchanged || e.ChangeTracker.ObjectsAddedToCollectionProperties.Any() || e.ChangeTracker.ObjectsRemovedFromCollectionProperties.Any())
                     select e), 
    			Invoices = 
                    new List<WAQSWorkshopClient.Invoice>(from e in InvoicesInternal.AllEntities
                     where e.ChangeTracker.State != ObjectState.CascadeDeleted && (e.ChangeTracker.State != ObjectState.Unchanged || e.ChangeTracker.ObjectsAddedToCollectionProperties.Any() || e.ChangeTracker.ObjectsRemovedFromCollectionProperties.Any())
                     select e), 
    			OrderDetails = 
                    new List<WAQSWorkshopClient.OrderDetail>(from e in OrderDetailsInternal.AllEntities
                     where e.ChangeTracker.State != ObjectState.CascadeDeleted && (e.ChangeTracker.State != ObjectState.Unchanged || e.ChangeTracker.ObjectsAddedToCollectionProperties.Any() || e.ChangeTracker.ObjectsRemovedFromCollectionProperties.Any())
                     select e), 
    			Orders = 
                    new List<WAQSWorkshopClient.Order>(from e in OrdersInternal.AllEntities
                     where e.ChangeTracker.State != ObjectState.CascadeDeleted && (e.ChangeTracker.State != ObjectState.Unchanged || e.ChangeTracker.ObjectsAddedToCollectionProperties.Any() || e.ChangeTracker.ObjectsRemovedFromCollectionProperties.Any())
                     select e), 
    			Products = 
                    new List<WAQSWorkshopClient.Product>(from e in ProductsInternal.AllEntities
                     where e.ChangeTracker.State != ObjectState.CascadeDeleted && (e.ChangeTracker.State != ObjectState.Unchanged || e.ChangeTracker.ObjectsAddedToCollectionProperties.Any() || e.ChangeTracker.ObjectsRemovedFromCollectionProperties.Any())
                     select e), 
    			Categories = 
                    new List<WAQSWorkshopClient.Category>(from e in CategoriesInternal.AllEntities
                     where e.ChangeTracker.State != ObjectState.CascadeDeleted && (e.ChangeTracker.State != ObjectState.Unchanged || e.ChangeTracker.ObjectsAddedToCollectionProperties.Any() || e.ChangeTracker.ObjectsRemovedFromCollectionProperties.Any())
                     select e) 
            };
        }
    
        public void AcceptAllChanges()
        {
            foreach (var entity in Customers)
                entity.ChangeTracker.AcceptChanges();
            foreach (var entity in Employees)
                entity.ChangeTracker.AcceptChanges();
            foreach (var entity in InvoiceDetails)
                entity.ChangeTracker.AcceptChanges();
            foreach (var entity in Invoices)
                entity.ChangeTracker.AcceptChanges();
            foreach (var entity in OrderDetails)
                entity.ChangeTracker.AcceptChanges();
            foreach (var entity in Orders)
                entity.ChangeTracker.AcceptChanges();
            foreach (var entity in Products)
                entity.ChangeTracker.AcceptChanges();
            foreach (var entity in Categories)
                entity.ChangeTracker.AcceptChanges();
        }
    
        public IClientEntitySet<INorthwindClientContext, T> GetClientEntitySet<T>()
            where T : IObjectWithChangeTracker
        {
            if (typeof(T) == typeof(WAQSWorkshopClient.Category))
                return (IClientEntitySet<INorthwindClientContext, T>)CategoriesInternal;
            if (typeof(T) == typeof(WAQSWorkshopClient.Customer))
                return (IClientEntitySet<INorthwindClientContext, T>)CustomersInternal;
            if (typeof(T) == typeof(WAQSWorkshopClient.Employee))
                return (IClientEntitySet<INorthwindClientContext, T>)EmployeesInternal;
            if (typeof(T) == typeof(WAQSWorkshopClient.Invoice))
                return (IClientEntitySet<INorthwindClientContext, T>)InvoicesInternal;
            if (typeof(T) == typeof(WAQSWorkshopClient.InvoiceDetail))
                return (IClientEntitySet<INorthwindClientContext, T>)InvoiceDetailsInternal;
            if (typeof(T) == typeof(WAQSWorkshopClient.Order))
                return (IClientEntitySet<INorthwindClientContext, T>)OrdersInternal;
            if (typeof(T) == typeof(WAQSWorkshopClient.OrderDetail))
                return (IClientEntitySet<INorthwindClientContext, T>)OrderDetailsInternal;
            if (typeof(T) == typeof(WAQSWorkshopClient.Product))
                return (IClientEntitySet<INorthwindClientContext, T>)ProductsInternal;
            throw new NotImplementedException();
        }
    
        
        public DateTime DbDateTime
        {
            get { throw new InvalidOperationException(); }
        }
        public async Task<DateTime> GetDbDateTimeAsync()
        {
            try
            {
                return await ProxyHelper.ExecuteFuncAsync(ServiceFactory, service => Task.Factory.FromAsync(service.BeginGetDbDateTime(null, null), r => service.EndGetDbDateTime(r)), 0);
            }
            catch (FaultException<FaultDetail> e)
            {
                throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
            }
            catch(Exception e)
            {
                if (IsDisposed)
                    return default(DateTime);
                bool catched = false;
                CatchException(e, ref catched);
                if (catched)
                    return default(DateTime);
                throw e;
            }
        }
    
        public override async Task<IEnumerable<T>> ExecuteQueryAsync<T>(IAsyncQueryable<T> query, MergeOption? mergeOption = null, Func<bool> cancel = null)
        { 
            if (mergeOption == null)
                mergeOption = MergeOption;
            if (mergeOption == MergeOption.NoTracking)
                return await new NorthwindClientContextNoTracking(ServiceFactory).ExecuteQueryAsync(query);
            else
                return await base.ExecuteQueryAsync(query, mergeOption);
        }
        
        public override async Task<T> ExecuteQueryAsync<T>(IAsyncQueryableValue<T> query, MergeOption? mergeOption = null, Func<bool> cancel = null)
        {
            if (mergeOption == null)
                mergeOption = MergeOption;
            if (mergeOption == MergeOption.NoTracking)
                return await new NorthwindClientContextNoTracking(ServiceFactory).ExecuteQueryAsync(query);
            else
                return await base.ExecuteQueryAsync(query, mergeOption);
        }
    
        public override async Task<QueryPage<T>> LoadPageAsync<T>(int pageSize, IAsyncQueryable<T> query, LoadPageParameter[] identifiers, MergeOption? mergeOption = null, Func<bool> cancel = null)
        {
            if (mergeOption == null)
                mergeOption = MergeOption;
            if (mergeOption == MergeOption.NoTracking)
                return await new NorthwindClientContextNoTracking(ServiceFactory).LoadPageAsync<T>(pageSize, query, identifiers, mergeOption);
            return await base.LoadPageAsync<T>(pageSize, query, identifiers, mergeOption);
        }
    
        public override async Task<object[]> ExecuteQueriesAsync(IEnumerable<IAsyncQueryableBase> queries, MergeOption? mergeOption = null, Func<bool> cancel = null)
        {
            if (mergeOption == null)
                mergeOption = MergeOption;
            if (mergeOption == MergeOption.NoTracking)
                return await new NorthwindClientContextNoTracking(ServiceFactory).ExecuteQueriesAsync(queries, mergeOption, cancel);
            return await base.ExecuteQueriesAsync(queries, mergeOption, cancel);
        }
    
        protected override object InstanciateAndAttach(Func<object> getValue, MergeOption? mergeOption)
        {
            var oldMergeOption = MergeOption;
            if (mergeOption.HasValue)
                MergeOption = mergeOption.Value;
            var value = base.InstanciateAndAttach(getValue, mergeOption);
            MergeOption = oldMergeOption;
            return value;
        }
    
        public IEnumerable<Error> ValidateOnClient()
        {
            foreach (var error in Customers.SelectMany(e => e.ValidateOnClient()))
                yield return error;
            foreach (var error in Employees.SelectMany(e => e.ValidateOnClient()))
                yield return error;
            foreach (var error in InvoiceDetails.SelectMany(e => e.ValidateOnClient()))
                yield return error;
            foreach (var error in Invoices.SelectMany(e => e.ValidateOnClient()))
                yield return error;
            foreach (var error in OrderDetails.SelectMany(e => e.ValidateOnClient()))
                yield return error;
            foreach (var error in Orders.SelectMany(e => e.ValidateOnClient()))
                yield return error;
            foreach (var error in Products.SelectMany(e => e.ValidateOnClient()))
                yield return error;
            foreach (var error in Categories.SelectMany(e => e.ValidateOnClient()))
                yield return error;
        }
    
        public void SavingChanges(bool validate)
        {
            SavingChanges();
            if (validate)
            {
                var errors = ValidateOnClient().Where(er => (er.Criticity & Criticity.Error) != 0).ToList();
                if (errors.Count != 0)
                    ErrorException.Throw(errors);
            }
        }
    
        ISerializableContext IClientContext.GetModifiedEntities()
        {
            return GetModifiedEntities();
        }
        
        ISerializableContext IClientContext.GetSerializableContext(ISerializableContext modifiedEntities)
        {
            return GetSerializableContext((NorthwindSerializableContext)modifiedEntities);
        }
    
        public NorthwindSerializableContext GetSerializableContext(NorthwindSerializableContext modifiedEntities)
        {
            NorthwindSerializableContext sentContext;
            sentContext = new NorthwindSerializableContext();
    		var reducedCustomersDictionary = new Dictionary<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>();
            sentContext.Customers = modifiedEntities.Customers.Select(e => 
                {
                    var value = ReduceToModifications(e);
                    reducedCustomersDictionary.Add(e, value);
                    value.ChangeTracker.ChangeTrackingEnabled = true;
                    return value;
                }).ToList();
    		var reducedEmployeesDictionary = new Dictionary<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>();
            sentContext.Employees = modifiedEntities.Employees.Select(e => 
                {
                    var value = ReduceToModifications(e);
                    reducedEmployeesDictionary.Add(e, value);
                    value.ChangeTracker.ChangeTrackingEnabled = true;
                    return value;
                }).ToList();
    		var reducedInvoiceDetailsDictionary = new Dictionary<WAQSWorkshopClient.InvoiceDetail, WAQSWorkshopClient.InvoiceDetail>();
            sentContext.InvoiceDetails = modifiedEntities.InvoiceDetails.Select(e => 
                {
                    var value = ReduceToModifications(e);
                    reducedInvoiceDetailsDictionary.Add(e, value);
                    value.ChangeTracker.ChangeTrackingEnabled = true;
                    return value;
                }).ToList();
    		var reducedInvoicesDictionary = new Dictionary<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>();
            sentContext.Invoices = modifiedEntities.Invoices.Select(e => 
                {
                    var value = ReduceToModifications(e);
                    reducedInvoicesDictionary.Add(e, value);
                    value.ChangeTracker.ChangeTrackingEnabled = true;
                    return value;
                }).ToList();
    		var reducedOrderDetailsDictionary = new Dictionary<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.OrderDetail>();
            sentContext.OrderDetails = modifiedEntities.OrderDetails.Select(e => 
                {
                    var value = ReduceToModifications(e);
                    reducedOrderDetailsDictionary.Add(e, value);
                    value.ChangeTracker.ChangeTrackingEnabled = true;
                    return value;
                }).ToList();
    		var reducedOrdersDictionary = new Dictionary<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>();
            sentContext.Orders = modifiedEntities.Orders.Select(e => 
                {
                    var value = ReduceToModifications(e);
                    reducedOrdersDictionary.Add(e, value);
                    value.ChangeTracker.ChangeTrackingEnabled = true;
                    return value;
                }).ToList();
    		var reducedProductsDictionary = new Dictionary<WAQSWorkshopClient.Product, WAQSWorkshopClient.Product>();
            sentContext.Products = modifiedEntities.Products.Select(e => 
                {
                    var value = ReduceToModifications(e);
                    reducedProductsDictionary.Add(e, value);
                    value.ChangeTracker.ChangeTrackingEnabled = true;
                    return value;
                }).ToList();
    		var reducedCategoriesDictionary = new Dictionary<WAQSWorkshopClient.Category, WAQSWorkshopClient.Category>();
            sentContext.Categories = modifiedEntities.Categories.Select(e => 
                {
                    var value = ReduceToModifications(e);
                    reducedCategoriesDictionary.Add(e, value);
                    value.ChangeTracker.ChangeTrackingEnabled = true;
                    return value;
                }).ToList();
     
    		int nbCustomers = sentContext.Customers.Count;
            for (int index = 0 ; index < nbCustomers ; index ++)
                ReduceNavigationProperties(modifiedEntities.Customers[index], sentContext.Customers[index], reducedInvoicesDictionary, reducedOrdersDictionary);
    		int nbEmployees = sentContext.Employees.Count;
            for (int index = 0 ; index < nbEmployees ; index ++)
                ReduceNavigationProperties(modifiedEntities.Employees[index], sentContext.Employees[index], reducedEmployeesDictionary, reducedOrdersDictionary);
    		int nbInvoiceDetails = sentContext.InvoiceDetails.Count;
            for (int index = 0 ; index < nbInvoiceDetails ; index ++)
                ReduceNavigationProperties(modifiedEntities.InvoiceDetails[index], sentContext.InvoiceDetails[index], reducedInvoicesDictionary, reducedOrderDetailsDictionary);
    		int nbInvoices = sentContext.Invoices.Count;
            for (int index = 0 ; index < nbInvoices ; index ++)
                ReduceNavigationProperties(modifiedEntities.Invoices[index], sentContext.Invoices[index], reducedCustomersDictionary, reducedInvoiceDetailsDictionary, reducedOrdersDictionary);
    		int nbOrderDetails = sentContext.OrderDetails.Count;
            for (int index = 0 ; index < nbOrderDetails ; index ++)
                ReduceNavigationProperties(modifiedEntities.OrderDetails[index], sentContext.OrderDetails[index], reducedInvoiceDetailsDictionary, reducedOrdersDictionary, reducedProductsDictionary);
    		int nbOrders = sentContext.Orders.Count;
            for (int index = 0 ; index < nbOrders ; index ++)
                ReduceNavigationProperties(modifiedEntities.Orders[index], sentContext.Orders[index], reducedCustomersDictionary, reducedEmployeesDictionary, reducedInvoicesDictionary, reducedOrderDetailsDictionary);
    		int nbProducts = sentContext.Products.Count;
            for (int index = 0 ; index < nbProducts ; index ++)
                ReduceNavigationProperties(modifiedEntities.Products[index], sentContext.Products[index], reducedOrderDetailsDictionary, reducedCategoriesDictionary);
    		int nbCategories = sentContext.Categories.Count;
            for (int index = 0 ; index < nbCategories ; index ++)
                ReduceNavigationProperties(modifiedEntities.Categories[index], sentContext.Categories[index], reducedProductsDictionary);
    
            CompleteSavingSentContext(sentContext);
            return sentContext;
        }
    
        void IClientContext.SavedChanges()
        {
            SavedChanges();
        }
    
        Task<ISerializableContext> IClientContext.TrySavingAsync(Func<Task<ISerializableContext>> saveChangesAsync)
        {
            return GetSerializableContextTask(TrySavingAsync(() => GetSavingChangesTask(saveChangesAsync)));
        }
        private async Task<NorthwindSerializableContext> GetSavingChangesTask(Func<Task<ISerializableContext>> saveChangesAsync)
        {
            return (NorthwindSerializableContext)await saveChangesAsync();
        }
        private async Task<ISerializableContext> GetSerializableContextTask(Task<NorthwindSerializableContext> task)
        {
            return await task;
        }
    
        public async Task<NorthwindSerializableContext> TrySavingAsync(Func<Task<NorthwindSerializableContext>> saveChangesAsync)
        {
            try
            {
                return await saveChangesAsync();
            }
            catch (FaultException<ErrorCollection> e)
            {
                if (IsDisposed)
                    return null;
                ErrorException.Throw(e.Detail.Errors, ErrorSource.FromServer); 
            }
            catch (FaultException<NorthwindFaultDetailEntities> e)
            {
                if (IsDisposed)
                    return null;
                EntitiesGot.Clear();
                SavingException.Throw(e.Detail.Entities.Select(entity => GetEntity(entity, false)), e.Detail.ErrorType, e.Detail.ErrorMessage);
            }
            catch (FaultException<FaultDetail> e)
            {
                if (IsDisposed)
                    return null;
                ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage);
            }
            catch(Exception e)
            {
                if (IsDisposed)
                    return null;
                bool catched = false;
                CatchException(e, ref catched);
                if (! catched)
                    throw e;
            }
            return null;
        }
    
        public async Task SaveChangesAsync(bool validate = false)
        {
            SavingChanges(validate);
            if (HasChanges)
            {
                var clientContext = GetModifiedEntities();
                var sentContext = GetSerializableContext(clientContext);
                var saveResult = await TrySavingAsync(() => ProxyHelper.ExecuteFuncAsync(ServiceFactory, service => Task.Factory.FromAsync(service.BeginSaveChanges(sentContext, null, null), ar => service.EndSaveChanges(ar)), 0));
                Refresh(clientContext, saveResult);
            }
            SavedChanges();
        }
    
        partial void SavingChanges();
        partial void CompleteSavingSentContext(NorthwindSerializableContext sentContext);
        partial void SavedChanges();
    
        void IClientContext.Refresh(ISerializableContext clientContext, ISerializableContext dbContext)
        {
            Refresh((NorthwindSerializableContext)clientContext, (NorthwindSerializableContext)dbContext);
        }
        public void Refresh(NorthwindSerializableContext clientContext, NorthwindSerializableContext dbContext)
        {
            int customersCount = clientContext.Customers.Count;
            for (int i = 0 ; i < customersCount ; i ++)
            {
                var clientEntity = clientContext.Customers[i];
                if ((clientEntity.ChangeTracker.State & ObjectState.Deleted) == ObjectState.Deleted)
                {
                    Customers.Detach(clientEntity);
                    continue;
                }
                var dbEntity = dbContext.Customers[i];
                RefreshComputedValues(clientEntity, dbEntity);
                clientEntity.ChangeTracker.AcceptChanges();
            }
            int employeesCount = clientContext.Employees.Count;
            for (int i = 0 ; i < employeesCount ; i ++)
            {
                var clientEntity = clientContext.Employees[i];
                if ((clientEntity.ChangeTracker.State & ObjectState.Deleted) == ObjectState.Deleted)
                {
                    Employees.Detach(clientEntity);
                    continue;
                }
                var dbEntity = dbContext.Employees[i];
                RefreshComputedValues(clientEntity, dbEntity);
                clientEntity.ChangeTracker.AcceptChanges();
            }
            int invoiceDetailsCount = clientContext.InvoiceDetails.Count;
            for (int i = 0 ; i < invoiceDetailsCount ; i ++)
            {
                var clientEntity = clientContext.InvoiceDetails[i];
                if ((clientEntity.ChangeTracker.State & ObjectState.Deleted) == ObjectState.Deleted)
                {
                    InvoiceDetails.Detach(clientEntity);
                    continue;
                }
                var dbEntity = dbContext.InvoiceDetails[i];
                RefreshComputedValues(clientEntity, dbEntity);
                clientEntity.ChangeTracker.AcceptChanges();
            }
            int invoicesCount = clientContext.Invoices.Count;
            for (int i = 0 ; i < invoicesCount ; i ++)
            {
                var clientEntity = clientContext.Invoices[i];
                if ((clientEntity.ChangeTracker.State & ObjectState.Deleted) == ObjectState.Deleted)
                {
                    Invoices.Detach(clientEntity);
                    continue;
                }
                var dbEntity = dbContext.Invoices[i];
                RefreshComputedValues(clientEntity, dbEntity);
                clientEntity.ChangeTracker.AcceptChanges();
            }
            int orderDetailsCount = clientContext.OrderDetails.Count;
            for (int i = 0 ; i < orderDetailsCount ; i ++)
            {
                var clientEntity = clientContext.OrderDetails[i];
                if ((clientEntity.ChangeTracker.State & ObjectState.Deleted) == ObjectState.Deleted)
                {
                    OrderDetails.Detach(clientEntity);
                    continue;
                }
                var dbEntity = dbContext.OrderDetails[i];
                RefreshComputedValues(clientEntity, dbEntity);
                clientEntity.ChangeTracker.AcceptChanges();
            }
            int ordersCount = clientContext.Orders.Count;
            for (int i = 0 ; i < ordersCount ; i ++)
            {
                var clientEntity = clientContext.Orders[i];
                if ((clientEntity.ChangeTracker.State & ObjectState.Deleted) == ObjectState.Deleted)
                {
                    Orders.Detach(clientEntity);
                    continue;
                }
                var dbEntity = dbContext.Orders[i];
                RefreshComputedValues(clientEntity, dbEntity);
                clientEntity.ChangeTracker.AcceptChanges();
            }
            int productsCount = clientContext.Products.Count;
            for (int i = 0 ; i < productsCount ; i ++)
            {
                var clientEntity = clientContext.Products[i];
                if ((clientEntity.ChangeTracker.State & ObjectState.Deleted) == ObjectState.Deleted)
                {
                    Products.Detach(clientEntity);
                    continue;
                }
                var dbEntity = dbContext.Products[i];
                RefreshComputedValues(clientEntity, dbEntity);
                clientEntity.ChangeTracker.AcceptChanges();
            }
            int categoriesCount = clientContext.Categories.Count;
            for (int i = 0 ; i < categoriesCount ; i ++)
            {
                var clientEntity = clientContext.Categories[i];
                if ((clientEntity.ChangeTracker.State & ObjectState.Deleted) == ObjectState.Deleted)
                {
                    Categories.Detach(clientEntity);
                    continue;
                }
                var dbEntity = dbContext.Categories[i];
                RefreshComputedValues(clientEntity, dbEntity);
                clientEntity.ChangeTracker.AcceptChanges();
            }
    	
        }
    
        private object GetEntity(object entity, bool applyState, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            object entityGot;
            if (EntitiesGot.TryGetValue(entity, out entityGot))
                return entityGot;
            var entityAsCustomer = entity as WAQSWorkshopClient.Customer;
            if (entityAsCustomer != null)
                return GetEntity(entityAsCustomer, applyState, defaultState: defaultState, applyDataTransfer: applyDataTransfer);
            var entityAsEmployee = entity as WAQSWorkshopClient.Employee;
            if (entityAsEmployee != null)
                return GetEntity(entityAsEmployee, applyState, defaultState: defaultState, applyDataTransfer: applyDataTransfer);
            var entityAsInvoiceDetail = entity as WAQSWorkshopClient.InvoiceDetail;
            if (entityAsInvoiceDetail != null)
                return GetEntity(entityAsInvoiceDetail, applyState, defaultState: defaultState, applyDataTransfer: applyDataTransfer);
            var entityAsInvoice = entity as WAQSWorkshopClient.Invoice;
            if (entityAsInvoice != null)
                return GetEntity(entityAsInvoice, applyState, defaultState: defaultState, applyDataTransfer: applyDataTransfer);
            var entityAsOrderDetail = entity as WAQSWorkshopClient.OrderDetail;
            if (entityAsOrderDetail != null)
                return GetEntity(entityAsOrderDetail, applyState, defaultState: defaultState, applyDataTransfer: applyDataTransfer);
            var entityAsOrder = entity as WAQSWorkshopClient.Order;
            if (entityAsOrder != null)
                return GetEntity(entityAsOrder, applyState, defaultState: defaultState, applyDataTransfer: applyDataTransfer);
            var entityAsProduct = entity as WAQSWorkshopClient.Product;
            if (entityAsProduct != null)
                return GetEntity(entityAsProduct, applyState, defaultState: defaultState, applyDataTransfer: applyDataTransfer);
            var entityAsCategory = entity as WAQSWorkshopClient.Category;
            if (entityAsCategory != null)
                return GetEntity(entityAsCategory, applyState, defaultState: defaultState, applyDataTransfer: applyDataTransfer);
            return entity;
        }
    
        private object GetEntityInCache(object entity, bool applyDataTransfer = false)
        {
            var entityAsCustomer = entity as WAQSWorkshopClient.Customer;
            if (entityAsCustomer != null)
                return GetEntityInCache(entityAsCustomer, applyDataTransfer);
            var entityAsEmployee = entity as WAQSWorkshopClient.Employee;
            if (entityAsEmployee != null)
                return GetEntityInCache(entityAsEmployee, applyDataTransfer);
            var entityAsInvoiceDetail = entity as WAQSWorkshopClient.InvoiceDetail;
            if (entityAsInvoiceDetail != null)
                return GetEntityInCache(entityAsInvoiceDetail, applyDataTransfer);
            var entityAsInvoice = entity as WAQSWorkshopClient.Invoice;
            if (entityAsInvoice != null)
                return GetEntityInCache(entityAsInvoice, applyDataTransfer);
            var entityAsOrderDetail = entity as WAQSWorkshopClient.OrderDetail;
            if (entityAsOrderDetail != null)
                return GetEntityInCache(entityAsOrderDetail, applyDataTransfer);
            var entityAsOrder = entity as WAQSWorkshopClient.Order;
            if (entityAsOrder != null)
                return GetEntityInCache(entityAsOrder, applyDataTransfer);
            var entityAsProduct = entity as WAQSWorkshopClient.Product;
            if (entityAsProduct != null)
                return GetEntityInCache(entityAsProduct, applyDataTransfer);
            var entityAsCategory = entity as WAQSWorkshopClient.Category;
            if (entityAsCategory != null)
                return GetEntityInCache(entityAsCategory, applyDataTransfer);
            return null;
        }
    
        private void Detach(object entity)
        {
            var entityAsCustomer = entity as WAQSWorkshopClient.Customer;
            if (entityAsCustomer != null)
                Customers.Detach(entityAsCustomer);
            var entityAsEmployee = entity as WAQSWorkshopClient.Employee;
            if (entityAsEmployee != null)
                Employees.Detach(entityAsEmployee);
            var entityAsInvoiceDetail = entity as WAQSWorkshopClient.InvoiceDetail;
            if (entityAsInvoiceDetail != null)
                InvoiceDetails.Detach(entityAsInvoiceDetail);
            var entityAsInvoice = entity as WAQSWorkshopClient.Invoice;
            if (entityAsInvoice != null)
                Invoices.Detach(entityAsInvoice);
            var entityAsOrderDetail = entity as WAQSWorkshopClient.OrderDetail;
            if (entityAsOrderDetail != null)
                OrderDetails.Detach(entityAsOrderDetail);
            var entityAsOrder = entity as WAQSWorkshopClient.Order;
            if (entityAsOrder != null)
                Orders.Detach(entityAsOrder);
            var entityAsProduct = entity as WAQSWorkshopClient.Product;
            if (entityAsProduct != null)
                Products.Detach(entityAsProduct);
            var entityAsCategory = entity as WAQSWorkshopClient.Category;
            if (entityAsCategory != null)
                Categories.Detach(entityAsCategory);
            throw new InvalidOperationException();
        }
    
        IAsyncQueryable<T> IClientContext.GetClientEntitySetAsyncQueryable<T>(ParameterMode? parameterMode)
        {
            var entitySet = GetClientEntitySet<T>();
            if (parameterMode == null)
                return entitySet.AsAsyncQueryable();
            return entitySet.AsAsyncQueryable(parameterMode.Value);
        }
    
        public void AcceptChanges()
        {
            foreach (var entity in Customers)
                entity.ChangeTracker.AcceptChanges();
    
            foreach (var entity in Employees)
                entity.ChangeTracker.AcceptChanges();
    
            foreach (var entity in InvoiceDetails)
                entity.ChangeTracker.AcceptChanges();
    
            foreach (var entity in Invoices)
                entity.ChangeTracker.AcceptChanges();
    
            foreach (var entity in OrderDetails)
                entity.ChangeTracker.AcceptChanges();
    
            foreach (var entity in Orders)
                entity.ChangeTracker.AcceptChanges();
    
            foreach (var entity in Products)
                entity.ChangeTracker.AcceptChanges();
    
            foreach (var entity in Categories)
                entity.ChangeTracker.AcceptChanges();
    
        }
    
        public bool HasChanges
        {
            get 
            {
                if (CustomersInternal.AllEntities.Any(e => e.HasChanges))
                    return true;
                if (EmployeesInternal.AllEntities.Any(e => e.HasChanges))
                    return true;
                if (InvoiceDetailsInternal.AllEntities.Any(e => e.HasChanges))
                    return true;
                if (InvoicesInternal.AllEntities.Any(e => e.HasChanges))
                    return true;
                if (OrderDetailsInternal.AllEntities.Any(e => e.HasChanges))
                    return true;
                if (OrdersInternal.AllEntities.Any(e => e.HasChanges))
                    return true;
                if (ProductsInternal.AllEntities.Any(e => e.HasChanges))
                    return true;
                if (CategoriesInternal.AllEntities.Any(e => e.HasChanges))
                    return true;
                return false;
            }
        }
    
        public async Task<Error[]> ValidateOnServerAsync(Customer entity)
        {
            try
            {
                return await ProxyHelper.ExecuteFuncAsync(ServiceFactory, service => Task.Factory.FromAsync(service.BeginValidateCustomer(entity, null, null), ar => service.EndValidateCustomer(ar)), 0);
            }
            catch (FaultException<FaultDetail> e)
            {
                throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
            }
            catch(Exception e)
            {
                if (IsDisposed)
                    return null;
                bool catched = false;
                CatchException(e, ref catched);
                if (catched)
                    return null;
                throw e;
            }
        }
    
        public async Task<Error[]> ValidateOnServerAsync(Employee entity)
        {
            try
            {
                return await ProxyHelper.ExecuteFuncAsync(ServiceFactory, service => Task.Factory.FromAsync(service.BeginValidateEmployee(entity, null, null), ar => service.EndValidateEmployee(ar)), 0);
            }
            catch (FaultException<FaultDetail> e)
            {
                throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
            }
            catch(Exception e)
            {
                if (IsDisposed)
                    return null;
                bool catched = false;
                CatchException(e, ref catched);
                if (catched)
                    return null;
                throw e;
            }
        }
    
        public async Task<Error[]> ValidateOnServerAsync(InvoiceDetail entity)
        {
            try
            {
                return await ProxyHelper.ExecuteFuncAsync(ServiceFactory, service => Task.Factory.FromAsync(service.BeginValidateInvoiceDetail(entity, null, null), ar => service.EndValidateInvoiceDetail(ar)), 0);
            }
            catch (FaultException<FaultDetail> e)
            {
                throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
            }
            catch(Exception e)
            {
                if (IsDisposed)
                    return null;
                bool catched = false;
                CatchException(e, ref catched);
                if (catched)
                    return null;
                throw e;
            }
        }
    
        public async Task<Error[]> ValidateOnServerAsync(Invoice entity)
        {
            try
            {
                return await ProxyHelper.ExecuteFuncAsync(ServiceFactory, service => Task.Factory.FromAsync(service.BeginValidateInvoice(entity, null, null), ar => service.EndValidateInvoice(ar)), 0);
            }
            catch (FaultException<FaultDetail> e)
            {
                throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
            }
            catch(Exception e)
            {
                if (IsDisposed)
                    return null;
                bool catched = false;
                CatchException(e, ref catched);
                if (catched)
                    return null;
                throw e;
            }
        }
    
        public async Task<Error[]> ValidateOnServerAsync(OrderDetail entity)
        {
            try
            {
                return await ProxyHelper.ExecuteFuncAsync(ServiceFactory, service => Task.Factory.FromAsync(service.BeginValidateOrderDetail(entity, null, null), ar => service.EndValidateOrderDetail(ar)), 0);
            }
            catch (FaultException<FaultDetail> e)
            {
                throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
            }
            catch(Exception e)
            {
                if (IsDisposed)
                    return null;
                bool catched = false;
                CatchException(e, ref catched);
                if (catched)
                    return null;
                throw e;
            }
        }
    
        public async Task<Error[]> ValidateOnServerAsync(Order entity)
        {
            try
            {
                return await ProxyHelper.ExecuteFuncAsync(ServiceFactory, service => Task.Factory.FromAsync(service.BeginValidateOrder(entity, null, null), ar => service.EndValidateOrder(ar)), 0);
            }
            catch (FaultException<FaultDetail> e)
            {
                throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
            }
            catch(Exception e)
            {
                if (IsDisposed)
                    return null;
                bool catched = false;
                CatchException(e, ref catched);
                if (catched)
                    return null;
                throw e;
            }
        }
    
        public async Task<Error[]> ValidateOnServerAsync(Product entity)
        {
            try
            {
                return await ProxyHelper.ExecuteFuncAsync(ServiceFactory, service => Task.Factory.FromAsync(service.BeginValidateProduct(entity, null, null), ar => service.EndValidateProduct(ar)), 0);
            }
            catch (FaultException<FaultDetail> e)
            {
                throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
            }
            catch(Exception e)
            {
                if (IsDisposed)
                    return null;
                bool catched = false;
                CatchException(e, ref catched);
                if (catched)
                    return null;
                throw e;
            }
        }
    
        public async Task<Error[]> ValidateOnServerAsync(Category entity)
        {
            try
            {
                return await ProxyHelper.ExecuteFuncAsync(ServiceFactory, service => Task.Factory.FromAsync(service.BeginValidateCategory(entity, null, null), ar => service.EndValidateCategory(ar)), 0);
            }
            catch (FaultException<FaultDetail> e)
            {
                throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
            }
            catch(Exception e)
            {
                if (IsDisposed)
                    return null;
                bool catched = false;
                CatchException(e, ref catched);
                if (catched)
                    return null;
                throw e;
            }
        }
    
    
        protected override void Dispose(bool disposing)
        {
            if (IsDisposed)
                return ;
            IsDisposed = true;
            if (disposing)
            {
                ClientEntitySetExtensions.ClearDico(this);
                DisposeCategory();
                DisposeCustomer();
                DisposeEmployee();
                DisposeInvoice();
                DisposeInvoiceDetail();
                DisposeOrder();
                DisposeOrderDetail();
                DisposeProduct();
                if (_customers != null) 
                    _customers.Dispose();
                if (_employees != null) 
                    _employees.Dispose();
                if (_invoiceDetails != null) 
                    _invoiceDetails.Dispose();
                if (_invoices != null) 
                    _invoices.Dispose();
                if (_orderDetails != null) 
                    _orderDetails.Dispose();
                if (_orders != null) 
                    _orders.Dispose();
                if (_products != null) 
                    _products.Dispose();
                if (_categories != null) 
                    _categories.Dispose();
            }
        }
    
        private class NorthwindClientContextNoTracking : NorthwindClientContextBase
        {
            public NorthwindClientContextNoTracking(Func<INorthwindService> serviceFactory)
                : base(serviceFactory)
            {
            }
     
            private Dictionary<CategoryKeys, WAQSWorkshopClient.Category> Categories
            {
                get { return _categories ?? (_categories = new Dictionary<CategoryKeys, WAQSWorkshopClient.Category>()); }
            }
            private Dictionary<CategoryKeys, WAQSWorkshopClient.Category> _categories;
    
            protected override WAQSWorkshopClient.Category GetEntity(WAQSWorkshopClient.Category entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
            {
                if (entity == null)
                    return null;
    
                var key = new CategoryKeys { Id = entity.Id };
                WAQSWorkshopClient.Category entityInCache;
                if (Categories.TryGetValue(key, out entityInCache))
                    return entityInCache;
    
                Categories.Add(key, entity);
                entity.ChangeTracker.State = ObjectState.Detached; 
                entity.ChangeTracker.ChangeTrackingEnabled = false;
                return entity;
            } 
     
            private Dictionary<CustomerKeys, WAQSWorkshopClient.Customer> Customers
            {
                get { return _customers ?? (_customers = new Dictionary<CustomerKeys, WAQSWorkshopClient.Customer>()); }
            }
            private Dictionary<CustomerKeys, WAQSWorkshopClient.Customer> _customers;
    
            protected override WAQSWorkshopClient.Customer GetEntity(WAQSWorkshopClient.Customer entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
            {
                if (entity == null)
                    return null;
    
                var key = new CustomerKeys { Id = entity.Id };
                WAQSWorkshopClient.Customer entityInCache;
                if (Customers.TryGetValue(key, out entityInCache))
                    return entityInCache;
    
                Customers.Add(key, entity);
                entity.ChangeTracker.State = ObjectState.Detached; 
                entity.ChangeTracker.ChangeTrackingEnabled = false;
                return entity;
            } 
     
            private Dictionary<EmployeeKeys, WAQSWorkshopClient.Employee> Employees
            {
                get { return _employees ?? (_employees = new Dictionary<EmployeeKeys, WAQSWorkshopClient.Employee>()); }
            }
            private Dictionary<EmployeeKeys, WAQSWorkshopClient.Employee> _employees;
    
            protected override WAQSWorkshopClient.Employee GetEntity(WAQSWorkshopClient.Employee entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
            {
                if (entity == null)
                    return null;
    
                var key = new EmployeeKeys { Id = entity.Id };
                WAQSWorkshopClient.Employee entityInCache;
                if (Employees.TryGetValue(key, out entityInCache))
                    return entityInCache;
    
                Employees.Add(key, entity);
                entity.ChangeTracker.State = ObjectState.Detached; 
                entity.ChangeTracker.ChangeTrackingEnabled = false;
                return entity;
            } 
     
            private Dictionary<InvoiceKeys, WAQSWorkshopClient.Invoice> Invoices
            {
                get { return _invoices ?? (_invoices = new Dictionary<InvoiceKeys, WAQSWorkshopClient.Invoice>()); }
            }
            private Dictionary<InvoiceKeys, WAQSWorkshopClient.Invoice> _invoices;
    
            protected override WAQSWorkshopClient.Invoice GetEntity(WAQSWorkshopClient.Invoice entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
            {
                if (entity == null)
                    return null;
    
                var key = new InvoiceKeys { OrderId = entity.OrderId };
                WAQSWorkshopClient.Invoice entityInCache;
                if (Invoices.TryGetValue(key, out entityInCache))
                    return entityInCache;
    
                Invoices.Add(key, entity);
                entity.ChangeTracker.State = ObjectState.Detached; 
                entity.ChangeTracker.ChangeTrackingEnabled = false;
                return entity;
            } 
     
            private Dictionary<InvoiceDetailKeys, WAQSWorkshopClient.InvoiceDetail> InvoiceDetails
            {
                get { return _invoiceDetails ?? (_invoiceDetails = new Dictionary<InvoiceDetailKeys, WAQSWorkshopClient.InvoiceDetail>()); }
            }
            private Dictionary<InvoiceDetailKeys, WAQSWorkshopClient.InvoiceDetail> _invoiceDetails;
    
            protected override WAQSWorkshopClient.InvoiceDetail GetEntity(WAQSWorkshopClient.InvoiceDetail entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
            {
                if (entity == null)
                    return null;
    
                var key = new InvoiceDetailKeys { OrderDetailId = entity.OrderDetailId };
                WAQSWorkshopClient.InvoiceDetail entityInCache;
                if (InvoiceDetails.TryGetValue(key, out entityInCache))
                    return entityInCache;
    
                InvoiceDetails.Add(key, entity);
                entity.ChangeTracker.State = ObjectState.Detached; 
                entity.ChangeTracker.ChangeTrackingEnabled = false;
                return entity;
            } 
     
            private Dictionary<OrderKeys, WAQSWorkshopClient.Order> Orders
            {
                get { return _orders ?? (_orders = new Dictionary<OrderKeys, WAQSWorkshopClient.Order>()); }
            }
            private Dictionary<OrderKeys, WAQSWorkshopClient.Order> _orders;
    
            protected override WAQSWorkshopClient.Order GetEntity(WAQSWorkshopClient.Order entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
            {
                if (entity == null)
                    return null;
    
                var key = new OrderKeys { Id = entity.Id };
                WAQSWorkshopClient.Order entityInCache;
                if (Orders.TryGetValue(key, out entityInCache))
                    return entityInCache;
    
                Orders.Add(key, entity);
                entity.ChangeTracker.State = ObjectState.Detached; 
                entity.ChangeTracker.ChangeTrackingEnabled = false;
                return entity;
            } 
     
            private Dictionary<OrderDetailKeys, WAQSWorkshopClient.OrderDetail> OrderDetails
            {
                get { return _orderDetails ?? (_orderDetails = new Dictionary<OrderDetailKeys, WAQSWorkshopClient.OrderDetail>()); }
            }
            private Dictionary<OrderDetailKeys, WAQSWorkshopClient.OrderDetail> _orderDetails;
    
            protected override WAQSWorkshopClient.OrderDetail GetEntity(WAQSWorkshopClient.OrderDetail entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
            {
                if (entity == null)
                    return null;
    
                var key = new OrderDetailKeys { Id = entity.Id };
                WAQSWorkshopClient.OrderDetail entityInCache;
                if (OrderDetails.TryGetValue(key, out entityInCache))
                    return entityInCache;
    
                OrderDetails.Add(key, entity);
                entity.ChangeTracker.State = ObjectState.Detached; 
                entity.ChangeTracker.ChangeTrackingEnabled = false;
                return entity;
            } 
     
            private Dictionary<ProductKeys, WAQSWorkshopClient.Product> Products
            {
                get { return _products ?? (_products = new Dictionary<ProductKeys, WAQSWorkshopClient.Product>()); }
            }
            private Dictionary<ProductKeys, WAQSWorkshopClient.Product> _products;
    
            protected override WAQSWorkshopClient.Product GetEntity(WAQSWorkshopClient.Product entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
            {
                if (entity == null)
                    return null;
    
                var key = new ProductKeys { Id = entity.Id };
                WAQSWorkshopClient.Product entityInCache;
                if (Products.TryGetValue(key, out entityInCache))
                    return entityInCache;
    
                Products.Add(key, entity);
                entity.ChangeTracker.State = ObjectState.Detached; 
                entity.ChangeTracker.ChangeTrackingEnabled = false;
                return entity;
            } 
            protected override void Dispose(bool disposing)
            {
                IsDisposed = true;
            }
        }
    }
}
