






using System;
using System.Data.Entity.Core.Mapping;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Infrastructure.MappingViews;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
[assembly: DbMappingViewCacheTypeAttribute(typeof (WAQSWorkshopServer.DAL.NorthwindEntities), typeof (Edm_EntityMappingGeneratedViews.NorthwindNorthwindEntitiesViewsForBaseEntitySets))]
namespace Edm_EntityMappingGeneratedViews
{
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class NorthwindNorthwindEntitiesViewsForBaseEntitySets : DbMappingViewCache
    {
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
                throw new ArgumentNullException("extent");
            var extentName = extent.EntityContainer.Name + "." + extent.Name;
            if (extentName == "NorthwindModelStoreContainer.Customers")
                return GetView0();
            if (extentName == "NorthwindModelStoreContainer.Employees")
                return GetView1();
            if (extentName == "NorthwindModelStoreContainer.InvoiceDetails")
                return GetView2();
            if (extentName == "NorthwindModelStoreContainer.Invoices")
                return GetView3();
            if (extentName == "NorthwindModelStoreContainer.OrderDetails")
                return GetView4();
            if (extentName == "NorthwindModelStoreContainer.Orders")
                return GetView5();
            if (extentName == "NorthwindModelStoreContainer.Products")
                return GetView6();
            if (extentName == "NorthwindModelStoreContainer.Categories")
                return GetView7();
            if (extentName == "NorthwindEntities.Customers")
                return GetView8();
            if (extentName == "NorthwindEntities.Employees")
                return GetView9();
            if (extentName == "NorthwindEntities.InvoiceDetails")
                return GetView10();
            if (extentName == "NorthwindEntities.Invoices")
                return GetView11();
            if (extentName == "NorthwindEntities.OrderDetails")
                return GetView12();
            if (extentName == "NorthwindEntities.Orders")
                return GetView13();
            if (extentName == "NorthwindEntities.Products")
                return GetView14();
            if (extentName == "NorthwindEntities.Categories")
                return GetView15();
            return null;
        }

        /// <Summary>
        /// return view for NorthwindModelStoreContainer.Customers
        /// </Summary>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Customers
        [NorthwindModel.Store.Customers](T1.Customers_Id, T1.Customers_CompanyName, T1.Customers_ContactName, T1.Customers_ContactTitle, T1.Customers_Address, T1.Customers_City, T1.Customers_Region, T1.Customers_PostalCode, T1.Customers_Country, T1.Customers_Phone, T1.Customers_Fax, T1.Customers_IsVIP)
    FROM (
        SELECT 
            T.Id AS Customers_Id, 
            T.CompanyName AS Customers_CompanyName, 
            T.ContactName AS Customers_ContactName, 
            T.ContactTitle AS Customers_ContactTitle, 
            T.Address AS Customers_Address, 
            T.City AS Customers_City, 
            T.Region AS Customers_Region, 
            T.PostalCode AS Customers_PostalCode, 
            T.Country AS Customers_Country, 
            T.Phone AS Customers_Phone, 
            T.Fax AS Customers_Fax, 
            T.IsVIP AS Customers_IsVIP, 
            True AS _from0
        FROM NorthwindEntities.Customers AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindModelStoreContainer.Employees
        /// </Summary>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employees
        [NorthwindModel.Store.Employees](T1.Employees_Id, T1.Employees_LastName, T1.Employees_FirstName, T1.Employees_Title, T1.Employees_TitleOfCourtesy, T1.Employees_BirthDate, T1.Employees_HireDate, T1.Employees_Address, T1.Employees_City, T1.Employees_Region, T1.Employees_PostalCode, T1.Employees_Country, T1.Employees_HomePhone, T1.Employees_Extension, T1.Employees_Photo, T1.Employees_Notes, T1.Employees_ReportsTo, T1.Employees_PhotoPath)
    FROM (
        SELECT 
            T.Id AS Employees_Id, 
            T.LastName AS Employees_LastName, 
            T.FirstName AS Employees_FirstName, 
            T.Title AS Employees_Title, 
            T.TitleOfCourtesy AS Employees_TitleOfCourtesy, 
            T.BirthDate AS Employees_BirthDate, 
            T.HireDate AS Employees_HireDate, 
            T.Address AS Employees_Address, 
            T.City AS Employees_City, 
            T.Region AS Employees_Region, 
            T.PostalCode AS Employees_PostalCode, 
            T.Country AS Employees_Country, 
            T.HomePhone AS Employees_HomePhone, 
            T.Extension AS Employees_Extension, 
            T.Photo AS Employees_Photo, 
            T.Notes AS Employees_Notes, 
            T.ReportsTo AS Employees_ReportsTo, 
            T.PhotoPath AS Employees_PhotoPath, 
            True AS _from0
        FROM NorthwindEntities.Employees AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindModelStoreContainer.InvoiceDetails
        /// </Summary>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InvoiceDetails
        [NorthwindModel.Store.InvoiceDetails](T1.InvoiceDetails_OrderDetailId, T1.InvoiceDetails_InvoiceId, T1.InvoiceDetails_UnitPrice, T1.InvoiceDetails_Quantity, T1.InvoiceDetails_Discount, T1.InvoiceDetails_Amount)
    FROM (
        SELECT 
            T.OrderDetailId AS InvoiceDetails_OrderDetailId, 
            T.InvoiceId AS InvoiceDetails_InvoiceId, 
            T.UnitPrice AS InvoiceDetails_UnitPrice, 
            T.Quantity AS InvoiceDetails_Quantity, 
            T.Discount AS InvoiceDetails_Discount, 
            T.Amount AS InvoiceDetails_Amount, 
            True AS _from0
        FROM NorthwindEntities.InvoiceDetails AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindModelStoreContainer.Invoices
        /// </Summary>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Invoices
        [NorthwindModel.Store.Invoices](T1.Invoices_OrderId, T1.Invoices_CustomerId, T1.Invoices_CustomerCompanyName, T1.Invoices_CustomerContactName, T1.Invoices_Total, T1.Invoices_Dicount, T1.Invoices_Paid)
    FROM (
        SELECT 
            T.OrderId AS Invoices_OrderId, 
            T.CustomerId AS Invoices_CustomerId, 
            T.CustomerCompanyName AS Invoices_CustomerCompanyName, 
            T.CustomerContactName AS Invoices_CustomerContactName, 
            T.Total AS Invoices_Total, 
            T.Dicount AS Invoices_Dicount, 
            T.Paid AS Invoices_Paid, 
            True AS _from0
        FROM NorthwindEntities.Invoices AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindModelStoreContainer.OrderDetails
        /// </Summary>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing OrderDetails
        [NorthwindModel.Store.OrderDetails](T1.OrderDetails_Id, T1.OrderDetails_OrderId, T1.OrderDetails_ProductId, T1.OrderDetails_UnitPrice, T1.OrderDetails_Quantity, T1.OrderDetails_Discount)
    FROM (
        SELECT 
            T.Id AS OrderDetails_Id, 
            T.OrderId AS OrderDetails_OrderId, 
            T.ProductId AS OrderDetails_ProductId, 
            T.UnitPrice AS OrderDetails_UnitPrice, 
            T.Quantity AS OrderDetails_Quantity, 
            T.Discount AS OrderDetails_Discount, 
            True AS _from0
        FROM NorthwindEntities.OrderDetails AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindModelStoreContainer.Orders
        /// </Summary>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Orders
        [NorthwindModel.Store.Orders](T1.Orders_Id, T1.Orders_CustomerId, T1.Orders_EmployeeId, T1.Orders_OrderDate, T1.Orders_RequiredDate, T1.Orders_ShippedDate, T1.Orders_ShipVia, T1.Orders_Freight, T1.Orders_ShipName, T1.Orders_ShipAddress, T1.Orders_ShipCity, T1.Orders_ShipRegion, T1.Orders_ShipPostalCode, T1.Orders_ShipCountry)
    FROM (
        SELECT 
            T.Id AS Orders_Id, 
            T.CustomerId AS Orders_CustomerId, 
            T.EmployeeId AS Orders_EmployeeId, 
            T.OrderDate AS Orders_OrderDate, 
            T.RequiredDate AS Orders_RequiredDate, 
            T.ShippedDate AS Orders_ShippedDate, 
            T.ShipVia AS Orders_ShipVia, 
            T.Freight AS Orders_Freight, 
            T.ShipName AS Orders_ShipName, 
            T.ShipAddress AS Orders_ShipAddress, 
            T.ShipCity AS Orders_ShipCity, 
            T.ShipRegion AS Orders_ShipRegion, 
            T.ShipPostalCode AS Orders_ShipPostalCode, 
            T.ShipCountry AS Orders_ShipCountry, 
            True AS _from0
        FROM NorthwindEntities.Orders AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindModelStoreContainer.Products
        /// </Summary>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Products
        [NorthwindModel.Store.Products](T1.Products_Id, T1.Products_Name, T1.Products_SupplierId, T1.Products_CategoryId, T1.Products_QuantityPerUnit, T1.Products_UnitPrice, T1.Products_Discontinued)
    FROM (
        SELECT 
            T.Id AS Products_Id, 
            T.Name AS Products_Name, 
            T.SupplierId AS Products_SupplierId, 
            T.CategoryId AS Products_CategoryId, 
            T.QuantityPerUnit AS Products_QuantityPerUnit, 
            T.UnitPrice AS Products_UnitPrice, 
            T.Discontinued AS Products_Discontinued, 
            True AS _from0
        FROM NorthwindEntities.Products AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindModelStoreContainer.Categories
        /// </Summary>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Categories
        [NorthwindModel.Store.Categories](T1.Categories_Id, T1.Categories_Name, T1.Categories_Description, T1.Categories_Picture)
    FROM (
        SELECT 
            T.Id AS Categories_Id, 
            T.Name AS Categories_Name, 
            T.Description AS Categories_Description, 
            T.Picture AS Categories_Picture, 
            True AS _from0
        FROM NorthwindEntities.Categories AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindEntities.Customers
        /// </Summary>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Customers
        [NorthwindModel.Customer](T1.Customer_Id, T1.Customer_CompanyName, T1.Customer_ContactName, T1.Customer_ContactTitle, T1.Customer_Address, T1.Customer_City, T1.Customer_Region, T1.Customer_PostalCode, T1.Customer_Country, T1.Customer_Phone, T1.Customer_Fax, T1.Customer_IsVIP)
    FROM (
        SELECT 
            T.Id AS Customer_Id, 
            T.CompanyName AS Customer_CompanyName, 
            T.ContactName AS Customer_ContactName, 
            T.ContactTitle AS Customer_ContactTitle, 
            T.Address AS Customer_Address, 
            T.City AS Customer_City, 
            T.Region AS Customer_Region, 
            T.PostalCode AS Customer_PostalCode, 
            T.Country AS Customer_Country, 
            T.Phone AS Customer_Phone, 
            T.Fax AS Customer_Fax, 
            T.IsVIP AS Customer_IsVIP, 
            True AS _from0
        FROM NorthwindModelStoreContainer.Customers AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindEntities.Employees
        /// </Summary>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employees
        [NorthwindModel.Employee](T1.Employee_Id, T1.Employee_LastName, T1.Employee_FirstName, T1.Employee_Title, T1.Employee_TitleOfCourtesy, T1.Employee_BirthDate, T1.Employee_HireDate, T1.Employee_Address, T1.Employee_City, T1.Employee_Region, T1.Employee_PostalCode, T1.Employee_Country, T1.Employee_HomePhone, T1.Employee_Extension, T1.Employee_Photo, T1.Employee_Notes, T1.Employee_ReportsTo, T1.Employee_PhotoPath)
    FROM (
        SELECT 
            T.Id AS Employee_Id, 
            T.LastName AS Employee_LastName, 
            T.FirstName AS Employee_FirstName, 
            T.Title AS Employee_Title, 
            T.TitleOfCourtesy AS Employee_TitleOfCourtesy, 
            T.BirthDate AS Employee_BirthDate, 
            T.HireDate AS Employee_HireDate, 
            T.Address AS Employee_Address, 
            T.City AS Employee_City, 
            T.Region AS Employee_Region, 
            T.PostalCode AS Employee_PostalCode, 
            T.Country AS Employee_Country, 
            T.HomePhone AS Employee_HomePhone, 
            T.Extension AS Employee_Extension, 
            T.Photo AS Employee_Photo, 
            T.Notes AS Employee_Notes, 
            T.ReportsTo AS Employee_ReportsTo, 
            T.PhotoPath AS Employee_PhotoPath, 
            True AS _from0
        FROM NorthwindModelStoreContainer.Employees AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindEntities.InvoiceDetails
        /// </Summary>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InvoiceDetails
        [NorthwindModel.InvoiceDetail](T1.InvoiceDetail_OrderDetailId, T1.InvoiceDetail_InvoiceId, T1.InvoiceDetail_UnitPrice, T1.InvoiceDetail_Quantity, T1.InvoiceDetail_Discount, T1.InvoiceDetail_Amount)
    FROM (
        SELECT 
            T.OrderDetailId AS InvoiceDetail_OrderDetailId, 
            T.InvoiceId AS InvoiceDetail_InvoiceId, 
            T.UnitPrice AS InvoiceDetail_UnitPrice, 
            T.Quantity AS InvoiceDetail_Quantity, 
            T.Discount AS InvoiceDetail_Discount, 
            T.Amount AS InvoiceDetail_Amount, 
            True AS _from0
        FROM NorthwindModelStoreContainer.InvoiceDetails AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindEntities.Invoices
        /// </Summary>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Invoices
        [NorthwindModel.Invoice](T1.Invoice_OrderId, T1.Invoice_CustomerId, T1.Invoice_CustomerCompanyName, T1.Invoice_CustomerContactName, T1.Invoice_Total, T1.Invoice_Dicount, T1.Invoice_Paid)
    FROM (
        SELECT 
            T.OrderId AS Invoice_OrderId, 
            T.CustomerId AS Invoice_CustomerId, 
            T.CustomerCompanyName AS Invoice_CustomerCompanyName, 
            T.CustomerContactName AS Invoice_CustomerContactName, 
            T.Total AS Invoice_Total, 
            T.Dicount AS Invoice_Dicount, 
            T.Paid AS Invoice_Paid, 
            True AS _from0
        FROM NorthwindModelStoreContainer.Invoices AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindEntities.OrderDetails
        /// </Summary>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing OrderDetails
        [NorthwindModel.OrderDetail](T1.OrderDetail_Id, T1.OrderDetail_OrderId, T1.OrderDetail_ProductId, T1.OrderDetail_UnitPrice, T1.OrderDetail_Quantity, T1.OrderDetail_Discount)
    FROM (
        SELECT 
            T.Id AS OrderDetail_Id, 
            T.OrderId AS OrderDetail_OrderId, 
            T.ProductId AS OrderDetail_ProductId, 
            T.UnitPrice AS OrderDetail_UnitPrice, 
            T.Quantity AS OrderDetail_Quantity, 
            T.Discount AS OrderDetail_Discount, 
            True AS _from0
        FROM NorthwindModelStoreContainer.OrderDetails AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindEntities.Orders
        /// </Summary>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Orders
        [NorthwindModel.Order](T1.Order_Id, T1.Order_CustomerId, T1.Order_EmployeeId, T1.Order_OrderDate, T1.Order_RequiredDate, T1.Order_ShippedDate, T1.Order_ShipVia, T1.Order_Freight, T1.Order_ShipName, T1.Order_ShipAddress, T1.Order_ShipCity, T1.Order_ShipRegion, T1.Order_ShipPostalCode, T1.Order_ShipCountry)
    FROM (
        SELECT 
            T.Id AS Order_Id, 
            T.CustomerId AS Order_CustomerId, 
            T.EmployeeId AS Order_EmployeeId, 
            T.OrderDate AS Order_OrderDate, 
            T.RequiredDate AS Order_RequiredDate, 
            T.ShippedDate AS Order_ShippedDate, 
            T.ShipVia AS Order_ShipVia, 
            T.Freight AS Order_Freight, 
            T.ShipName AS Order_ShipName, 
            T.ShipAddress AS Order_ShipAddress, 
            T.ShipCity AS Order_ShipCity, 
            T.ShipRegion AS Order_ShipRegion, 
            T.ShipPostalCode AS Order_ShipPostalCode, 
            T.ShipCountry AS Order_ShipCountry, 
            True AS _from0
        FROM NorthwindModelStoreContainer.Orders AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindEntities.Products
        /// </Summary>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Products
        [NorthwindModel.Product](T1.Product_Id, T1.Product_Name, T1.Product_SupplierId, T1.Product_CategoryId, T1.Product_QuantityPerUnit, T1.Product_UnitPrice, T1.Product_Discontinued)
    FROM (
        SELECT 
            T.Id AS Product_Id, 
            T.Name AS Product_Name, 
            T.SupplierId AS Product_SupplierId, 
            T.CategoryId AS Product_CategoryId, 
            T.QuantityPerUnit AS Product_QuantityPerUnit, 
            T.UnitPrice AS Product_UnitPrice, 
            T.Discontinued AS Product_Discontinued, 
            True AS _from0
        FROM NorthwindModelStoreContainer.Products AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for NorthwindEntities.Categories
        /// </Summary>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Categories
        [NorthwindModel.Category](T1.Category_Id, T1.Category_Name, T1.Category_Description, T1.Category_Picture)
    FROM (
        SELECT 
            T.Id AS Category_Id, 
            T.Name AS Category_Name, 
            T.Description AS Category_Description, 
            T.Picture AS Category_Picture, 
            True AS _from0
        FROM NorthwindModelStoreContainer.Categories AS T
    ) AS T1");
        }

        private static string _mappingHashValue;
        public override string MappingHashValue
        {
            get
            {
                return _mappingHashValue ?? ComputeMappingHashValue();
            }
        }

        public static string ComputeMappingHashValue()
        {
            return _mappingHashValue = ((StorageMappingItemCollection)new WAQSWorkshopServer.DAL.NorthwindEntities().MetadataWorkspace.GetItemCollection(DataSpace.CSSpace)).ComputeMappingHashValue();
        }
    }
}
