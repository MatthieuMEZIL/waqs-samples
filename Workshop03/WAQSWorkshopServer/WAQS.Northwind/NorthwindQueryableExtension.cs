//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using WAQS.DAL.Interfaces;
using WAQSWorkshopServer.DAL.Interfaces;

namespace WAQSWorkshopServer.Service
{
    public static partial class NorthwindQueryableExtension
    {
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Customer> IncludeInvoices(this IWAQSQuery<WAQSWorkshopServer.Customer> source)
        {
            return IncludeInvoicesWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, IEnumerable<WAQSWorkshopServer.Invoice>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Customer> IncludeInvoicesWithExpression(this IWAQSQuery<WAQSWorkshopServer.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, IEnumerable<WAQSWorkshopServer.Invoice>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, IEnumerable<WAQSWorkshopServer.Invoice>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, ((INorthwindEntities)source.DataContext).Invoices, e => e.Invoices, (e1, e2) => e1.Id == e2.CustomerId, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Invoices);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Customer> IncludeInvoices(this IWAQSQueryValue<WAQSWorkshopServer.Customer> source)
        {
            return IncludeInvoicesWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, IEnumerable<WAQSWorkshopServer.Invoice>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Customer> IncludeInvoicesWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, IEnumerable<WAQSWorkshopServer.Invoice>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, IEnumerable<WAQSWorkshopServer.Invoice>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.Invoices, queryTransform, e => e.Invoices);
        }
    
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Customer> IncludeInvoicesWithExpression(this IWAQSQuery<WAQSWorkshopServer.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, WAQSWorkshopServer.Invoice>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, WAQSWorkshopServer.Invoice>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, e => e.Invoices, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Invoices);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Customer> IncludeInvoicesWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, WAQSWorkshopServer.Invoice>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, WAQSWorkshopServer.Invoice>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.Invoices, queryTransform, e => e.Invoices);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Customer>> IncludeInvoices(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Customer>> source)
        {
            return IncludeInvoicesWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, IEnumerable<WAQSWorkshopServer.Invoice>>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Customer>> IncludeInvoicesWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Customer>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, IEnumerable<WAQSWorkshopServer.Invoice>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, IEnumerable<WAQSWorkshopServer.Invoice>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToMany<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Invoice>(source, e => e.Invoices, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Invoices);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Customer>> IncludeInvoicesWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Customer>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, WAQSWorkshopServer.Invoice>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, WAQSWorkshopServer.Invoice>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Invoice>(source, e => e.Invoices, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Invoices);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Customer> IncludeInvoices(this IEnumerable<WAQSWorkshopServer.Customer> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Customer> IncludeInvoicesWithExpression(this IEnumerable<WAQSWorkshopServer.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, IEnumerable<WAQSWorkshopServer.Invoice>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Customer IncludeInvoices(this WAQSWorkshopServer.Customer source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Customer IncludeInvoicesWithExpression(this WAQSWorkshopServer.Customer source, Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, IEnumerable<WAQSWorkshopServer.Invoice>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Customer> IncludeInvoicesWithExpression(this IEnumerable<WAQSWorkshopServer.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, WAQSWorkshopServer.Invoice>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Customer IncludeInvoicesWithExpression(this WAQSWorkshopServer.Customer source, Expression<Func<IEnumerable<WAQSWorkshopServer.Invoice>, WAQSWorkshopServer.Invoice>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Customer> IncludeOrders(this IWAQSQuery<WAQSWorkshopServer.Customer> source)
        {
            return IncludeOrdersWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Customer> IncludeOrdersWithExpression(this IWAQSQuery<WAQSWorkshopServer.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, ((INorthwindEntities)source.DataContext).Orders, e => e.Orders, (e1, e2) => e1.Id == e2.CustomerId, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Customer> IncludeOrders(this IWAQSQueryValue<WAQSWorkshopServer.Customer> source)
        {
            return IncludeOrdersWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Customer> IncludeOrdersWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.Orders, queryTransform, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Customer> IncludeOrdersWithExpression(this IWAQSQuery<WAQSWorkshopServer.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, e => e.Orders, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Customer> IncludeOrdersWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.Orders, queryTransform, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Customer>> IncludeOrders(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Customer>> source)
        {
            return IncludeOrdersWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Customer>> IncludeOrdersWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Customer>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToMany<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Order>(source, e => e.Orders, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Customer>> IncludeOrdersWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Customer>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Order>(source, e => e.Orders, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Orders);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Customer> IncludeOrders(this IEnumerable<WAQSWorkshopServer.Customer> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Customer> IncludeOrdersWithExpression(this IEnumerable<WAQSWorkshopServer.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Customer IncludeOrders(this WAQSWorkshopServer.Customer source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Customer IncludeOrdersWithExpression(this WAQSWorkshopServer.Customer source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Customer> IncludeOrdersWithExpression(this IEnumerable<WAQSWorkshopServer.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Customer IncludeOrdersWithExpression(this WAQSWorkshopServer.Customer source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Employee> IncludeEmployees1(this IWAQSQuery<WAQSWorkshopServer.Employee> source)
        {
            return IncludeEmployees1WithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, IEnumerable<WAQSWorkshopServer.Employee>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Employee> IncludeEmployees1WithExpression(this IWAQSQuery<WAQSWorkshopServer.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, IEnumerable<WAQSWorkshopServer.Employee>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, IEnumerable<WAQSWorkshopServer.Employee>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, ((INorthwindEntities)source.DataContext).Employees, e => e.Employees1, (e1, e2) => e1.Id == e2.ReportsTo, queryTransform, (e1, e2) => e1.Id == e2.ReportsTo, e => e.Employees1);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Employee> IncludeEmployees1(this IWAQSQueryValue<WAQSWorkshopServer.Employee> source)
        {
            return IncludeEmployees1WithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, IEnumerable<WAQSWorkshopServer.Employee>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Employee> IncludeEmployees1WithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, IEnumerable<WAQSWorkshopServer.Employee>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, IEnumerable<WAQSWorkshopServer.Employee>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.Employees1, queryTransform, e => e.Employees1);
        }
    
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Employee> IncludeEmployees1WithExpression(this IWAQSQuery<WAQSWorkshopServer.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, WAQSWorkshopServer.Employee>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, WAQSWorkshopServer.Employee>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, e => e.Employees1, queryTransform, (e1, e2) => e1.Id == e2.ReportsTo, e => e.Employees1);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Employee> IncludeEmployees1WithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, WAQSWorkshopServer.Employee>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, WAQSWorkshopServer.Employee>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.Employees1, queryTransform, e => e.Employees1);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> IncludeEmployees1(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> source)
        {
            return IncludeEmployees1WithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, IEnumerable<WAQSWorkshopServer.Employee>>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> IncludeEmployees1WithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, IEnumerable<WAQSWorkshopServer.Employee>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, IEnumerable<WAQSWorkshopServer.Employee>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToMany<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>(source, e => e.Employees1, queryTransform, (e1, e2) => e1.Id == e2.ReportsTo, e => e.Employees1);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> IncludeEmployees1WithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, WAQSWorkshopServer.Employee>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, WAQSWorkshopServer.Employee>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>(source, e => e.Employees1, queryTransform, (e1, e2) => e1.Id == e2.ReportsTo, e => e.Employees1);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Employee> IncludeEmployees1(this IEnumerable<WAQSWorkshopServer.Employee> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Employee> IncludeEmployees1WithExpression(this IEnumerable<WAQSWorkshopServer.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, IEnumerable<WAQSWorkshopServer.Employee>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Employee IncludeEmployees1(this WAQSWorkshopServer.Employee source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Employee IncludeEmployees1WithExpression(this WAQSWorkshopServer.Employee source, Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, IEnumerable<WAQSWorkshopServer.Employee>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Employee> IncludeEmployees1WithExpression(this IEnumerable<WAQSWorkshopServer.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, WAQSWorkshopServer.Employee>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Employee IncludeEmployees1WithExpression(this WAQSWorkshopServer.Employee source, Expression<Func<IEnumerable<WAQSWorkshopServer.Employee>, WAQSWorkshopServer.Employee>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Employee> IncludeEmployee1(this IWAQSQuery<WAQSWorkshopServer.Employee> source)
        {
            return IncludeEmployee1WithExpression(source, (Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Employee> IncludeEmployee1WithExpression(this IWAQSQuery<WAQSWorkshopServer.Employee> source, Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyToOne(source, ((INorthwindEntities)source.DataContext).Employees, e => e.Employee1, (e1, e2) => e1.ReportsTo == e2.Id, addIncludes, (e1, e2) => e1.ReportsTo == e2.Id, (e, value) => e.Employee1 = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Employee> IncludeEmployee1(this IWAQSQueryValue<WAQSWorkshopServer.Employee> source)
        {
            return IncludeEmployee1WithExpression(source, (Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Employee> IncludeEmployee1WithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Employee> source, Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneManyToOne(source, e => e.Employee1, addIncludes, (e, value) => e.Employee1 = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> IncludeEmployee1(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> source)
        {
            return IncludeEmployee1WithExpression(source, (Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> IncludeEmployee1WithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> source, Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOne<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>(source, e => e.Employee1, addIncludes, (e1, e2) => e1.ReportsTo == e2.Id, (e, value) => e.Employee1 = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Employee> IncludeEmployee1(this IEnumerable<WAQSWorkshopServer.Employee> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Employee> IncludeEmployee1WithExpression(this IEnumerable<WAQSWorkshopServer.Employee> source, Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Employee IncludeEmployee1(this WAQSWorkshopServer.Employee source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Employee IncludeEmployee1WithExpression(this WAQSWorkshopServer.Employee source, Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Employee> IncludeOrders(this IWAQSQuery<WAQSWorkshopServer.Employee> source)
        {
            return IncludeOrdersWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Employee> IncludeOrdersWithExpression(this IWAQSQuery<WAQSWorkshopServer.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, ((INorthwindEntities)source.DataContext).Orders, e => e.Orders, (e1, e2) => e1.Id == e2.EmployeeId, queryTransform, (e1, e2) => e1.Id == e2.EmployeeId, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Employee> IncludeOrders(this IWAQSQueryValue<WAQSWorkshopServer.Employee> source)
        {
            return IncludeOrdersWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Employee> IncludeOrdersWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.Orders, queryTransform, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Employee> IncludeOrdersWithExpression(this IWAQSQuery<WAQSWorkshopServer.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, e => e.Orders, queryTransform, (e1, e2) => e1.Id == e2.EmployeeId, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Employee> IncludeOrdersWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.Orders, queryTransform, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> IncludeOrders(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> source)
        {
            return IncludeOrdersWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> IncludeOrdersWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToMany<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Order>(source, e => e.Orders, queryTransform, (e1, e2) => e1.Id == e2.EmployeeId, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> IncludeOrdersWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Employee>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Order>(source, e => e.Orders, queryTransform, (e1, e2) => e1.Id == e2.EmployeeId, e => e.Orders);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Employee> IncludeOrders(this IEnumerable<WAQSWorkshopServer.Employee> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Employee> IncludeOrdersWithExpression(this IEnumerable<WAQSWorkshopServer.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Employee IncludeOrders(this WAQSWorkshopServer.Employee source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Employee IncludeOrdersWithExpression(this WAQSWorkshopServer.Employee source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, IEnumerable<WAQSWorkshopServer.Order>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Employee> IncludeOrdersWithExpression(this IEnumerable<WAQSWorkshopServer.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Employee IncludeOrdersWithExpression(this WAQSWorkshopServer.Employee source, Expression<Func<IEnumerable<WAQSWorkshopServer.Order>, WAQSWorkshopServer.Order>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.InvoiceDetail> IncludeInvoice(this IWAQSQuery<WAQSWorkshopServer.InvoiceDetail> source)
        {
            return IncludeInvoiceWithExpression(source, (Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.InvoiceDetail> IncludeInvoiceWithExpression(this IWAQSQuery<WAQSWorkshopServer.InvoiceDetail> source, Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyToOne(source, ((INorthwindEntities)source.DataContext).Invoices, e => e.Invoice, (e1, e2) => e1.InvoiceId == e2.OrderId, addIncludes, (e1, e2) => e1.InvoiceId == e2.OrderId, (e, value) => e.Invoice = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.InvoiceDetail> IncludeInvoice(this IWAQSQueryValue<WAQSWorkshopServer.InvoiceDetail> source)
        {
            return IncludeInvoiceWithExpression(source, (Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.InvoiceDetail> IncludeInvoiceWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.InvoiceDetail> source, Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneManyToOne(source, e => e.Invoice, addIncludes, (e, value) => e.Invoice = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.InvoiceDetail>> IncludeInvoice(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.InvoiceDetail>> source)
        {
            return IncludeInvoiceWithExpression(source, (Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.InvoiceDetail>> IncludeInvoiceWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.InvoiceDetail>> source, Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOne<WAQSWorkshopServer.InvoiceDetail, WAQSWorkshopServer.Invoice>(source, e => e.Invoice, addIncludes, (e1, e2) => e1.InvoiceId == e2.OrderId, (e, value) => e.Invoice = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.InvoiceDetail> IncludeInvoice(this IEnumerable<WAQSWorkshopServer.InvoiceDetail> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.InvoiceDetail> IncludeInvoiceWithExpression(this IEnumerable<WAQSWorkshopServer.InvoiceDetail> source, Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.InvoiceDetail IncludeInvoice(this WAQSWorkshopServer.InvoiceDetail source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.InvoiceDetail IncludeInvoiceWithExpression(this WAQSWorkshopServer.InvoiceDetail source, Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.InvoiceDetail> IncludeOrderDetail(this IWAQSQuery<WAQSWorkshopServer.InvoiceDetail> source)
        {
            return IncludeOrderDetailWithExpression(source, (Expression<Func<WAQSWorkshopServer.OrderDetail, WAQSWorkshopServer.OrderDetail>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.InvoiceDetail> IncludeOrderDetailWithExpression(this IWAQSQuery<WAQSWorkshopServer.InvoiceDetail> source, Expression<Func<WAQSWorkshopServer.OrderDetail, WAQSWorkshopServer.OrderDetail>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyToOne(source, ((INorthwindEntities)source.DataContext).OrderDetails, e => e.OrderDetail, (e1, e2) => e1.OrderDetailId == e2.Id, addIncludes, (e1, e2) => e1.OrderDetailId == e2.Id, (e, value) => e.OrderDetail = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.InvoiceDetail> IncludeOrderDetail(this IWAQSQueryValue<WAQSWorkshopServer.InvoiceDetail> source)
        {
            return IncludeOrderDetailWithExpression(source, (Expression<Func<WAQSWorkshopServer.OrderDetail, WAQSWorkshopServer.OrderDetail>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.InvoiceDetail> IncludeOrderDetailWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.InvoiceDetail> source, Expression<Func<WAQSWorkshopServer.OrderDetail, WAQSWorkshopServer.OrderDetail>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneManyToOne(source, e => e.OrderDetail, addIncludes, (e, value) => e.OrderDetail = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.InvoiceDetail>> IncludeOrderDetail(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.InvoiceDetail>> source)
        {
            return IncludeOrderDetailWithExpression(source, (Expression<Func<WAQSWorkshopServer.OrderDetail, WAQSWorkshopServer.OrderDetail>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.InvoiceDetail>> IncludeOrderDetailWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.InvoiceDetail>> source, Expression<Func<WAQSWorkshopServer.OrderDetail, WAQSWorkshopServer.OrderDetail>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOne<WAQSWorkshopServer.InvoiceDetail, WAQSWorkshopServer.OrderDetail>(source, e => e.OrderDetail, addIncludes, (e1, e2) => e1.OrderDetailId == e2.Id, (e, value) => e.OrderDetail = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.InvoiceDetail> IncludeOrderDetail(this IEnumerable<WAQSWorkshopServer.InvoiceDetail> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.InvoiceDetail> IncludeOrderDetailWithExpression(this IEnumerable<WAQSWorkshopServer.InvoiceDetail> source, Expression<Func<WAQSWorkshopServer.OrderDetail, WAQSWorkshopServer.OrderDetail>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.InvoiceDetail IncludeOrderDetail(this WAQSWorkshopServer.InvoiceDetail source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.InvoiceDetail IncludeOrderDetailWithExpression(this WAQSWorkshopServer.InvoiceDetail source, Expression<Func<WAQSWorkshopServer.OrderDetail, WAQSWorkshopServer.OrderDetail>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Invoice> IncludeCustomer(this IWAQSQuery<WAQSWorkshopServer.Invoice> source)
        {
            return IncludeCustomerWithExpression(source, (Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Invoice> IncludeCustomerWithExpression(this IWAQSQuery<WAQSWorkshopServer.Invoice> source, Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyToOne(source, ((INorthwindEntities)source.DataContext).Customers, e => e.Customer, (e1, e2) => e1.CustomerId == e2.Id, addIncludes, (e1, e2) => e1.CustomerId == e2.Id, (e, value) => e.Customer = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Invoice> IncludeCustomer(this IWAQSQueryValue<WAQSWorkshopServer.Invoice> source)
        {
            return IncludeCustomerWithExpression(source, (Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Invoice> IncludeCustomerWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Invoice> source, Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneManyToOne(source, e => e.Customer, addIncludes, (e, value) => e.Customer = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Invoice>> IncludeCustomer(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Invoice>> source)
        {
            return IncludeCustomerWithExpression(source, (Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Invoice>> IncludeCustomerWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Invoice>> source, Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOne<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Customer>(source, e => e.Customer, addIncludes, (e1, e2) => e1.CustomerId == e2.Id, (e, value) => e.Customer = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Invoice> IncludeCustomer(this IEnumerable<WAQSWorkshopServer.Invoice> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Invoice> IncludeCustomerWithExpression(this IEnumerable<WAQSWorkshopServer.Invoice> source, Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Invoice IncludeCustomer(this WAQSWorkshopServer.Invoice source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Invoice IncludeCustomerWithExpression(this WAQSWorkshopServer.Invoice source, Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Invoice> IncludeInvoiceDetails(this IWAQSQuery<WAQSWorkshopServer.Invoice> source)
        {
            return IncludeInvoiceDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, IEnumerable<WAQSWorkshopServer.InvoiceDetail>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Invoice> IncludeInvoiceDetailsWithExpression(this IWAQSQuery<WAQSWorkshopServer.Invoice> source, Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, IEnumerable<WAQSWorkshopServer.InvoiceDetail>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, IEnumerable<WAQSWorkshopServer.InvoiceDetail>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, ((INorthwindEntities)source.DataContext).InvoiceDetails, e => e.InvoiceDetails, (e1, e2) => e1.OrderId == e2.InvoiceId, queryTransform, (e1, e2) => e1.OrderId == e2.InvoiceId, e => e.InvoiceDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Invoice> IncludeInvoiceDetails(this IWAQSQueryValue<WAQSWorkshopServer.Invoice> source)
        {
            return IncludeInvoiceDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, IEnumerable<WAQSWorkshopServer.InvoiceDetail>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Invoice> IncludeInvoiceDetailsWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Invoice> source, Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, IEnumerable<WAQSWorkshopServer.InvoiceDetail>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, IEnumerable<WAQSWorkshopServer.InvoiceDetail>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.InvoiceDetails, queryTransform, e => e.InvoiceDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Invoice> IncludeInvoiceDetailsWithExpression(this IWAQSQuery<WAQSWorkshopServer.Invoice> source, Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, WAQSWorkshopServer.InvoiceDetail>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, WAQSWorkshopServer.InvoiceDetail>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, e => e.InvoiceDetails, queryTransform, (e1, e2) => e1.OrderId == e2.InvoiceId, e => e.InvoiceDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Invoice> IncludeInvoiceDetailsWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Invoice> source, Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, WAQSWorkshopServer.InvoiceDetail>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, WAQSWorkshopServer.InvoiceDetail>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.InvoiceDetails, queryTransform, e => e.InvoiceDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Invoice>> IncludeInvoiceDetails(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Invoice>> source)
        {
            return IncludeInvoiceDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, IEnumerable<WAQSWorkshopServer.InvoiceDetail>>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Invoice>> IncludeInvoiceDetailsWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Invoice>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, IEnumerable<WAQSWorkshopServer.InvoiceDetail>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, IEnumerable<WAQSWorkshopServer.InvoiceDetail>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToMany<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.InvoiceDetail>(source, e => e.InvoiceDetails, queryTransform, (e1, e2) => e1.OrderId == e2.InvoiceId, e => e.InvoiceDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Invoice>> IncludeInvoiceDetailsWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Invoice>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, WAQSWorkshopServer.InvoiceDetail>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, WAQSWorkshopServer.InvoiceDetail>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.InvoiceDetail>(source, e => e.InvoiceDetails, queryTransform, (e1, e2) => e1.OrderId == e2.InvoiceId, e => e.InvoiceDetails);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Invoice> IncludeInvoiceDetails(this IEnumerable<WAQSWorkshopServer.Invoice> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Invoice> IncludeInvoiceDetailsWithExpression(this IEnumerable<WAQSWorkshopServer.Invoice> source, Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, IEnumerable<WAQSWorkshopServer.InvoiceDetail>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Invoice IncludeInvoiceDetails(this WAQSWorkshopServer.Invoice source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Invoice IncludeInvoiceDetailsWithExpression(this WAQSWorkshopServer.Invoice source, Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, IEnumerable<WAQSWorkshopServer.InvoiceDetail>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Invoice> IncludeInvoiceDetailsWithExpression(this IEnumerable<WAQSWorkshopServer.Invoice> source, Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, WAQSWorkshopServer.InvoiceDetail>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Invoice IncludeInvoiceDetailsWithExpression(this WAQSWorkshopServer.Invoice source, Expression<Func<IEnumerable<WAQSWorkshopServer.InvoiceDetail>, WAQSWorkshopServer.InvoiceDetail>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Invoice> IncludeOrder(this IWAQSQuery<WAQSWorkshopServer.Invoice> source)
        {
            return IncludeOrderWithExpression(source, (Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Invoice> IncludeOrderWithExpression(this IWAQSQuery<WAQSWorkshopServer.Invoice> source, Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyToOne(source, ((INorthwindEntities)source.DataContext).Orders, e => e.Order, (e1, e2) => e1.OrderId == e2.Id, addIncludes, (e1, e2) => e1.OrderId == e2.Id, (e, value) => e.Order = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Invoice> IncludeOrder(this IWAQSQueryValue<WAQSWorkshopServer.Invoice> source)
        {
            return IncludeOrderWithExpression(source, (Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Invoice> IncludeOrderWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Invoice> source, Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneManyToOne(source, e => e.Order, addIncludes, (e, value) => e.Order = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Invoice>> IncludeOrder(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Invoice>> source)
        {
            return IncludeOrderWithExpression(source, (Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Invoice>> IncludeOrderWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Invoice>> source, Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOne<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Order>(source, e => e.Order, addIncludes, (e1, e2) => e1.OrderId == e2.Id, (e, value) => e.Order = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Invoice> IncludeOrder(this IEnumerable<WAQSWorkshopServer.Invoice> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Invoice> IncludeOrderWithExpression(this IEnumerable<WAQSWorkshopServer.Invoice> source, Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Invoice IncludeOrder(this WAQSWorkshopServer.Invoice source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Invoice IncludeOrderWithExpression(this WAQSWorkshopServer.Invoice source, Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.OrderDetail> IncludeInvoiceDetail(this IWAQSQuery<WAQSWorkshopServer.OrderDetail> source)
        {
            return IncludeInvoiceDetailWithExpression(source, (Expression<Func<WAQSWorkshopServer.InvoiceDetail, WAQSWorkshopServer.InvoiceDetail>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.OrderDetail> IncludeInvoiceDetailWithExpression(this IWAQSQuery<WAQSWorkshopServer.OrderDetail> source, Expression<Func<WAQSWorkshopServer.InvoiceDetail, WAQSWorkshopServer.InvoiceDetail>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyToOne(source, ((INorthwindEntities)source.DataContext).InvoiceDetails, e => e.InvoiceDetail, (e1, e2) => e1.Id == e2.OrderDetailId, addIncludes, (e1, e2) => e1.Id == e2.OrderDetailId, (e, value) => e.InvoiceDetail = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.OrderDetail> IncludeInvoiceDetail(this IWAQSQueryValue<WAQSWorkshopServer.OrderDetail> source)
        {
            return IncludeInvoiceDetailWithExpression(source, (Expression<Func<WAQSWorkshopServer.InvoiceDetail, WAQSWorkshopServer.InvoiceDetail>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.OrderDetail> IncludeInvoiceDetailWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.OrderDetail> source, Expression<Func<WAQSWorkshopServer.InvoiceDetail, WAQSWorkshopServer.InvoiceDetail>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneManyToOne(source, e => e.InvoiceDetail, addIncludes, (e, value) => e.InvoiceDetail = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.OrderDetail>> IncludeInvoiceDetail(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.OrderDetail>> source)
        {
            return IncludeInvoiceDetailWithExpression(source, (Expression<Func<WAQSWorkshopServer.InvoiceDetail, WAQSWorkshopServer.InvoiceDetail>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.OrderDetail>> IncludeInvoiceDetailWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.OrderDetail>> source, Expression<Func<WAQSWorkshopServer.InvoiceDetail, WAQSWorkshopServer.InvoiceDetail>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOne<WAQSWorkshopServer.OrderDetail, WAQSWorkshopServer.InvoiceDetail>(source, e => e.InvoiceDetail, addIncludes, (e1, e2) => e1.Id == e2.OrderDetailId, (e, value) => e.InvoiceDetail = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.OrderDetail> IncludeInvoiceDetail(this IEnumerable<WAQSWorkshopServer.OrderDetail> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.OrderDetail> IncludeInvoiceDetailWithExpression(this IEnumerable<WAQSWorkshopServer.OrderDetail> source, Expression<Func<WAQSWorkshopServer.InvoiceDetail, WAQSWorkshopServer.InvoiceDetail>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.OrderDetail IncludeInvoiceDetail(this WAQSWorkshopServer.OrderDetail source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.OrderDetail IncludeInvoiceDetailWithExpression(this WAQSWorkshopServer.OrderDetail source, Expression<Func<WAQSWorkshopServer.InvoiceDetail, WAQSWorkshopServer.InvoiceDetail>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.OrderDetail> IncludeOrder(this IWAQSQuery<WAQSWorkshopServer.OrderDetail> source)
        {
            return IncludeOrderWithExpression(source, (Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.OrderDetail> IncludeOrderWithExpression(this IWAQSQuery<WAQSWorkshopServer.OrderDetail> source, Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyToOne(source, ((INorthwindEntities)source.DataContext).Orders, e => e.Order, (e1, e2) => e1.OrderId == e2.Id, addIncludes, (e1, e2) => e1.OrderId == e2.Id, (e, value) => e.Order = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.OrderDetail> IncludeOrder(this IWAQSQueryValue<WAQSWorkshopServer.OrderDetail> source)
        {
            return IncludeOrderWithExpression(source, (Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.OrderDetail> IncludeOrderWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.OrderDetail> source, Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneManyToOne(source, e => e.Order, addIncludes, (e, value) => e.Order = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.OrderDetail>> IncludeOrder(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.OrderDetail>> source)
        {
            return IncludeOrderWithExpression(source, (Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.OrderDetail>> IncludeOrderWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.OrderDetail>> source, Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOne<WAQSWorkshopServer.OrderDetail, WAQSWorkshopServer.Order>(source, e => e.Order, addIncludes, (e1, e2) => e1.OrderId == e2.Id, (e, value) => e.Order = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.OrderDetail> IncludeOrder(this IEnumerable<WAQSWorkshopServer.OrderDetail> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.OrderDetail> IncludeOrderWithExpression(this IEnumerable<WAQSWorkshopServer.OrderDetail> source, Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.OrderDetail IncludeOrder(this WAQSWorkshopServer.OrderDetail source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.OrderDetail IncludeOrderWithExpression(this WAQSWorkshopServer.OrderDetail source, Expression<Func<WAQSWorkshopServer.Order, WAQSWorkshopServer.Order>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.OrderDetail> IncludeProduct(this IWAQSQuery<WAQSWorkshopServer.OrderDetail> source)
        {
            return IncludeProductWithExpression(source, (Expression<Func<WAQSWorkshopServer.Product, WAQSWorkshopServer.Product>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.OrderDetail> IncludeProductWithExpression(this IWAQSQuery<WAQSWorkshopServer.OrderDetail> source, Expression<Func<WAQSWorkshopServer.Product, WAQSWorkshopServer.Product>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyToOne(source, ((INorthwindEntities)source.DataContext).Products, e => e.Product, (e1, e2) => e1.ProductId == e2.Id, addIncludes, (e1, e2) => e1.ProductId == e2.Id, (e, value) => e.Product = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.OrderDetail> IncludeProduct(this IWAQSQueryValue<WAQSWorkshopServer.OrderDetail> source)
        {
            return IncludeProductWithExpression(source, (Expression<Func<WAQSWorkshopServer.Product, WAQSWorkshopServer.Product>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.OrderDetail> IncludeProductWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.OrderDetail> source, Expression<Func<WAQSWorkshopServer.Product, WAQSWorkshopServer.Product>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneManyToOne(source, e => e.Product, addIncludes, (e, value) => e.Product = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.OrderDetail>> IncludeProduct(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.OrderDetail>> source)
        {
            return IncludeProductWithExpression(source, (Expression<Func<WAQSWorkshopServer.Product, WAQSWorkshopServer.Product>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.OrderDetail>> IncludeProductWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.OrderDetail>> source, Expression<Func<WAQSWorkshopServer.Product, WAQSWorkshopServer.Product>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOne<WAQSWorkshopServer.OrderDetail, WAQSWorkshopServer.Product>(source, e => e.Product, addIncludes, (e1, e2) => e1.ProductId == e2.Id, (e, value) => e.Product = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.OrderDetail> IncludeProduct(this IEnumerable<WAQSWorkshopServer.OrderDetail> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.OrderDetail> IncludeProductWithExpression(this IEnumerable<WAQSWorkshopServer.OrderDetail> source, Expression<Func<WAQSWorkshopServer.Product, WAQSWorkshopServer.Product>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.OrderDetail IncludeProduct(this WAQSWorkshopServer.OrderDetail source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.OrderDetail IncludeProductWithExpression(this WAQSWorkshopServer.OrderDetail source, Expression<Func<WAQSWorkshopServer.Product, WAQSWorkshopServer.Product>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Order> IncludeCustomer(this IWAQSQuery<WAQSWorkshopServer.Order> source)
        {
            return IncludeCustomerWithExpression(source, (Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Order> IncludeCustomerWithExpression(this IWAQSQuery<WAQSWorkshopServer.Order> source, Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyToOne(source, ((INorthwindEntities)source.DataContext).Customers, e => e.Customer, (e1, e2) => e1.CustomerId == e2.Id, addIncludes, (e1, e2) => e1.CustomerId == e2.Id, (e, value) => e.Customer = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Order> IncludeCustomer(this IWAQSQueryValue<WAQSWorkshopServer.Order> source)
        {
            return IncludeCustomerWithExpression(source, (Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Order> IncludeCustomerWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Order> source, Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneManyToOne(source, e => e.Customer, addIncludes, (e, value) => e.Customer = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> IncludeCustomer(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> source)
        {
            return IncludeCustomerWithExpression(source, (Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> IncludeCustomerWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> source, Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOne<WAQSWorkshopServer.Order, WAQSWorkshopServer.Customer>(source, e => e.Customer, addIncludes, (e1, e2) => e1.CustomerId == e2.Id, (e, value) => e.Customer = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Order> IncludeCustomer(this IEnumerable<WAQSWorkshopServer.Order> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Order> IncludeCustomerWithExpression(this IEnumerable<WAQSWorkshopServer.Order> source, Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Order IncludeCustomer(this WAQSWorkshopServer.Order source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Order IncludeCustomerWithExpression(this WAQSWorkshopServer.Order source, Expression<Func<WAQSWorkshopServer.Customer, WAQSWorkshopServer.Customer>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Order> IncludeEmployee(this IWAQSQuery<WAQSWorkshopServer.Order> source)
        {
            return IncludeEmployeeWithExpression(source, (Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Order> IncludeEmployeeWithExpression(this IWAQSQuery<WAQSWorkshopServer.Order> source, Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyToOne(source, ((INorthwindEntities)source.DataContext).Employees, e => e.Employee, (e1, e2) => e1.EmployeeId == e2.Id, addIncludes, (e1, e2) => e1.EmployeeId == e2.Id, (e, value) => e.Employee = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Order> IncludeEmployee(this IWAQSQueryValue<WAQSWorkshopServer.Order> source)
        {
            return IncludeEmployeeWithExpression(source, (Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Order> IncludeEmployeeWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Order> source, Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneManyToOne(source, e => e.Employee, addIncludes, (e, value) => e.Employee = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> IncludeEmployee(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> source)
        {
            return IncludeEmployeeWithExpression(source, (Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> IncludeEmployeeWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> source, Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOne<WAQSWorkshopServer.Order, WAQSWorkshopServer.Employee>(source, e => e.Employee, addIncludes, (e1, e2) => e1.EmployeeId == e2.Id, (e, value) => e.Employee = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Order> IncludeEmployee(this IEnumerable<WAQSWorkshopServer.Order> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Order> IncludeEmployeeWithExpression(this IEnumerable<WAQSWorkshopServer.Order> source, Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Order IncludeEmployee(this WAQSWorkshopServer.Order source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Order IncludeEmployeeWithExpression(this WAQSWorkshopServer.Order source, Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Employee>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Order> IncludeInvoice(this IWAQSQuery<WAQSWorkshopServer.Order> source)
        {
            return IncludeInvoiceWithExpression(source, (Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Order> IncludeInvoiceWithExpression(this IWAQSQuery<WAQSWorkshopServer.Order> source, Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyToOne(source, ((INorthwindEntities)source.DataContext).Invoices, e => e.Invoice, (e1, e2) => e1.Id == e2.OrderId, addIncludes, (e1, e2) => e1.Id == e2.OrderId, (e, value) => e.Invoice = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Order> IncludeInvoice(this IWAQSQueryValue<WAQSWorkshopServer.Order> source)
        {
            return IncludeInvoiceWithExpression(source, (Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Order> IncludeInvoiceWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Order> source, Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneManyToOne(source, e => e.Invoice, addIncludes, (e, value) => e.Invoice = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> IncludeInvoice(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> source)
        {
            return IncludeInvoiceWithExpression(source, (Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> IncludeInvoiceWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> source, Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOne<WAQSWorkshopServer.Order, WAQSWorkshopServer.Invoice>(source, e => e.Invoice, addIncludes, (e1, e2) => e1.Id == e2.OrderId, (e, value) => e.Invoice = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Order> IncludeInvoice(this IEnumerable<WAQSWorkshopServer.Order> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Order> IncludeInvoiceWithExpression(this IEnumerable<WAQSWorkshopServer.Order> source, Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Order IncludeInvoice(this WAQSWorkshopServer.Order source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Order IncludeInvoiceWithExpression(this WAQSWorkshopServer.Order source, Expression<Func<WAQSWorkshopServer.Invoice, WAQSWorkshopServer.Invoice>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Order> IncludeOrderDetails(this IWAQSQuery<WAQSWorkshopServer.Order> source)
        {
            return IncludeOrderDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Order> IncludeOrderDetailsWithExpression(this IWAQSQuery<WAQSWorkshopServer.Order> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, ((INorthwindEntities)source.DataContext).OrderDetails, e => e.OrderDetails, (e1, e2) => e1.Id == e2.OrderId, queryTransform, (e1, e2) => e1.Id == e2.OrderId, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Order> IncludeOrderDetails(this IWAQSQueryValue<WAQSWorkshopServer.Order> source)
        {
            return IncludeOrderDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Order> IncludeOrderDetailsWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Order> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.OrderDetails, queryTransform, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Order> IncludeOrderDetailsWithExpression(this IWAQSQuery<WAQSWorkshopServer.Order> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, e => e.OrderDetails, queryTransform, (e1, e2) => e1.Id == e2.OrderId, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Order> IncludeOrderDetailsWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Order> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.OrderDetails, queryTransform, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> IncludeOrderDetails(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> source)
        {
            return IncludeOrderDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> IncludeOrderDetailsWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToMany<WAQSWorkshopServer.Order, WAQSWorkshopServer.OrderDetail>(source, e => e.OrderDetails, queryTransform, (e1, e2) => e1.Id == e2.OrderId, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> IncludeOrderDetailsWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Order>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopServer.Order, WAQSWorkshopServer.OrderDetail>(source, e => e.OrderDetails, queryTransform, (e1, e2) => e1.Id == e2.OrderId, e => e.OrderDetails);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Order> IncludeOrderDetails(this IEnumerable<WAQSWorkshopServer.Order> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Order> IncludeOrderDetailsWithExpression(this IEnumerable<WAQSWorkshopServer.Order> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Order IncludeOrderDetails(this WAQSWorkshopServer.Order source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Order IncludeOrderDetailsWithExpression(this WAQSWorkshopServer.Order source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Order> IncludeOrderDetailsWithExpression(this IEnumerable<WAQSWorkshopServer.Order> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Order IncludeOrderDetailsWithExpression(this WAQSWorkshopServer.Order source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Product> IncludeOrderDetails(this IWAQSQuery<WAQSWorkshopServer.Product> source)
        {
            return IncludeOrderDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Product> IncludeOrderDetailsWithExpression(this IWAQSQuery<WAQSWorkshopServer.Product> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, ((INorthwindEntities)source.DataContext).OrderDetails, e => e.OrderDetails, (e1, e2) => e1.Id == e2.ProductId, queryTransform, (e1, e2) => e1.Id == e2.ProductId, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Product> IncludeOrderDetails(this IWAQSQueryValue<WAQSWorkshopServer.Product> source)
        {
            return IncludeOrderDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Product> IncludeOrderDetailsWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Product> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.OrderDetails, queryTransform, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Product> IncludeOrderDetailsWithExpression(this IWAQSQuery<WAQSWorkshopServer.Product> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, e => e.OrderDetails, queryTransform, (e1, e2) => e1.Id == e2.ProductId, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Product> IncludeOrderDetailsWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Product> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.OrderDetails, queryTransform, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Product>> IncludeOrderDetails(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Product>> source)
        {
            return IncludeOrderDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Product>> IncludeOrderDetailsWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Product>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToMany<WAQSWorkshopServer.Product, WAQSWorkshopServer.OrderDetail>(source, e => e.OrderDetails, queryTransform, (e1, e2) => e1.Id == e2.ProductId, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Product>> IncludeOrderDetailsWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Product>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopServer.Product, WAQSWorkshopServer.OrderDetail>(source, e => e.OrderDetails, queryTransform, (e1, e2) => e1.Id == e2.ProductId, e => e.OrderDetails);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Product> IncludeOrderDetails(this IEnumerable<WAQSWorkshopServer.Product> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Product> IncludeOrderDetailsWithExpression(this IEnumerable<WAQSWorkshopServer.Product> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Product IncludeOrderDetails(this WAQSWorkshopServer.Product source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Product IncludeOrderDetailsWithExpression(this WAQSWorkshopServer.Product source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, IEnumerable<WAQSWorkshopServer.OrderDetail>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Product> IncludeOrderDetailsWithExpression(this IEnumerable<WAQSWorkshopServer.Product> source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Product IncludeOrderDetailsWithExpression(this WAQSWorkshopServer.Product source, Expression<Func<IEnumerable<WAQSWorkshopServer.OrderDetail>, WAQSWorkshopServer.OrderDetail>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Product> IncludeCategory(this IWAQSQuery<WAQSWorkshopServer.Product> source)
        {
            return IncludeCategoryWithExpression(source, (Expression<Func<WAQSWorkshopServer.Category, WAQSWorkshopServer.Category>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Product> IncludeCategoryWithExpression(this IWAQSQuery<WAQSWorkshopServer.Product> source, Expression<Func<WAQSWorkshopServer.Category, WAQSWorkshopServer.Category>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyToOne(source, ((INorthwindEntities)source.DataContext).Categories, e => e.Category, (e1, e2) => e1.CategoryId == e2.Id, addIncludes, (e1, e2) => e1.CategoryId == e2.Id, (e, value) => e.Category = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Product> IncludeCategory(this IWAQSQueryValue<WAQSWorkshopServer.Product> source)
        {
            return IncludeCategoryWithExpression(source, (Expression<Func<WAQSWorkshopServer.Category, WAQSWorkshopServer.Category>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Product> IncludeCategoryWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Product> source, Expression<Func<WAQSWorkshopServer.Category, WAQSWorkshopServer.Category>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneManyToOne(source, e => e.Category, addIncludes, (e, value) => e.Category = value);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Product>> IncludeCategory(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Product>> source)
        {
            return IncludeCategoryWithExpression(source, (Expression<Func<WAQSWorkshopServer.Category, WAQSWorkshopServer.Category>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Product>> IncludeCategoryWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Product>> source, Expression<Func<WAQSWorkshopServer.Category, WAQSWorkshopServer.Category>> addIncludes)
        {
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOne<WAQSWorkshopServer.Product, WAQSWorkshopServer.Category>(source, e => e.Category, addIncludes, (e1, e2) => e1.CategoryId == e2.Id, (e, value) => e.Category = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Product> IncludeCategory(this IEnumerable<WAQSWorkshopServer.Product> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Product> IncludeCategoryWithExpression(this IEnumerable<WAQSWorkshopServer.Product> source, Expression<Func<WAQSWorkshopServer.Category, WAQSWorkshopServer.Category>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Product IncludeCategory(this WAQSWorkshopServer.Product source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Product IncludeCategoryWithExpression(this WAQSWorkshopServer.Product source, Expression<Func<WAQSWorkshopServer.Category, WAQSWorkshopServer.Category>> queryTransform)
        {
            return source;
        }
        
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Category> IncludeProducts(this IWAQSQuery<WAQSWorkshopServer.Category> source)
        {
            return IncludeProductsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, IEnumerable<WAQSWorkshopServer.Product>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Category> IncludeProductsWithExpression(this IWAQSQuery<WAQSWorkshopServer.Category> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, IEnumerable<WAQSWorkshopServer.Product>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, IEnumerable<WAQSWorkshopServer.Product>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, ((INorthwindEntities)source.DataContext).Products, e => e.Products, (e1, e2) => e1.Id == e2.CategoryId, queryTransform, (e1, e2) => e1.Id == e2.CategoryId, e => e.Products);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Category> IncludeProducts(this IWAQSQueryValue<WAQSWorkshopServer.Category> source)
        {
            return IncludeProductsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, IEnumerable<WAQSWorkshopServer.Product>>>)null);
        }
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Category> IncludeProductsWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Category> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, IEnumerable<WAQSWorkshopServer.Product>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, IEnumerable<WAQSWorkshopServer.Product>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.Products, queryTransform, e => e.Products);
        }
    
        [IncludeMethod]
        public static IWAQSQuery<WAQSWorkshopServer.Category> IncludeProductsWithExpression(this IWAQSQuery<WAQSWorkshopServer.Category> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, WAQSWorkshopServer.Product>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, WAQSWorkshopServer.Product>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneToMany(source, e => e.Products, queryTransform, (e1, e2) => e1.Id == e2.CategoryId, e => e.Products);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<WAQSWorkshopServer.Category> IncludeProductsWithExpression(this IWAQSQueryValue<WAQSWorkshopServer.Category> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, WAQSWorkshopServer.Product>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, WAQSWorkshopServer.Product>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeOneOneToMany(source, e => e.Products, queryTransform, e => e.Products);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Category>> IncludeProducts(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Category>> source)
        {
            return IncludeProductsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, IEnumerable<WAQSWorkshopServer.Product>>>)null);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Category>> IncludeProductsWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Category>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, IEnumerable<WAQSWorkshopServer.Product>>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, IEnumerable<WAQSWorkshopServer.Product>>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToMany<WAQSWorkshopServer.Category, WAQSWorkshopServer.Product>(source, e => e.Products, queryTransform, (e1, e2) => e1.Id == e2.CategoryId, e => e.Products);
        }
    
        [IncludeMethod]
        public static IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Category>> IncludeProductsWithExpression(this IWAQSQueryValue<IEnumerable<WAQSWorkshopServer.Category>> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, WAQSWorkshopServer.Product>> queryTransform)
        {
            if (!(queryTransform == null || source.ExpressionTransformation == null))
                queryTransform = (Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, WAQSWorkshopServer.Product>>)source.ExpressionTransformation(queryTransform);
            return WAQS.DAL.Interfaces.QueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopServer.Category, WAQSWorkshopServer.Product>(source, e => e.Products, queryTransform, (e1, e2) => e1.Id == e2.CategoryId, e => e.Products);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Category> IncludeProducts(this IEnumerable<WAQSWorkshopServer.Category> source)
        {
            return source;
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Category> IncludeProductsWithExpression(this IEnumerable<WAQSWorkshopServer.Category> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, IEnumerable<WAQSWorkshopServer.Product>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Category IncludeProducts(this WAQSWorkshopServer.Category source)
        {
            return source;
        }
        [IncludeMethod]
        public static WAQSWorkshopServer.Category IncludeProductsWithExpression(this WAQSWorkshopServer.Category source, Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, IEnumerable<WAQSWorkshopServer.Product>>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopServer.Category> IncludeProductsWithExpression(this IEnumerable<WAQSWorkshopServer.Category> source, Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, WAQSWorkshopServer.Product>> queryTransform)
        {
            return source;
        }
    
        [IncludeMethod]
        public static WAQSWorkshopServer.Category IncludeProductsWithExpression(this WAQSWorkshopServer.Category source, Expression<Func<IEnumerable<WAQSWorkshopServer.Product>, WAQSWorkshopServer.Product>> queryTransform)
        {
            return source;
        }
    }
}
