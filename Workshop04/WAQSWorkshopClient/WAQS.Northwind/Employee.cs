//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

            using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using WAQS.ClientContext;
using WAQS.ClientContext.Interfaces;
using WAQS.ClientContext.Interfaces.Errors;
using WAQS.ComponentModel;
using WAQS.Entities;
using WAQS.EntitiesTracking;

namespace WAQSWorkshopClient
{
    [DataContract(IsReference = true, Namespace = "http://Northwind/Entities")]
    [KnownType(typeof (Employee))]
    [KnownType(typeof (Order))]
    public partial class Employee : DynamicType, IEntityWithErrors
    {
#region DynamicType
        protected override ICustomTypeDescriptor CustomTypeDescriptor
        {
            get
            {
                return new DynamicType<Employee>(this, CustomPropertyDescriptors);
            }
        }

        protected override IEnumerable<CustomPropertyDescriptor> CustomPropertyDescriptors
        {
            get
            {
                return DynamicType<Employee>.CustomProperties;
            }
        }

#endregion
#region Simple Properties
        [DataMember]
        public int Id
        {
            get
            {
                return _id;
            }

            set
            {
                if (_id == value)
                {
                    return;
                }

                OnIdPropertyChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                _id = value;
                if (!ChangeTracker.Saving)
                {
                    OnIdPropertyChanged(value);
                    OnPropertyChanged("Id");
                    ResetEntityKey();
                }
            }
        }

        private int _id;
        partial void OnIdPropertyChanging(ref int value);
        partial void OnIdPropertyChanged(int value);
        [DataMember]
        public string LastName
        {
            get
            {
                return _lastName;
            }

            set
            {
                if (_lastName == value)
                {
                    if (!(IsDeserializing || ChangeTracker.Saving))
                        ValidateLastNameRequired(value);
                    return;
                }

                OnLastNamePropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateLastNameRequired(value);
                    ValidateLastNameMaxLength(value);
                }

                _lastName = value;
                if (!ChangeTracker.Saving)
                {
                    OnLastNamePropertyChanged(value);
                    OnPropertyChanged("LastName");
                }
            }
        }

        private string _lastName;
        partial void OnLastNamePropertyChanging(ref string value);
        partial void OnLastNamePropertyChanged(string value);
        protected virtual Error ValidateLastNameRequired(string value)
        {
            var errorInfo = Validators.ValidateRequiredStringProperty(value, () => LastName, DataErrorInfo);
            var error = Errors.LastName.FirstOrDefault(e => e.Key == "LastNameRequired");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.LastName.Remove(error);
                return null;
            }

            if (error == null)
                Errors.LastName.Add(error = new Error
                {
                Criticity = Criticity.Mandatory, Key = "LastNameRequired", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual Error ValidateLastNameMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 20, () => LastName, DataErrorInfo);
            var error = Errors.LastName.FirstOrDefault(e => e.Key == "LastNameMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.LastName.Remove(error);
                return null;
            }

            if (error == null)
                Errors.LastName.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "LastNameMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string FirstName
        {
            get
            {
                return _firstName;
            }

            set
            {
                if (_firstName == value)
                {
                    if (!(IsDeserializing || ChangeTracker.Saving))
                        ValidateFirstNameRequired(value);
                    return;
                }

                OnFirstNamePropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateFirstNameRequired(value);
                    ValidateFirstNameMaxLength(value);
                }

                _firstName = value;
                if (!ChangeTracker.Saving)
                {
                    OnFirstNamePropertyChanged(value);
                    OnPropertyChanged("FirstName");
                }
            }
        }

        private string _firstName;
        partial void OnFirstNamePropertyChanging(ref string value);
        partial void OnFirstNamePropertyChanged(string value);
        protected virtual Error ValidateFirstNameRequired(string value)
        {
            var errorInfo = Validators.ValidateRequiredStringProperty(value, () => FirstName, DataErrorInfo);
            var error = Errors.FirstName.FirstOrDefault(e => e.Key == "FirstNameRequired");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.FirstName.Remove(error);
                return null;
            }

            if (error == null)
                Errors.FirstName.Add(error = new Error
                {
                Criticity = Criticity.Mandatory, Key = "FirstNameRequired", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual Error ValidateFirstNameMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 10, () => FirstName, DataErrorInfo);
            var error = Errors.FirstName.FirstOrDefault(e => e.Key == "FirstNameMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.FirstName.Remove(error);
                return null;
            }

            if (error == null)
                Errors.FirstName.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "FirstNameMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string Title
        {
            get
            {
                return _title;
            }

            set
            {
                if (_title == value)
                {
                    return;
                }

                OnTitlePropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateTitleMaxLength(value);
                }

                _title = value;
                if (!ChangeTracker.Saving)
                {
                    OnTitlePropertyChanged(value);
                    OnPropertyChanged("Title");
                }
            }
        }

        private string _title;
        partial void OnTitlePropertyChanging(ref string value);
        partial void OnTitlePropertyChanged(string value);
        protected virtual Error ValidateTitleMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 30, () => Title, DataErrorInfo);
            var error = Errors.Title.FirstOrDefault(e => e.Key == "TitleMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Title.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Title.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "TitleMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string TitleOfCourtesy
        {
            get
            {
                return _titleOfCourtesy;
            }

            set
            {
                if (_titleOfCourtesy == value)
                {
                    return;
                }

                OnTitleOfCourtesyPropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateTitleOfCourtesyMaxLength(value);
                }

                _titleOfCourtesy = value;
                if (!ChangeTracker.Saving)
                {
                    OnTitleOfCourtesyPropertyChanged(value);
                    OnPropertyChanged("TitleOfCourtesy");
                }
            }
        }

        private string _titleOfCourtesy;
        partial void OnTitleOfCourtesyPropertyChanging(ref string value);
        partial void OnTitleOfCourtesyPropertyChanged(string value);
        protected virtual Error ValidateTitleOfCourtesyMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 25, () => TitleOfCourtesy, DataErrorInfo);
            var error = Errors.TitleOfCourtesy.FirstOrDefault(e => e.Key == "TitleOfCourtesyMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.TitleOfCourtesy.Remove(error);
                return null;
            }

            if (error == null)
                Errors.TitleOfCourtesy.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "TitleOfCourtesyMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public Nullable<System.DateTime> BirthDate
        {
            get
            {
                return _birthDate;
            }

            set
            {
                if (_birthDate == value)
                {
                    return;
                }

                OnBirthDatePropertyChanging(ref value);
                _birthDate = value;
                if (!ChangeTracker.Saving)
                {
                    OnBirthDatePropertyChanged(value);
                    OnPropertyChanged("BirthDate");
                }
            }
        }

        private Nullable<System.DateTime> _birthDate;
        partial void OnBirthDatePropertyChanging(ref Nullable<System.DateTime> value);
        partial void OnBirthDatePropertyChanged(Nullable<System.DateTime> value);
        [DataMember]
        public Nullable<System.DateTime> HireDate
        {
            get
            {
                return _hireDate;
            }

            set
            {
                if (_hireDate == value)
                {
                    return;
                }

                OnHireDatePropertyChanging(ref value);
                _hireDate = value;
                if (!ChangeTracker.Saving)
                {
                    OnHireDatePropertyChanged(value);
                    OnPropertyChanged("HireDate");
                }
            }
        }

        private Nullable<System.DateTime> _hireDate;
        partial void OnHireDatePropertyChanging(ref Nullable<System.DateTime> value);
        partial void OnHireDatePropertyChanged(Nullable<System.DateTime> value);
        [DataMember]
        public string Address
        {
            get
            {
                return _address;
            }

            set
            {
                if (_address == value)
                {
                    return;
                }

                OnAddressPropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateAddressMaxLength(value);
                }

                _address = value;
                if (!ChangeTracker.Saving)
                {
                    OnAddressPropertyChanged(value);
                    OnPropertyChanged("Address");
                }
            }
        }

        private string _address;
        partial void OnAddressPropertyChanging(ref string value);
        partial void OnAddressPropertyChanged(string value);
        protected virtual Error ValidateAddressMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 60, () => Address, DataErrorInfo);
            var error = Errors.Address.FirstOrDefault(e => e.Key == "AddressMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Address.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Address.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "AddressMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string City
        {
            get
            {
                return _city;
            }

            set
            {
                if (_city == value)
                {
                    return;
                }

                OnCityPropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateCityMaxLength(value);
                }

                _city = value;
                if (!ChangeTracker.Saving)
                {
                    OnCityPropertyChanged(value);
                    OnPropertyChanged("City");
                }
            }
        }

        private string _city;
        partial void OnCityPropertyChanging(ref string value);
        partial void OnCityPropertyChanged(string value);
        protected virtual Error ValidateCityMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 15, () => City, DataErrorInfo);
            var error = Errors.City.FirstOrDefault(e => e.Key == "CityMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.City.Remove(error);
                return null;
            }

            if (error == null)
                Errors.City.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "CityMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string Region
        {
            get
            {
                return _region;
            }

            set
            {
                if (_region == value)
                {
                    return;
                }

                OnRegionPropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateRegionMaxLength(value);
                }

                _region = value;
                if (!ChangeTracker.Saving)
                {
                    OnRegionPropertyChanged(value);
                    OnPropertyChanged("Region");
                }
            }
        }

        private string _region;
        partial void OnRegionPropertyChanging(ref string value);
        partial void OnRegionPropertyChanged(string value);
        protected virtual Error ValidateRegionMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 15, () => Region, DataErrorInfo);
            var error = Errors.Region.FirstOrDefault(e => e.Key == "RegionMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Region.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Region.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "RegionMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string PostalCode
        {
            get
            {
                return _postalCode;
            }

            set
            {
                if (_postalCode == value)
                {
                    return;
                }

                OnPostalCodePropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidatePostalCodeMaxLength(value);
                }

                _postalCode = value;
                if (!ChangeTracker.Saving)
                {
                    OnPostalCodePropertyChanged(value);
                    OnPropertyChanged("PostalCode");
                }
            }
        }

        private string _postalCode;
        partial void OnPostalCodePropertyChanging(ref string value);
        partial void OnPostalCodePropertyChanged(string value);
        protected virtual Error ValidatePostalCodeMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 10, () => PostalCode, DataErrorInfo);
            var error = Errors.PostalCode.FirstOrDefault(e => e.Key == "PostalCodeMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.PostalCode.Remove(error);
                return null;
            }

            if (error == null)
                Errors.PostalCode.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "PostalCodeMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string Country
        {
            get
            {
                return _country;
            }

            set
            {
                if (_country == value)
                {
                    return;
                }

                OnCountryPropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateCountryMaxLength(value);
                }

                _country = value;
                if (!ChangeTracker.Saving)
                {
                    OnCountryPropertyChanged(value);
                    OnPropertyChanged("Country");
                }
            }
        }

        private string _country;
        partial void OnCountryPropertyChanging(ref string value);
        partial void OnCountryPropertyChanged(string value);
        protected virtual Error ValidateCountryMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 15, () => Country, DataErrorInfo);
            var error = Errors.Country.FirstOrDefault(e => e.Key == "CountryMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Country.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Country.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "CountryMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string HomePhone
        {
            get
            {
                return _homePhone;
            }

            set
            {
                if (_homePhone == value)
                {
                    return;
                }

                OnHomePhonePropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateHomePhoneMaxLength(value);
                }

                _homePhone = value;
                if (!ChangeTracker.Saving)
                {
                    OnHomePhonePropertyChanged(value);
                    OnPropertyChanged("HomePhone");
                }
            }
        }

        private string _homePhone;
        partial void OnHomePhonePropertyChanging(ref string value);
        partial void OnHomePhonePropertyChanged(string value);
        protected virtual Error ValidateHomePhoneMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 24, () => HomePhone, DataErrorInfo);
            var error = Errors.HomePhone.FirstOrDefault(e => e.Key == "HomePhoneMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.HomePhone.Remove(error);
                return null;
            }

            if (error == null)
                Errors.HomePhone.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "HomePhoneMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string Extension
        {
            get
            {
                return _extension;
            }

            set
            {
                if (_extension == value)
                {
                    return;
                }

                OnExtensionPropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateExtensionMaxLength(value);
                }

                _extension = value;
                if (!ChangeTracker.Saving)
                {
                    OnExtensionPropertyChanged(value);
                    OnPropertyChanged("Extension");
                }
            }
        }

        private string _extension;
        partial void OnExtensionPropertyChanging(ref string value);
        partial void OnExtensionPropertyChanged(string value);
        protected virtual Error ValidateExtensionMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 4, () => Extension, DataErrorInfo);
            var error = Errors.Extension.FirstOrDefault(e => e.Key == "ExtensionMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Extension.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Extension.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "ExtensionMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public byte[] Photo
        {
            get
            {
                return _photo;
            }

            set
            {
                if (_photo == value)
                {
                    return;
                }

                OnPhotoPropertyChanging(ref value);
                _photo = value;
                if (!ChangeTracker.Saving)
                {
                    OnPhotoPropertyChanged(value);
                    OnPropertyChanged("Photo");
                }
            }
        }

        private byte[] _photo;
        partial void OnPhotoPropertyChanging(ref byte[] value);
        partial void OnPhotoPropertyChanged(byte[] value);
        [DataMember]
        public string Notes
        {
            get
            {
                return _notes;
            }

            set
            {
                if (_notes == value)
                {
                    return;
                }

                OnNotesPropertyChanging(ref value);
                _notes = value;
                if (!ChangeTracker.Saving)
                {
                    OnNotesPropertyChanged(value);
                    OnPropertyChanged("Notes");
                }
            }
        }

        private string _notes;
        partial void OnNotesPropertyChanging(ref string value);
        partial void OnNotesPropertyChanged(string value);
        [DataMember]
        public Nullable<int> ReportsTo
        {
            get
            {
                return _reportsTo;
            }

            set
            {
                if (_reportsTo == value)
                {
                    return;
                }

                OnReportsToPropertyChanging(ref value);
                if (!IsDeserializing)
                {
                    if (Employee1 != null && Employee1.Id != value)
                    {
                        Employee1 = null;
                    }

                    ChangeTracker.RecordOriginalValue("ReportsTo", _reportsTo);
                }

                var oldReportsTo = _reportsTo;
                _reportsTo = value;
                if (!ChangeTracker.Saving)
                {
                    OnReportsToPropertyChanged(value);
                    OnPropertyChanged("ReportsTo");
                    OnEmployee1FKsChanged(oldReportsTo, value);
                    RaiseNavigationPropertyChanged("ReportsTo");
                }
            }
        }

        private Nullable<int> _reportsTo;
        partial void OnReportsToPropertyChanging(ref Nullable<int> value);
        partial void OnReportsToPropertyChanged(Nullable<int> value);
        [DataMember]
        public string PhotoPath
        {
            get
            {
                return _photoPath;
            }

            set
            {
                if (_photoPath == value)
                {
                    return;
                }

                OnPhotoPathPropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidatePhotoPathMaxLength(value);
                }

                _photoPath = value;
                if (!ChangeTracker.Saving)
                {
                    OnPhotoPathPropertyChanged(value);
                    OnPropertyChanged("PhotoPath");
                }
            }
        }

        private string _photoPath;
        partial void OnPhotoPathPropertyChanging(ref string value);
        partial void OnPhotoPathPropertyChanged(string value);
        protected virtual Error ValidatePhotoPathMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 255, () => PhotoPath, DataErrorInfo);
            var error = Errors.PhotoPath.FirstOrDefault(e => e.Key == "PhotoPathMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.PhotoPath.Remove(error);
                return null;
            }

            if (error == null)
                Errors.PhotoPath.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "PhotoPathMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

#endregion
#region Complex Properties
#endregion
#region Navigation Properties
        [DataMember]
        public TrackableCollection<Employee> Employees1
        {
            get
            {
                if (!ChangeTracker.Saving)
                    OnGetEmployees1();
                if (OnGetEmployees1Action != null)
                    OnGetEmployees1Action();
                if (_employees1 == null)
                {
                    _employees1 = new TrackableCollection<Employee>();
                    SetFixupEmployees1();
                    OnEmployees1PropertyChanging(null, _employees1);
                    OnEmployees1PropertyChanged(null, _employees1);
                }

                return _employees1;
            }

            set
            {
                if (ReferenceEquals(_employees1, value))
                    return;
                if (ChangeTracker.ChangeTrackingEnabled)
                    throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                var oldEmployees1 = _employees1;
                if (_employees1 != null)
                {
                    _employees1.CollectionChanged -= FixupEmployees1;
                }

                _employees1 = value;
                if (_employees1 != null)
                {
                    SetFixupEmployees1();
                }

                OnEmployees1PropertyChanging(oldEmployees1, _employees1);
                OnEmployees1PropertyChanged(oldEmployees1, _employees1);
                OnNavigationPropertyChanged("Employees1");
            }
        }

        partial void OnGetEmployees1();
        public Action OnGetEmployees1Action
        {
            get;
            set;
        }

        partial void OnEmployees1PropertyChanged(TrackableCollection<Employee> oldValue, TrackableCollection<Employee> newValue);
        private TrackableCollection<Employee> _employees1;
        private void SetFixupEmployees1()
        {
            _employees1.CollectionChanged += FixupEmployees1;
            var employees1AsITrackableCollection = (ITrackableCollection<Employee>)_employees1;
            employees1AsITrackableCollection.GetWhereExpression = e => e.ReportsTo == Id;
            employees1AsITrackableCollection.GetClientContext = () =>
            {
                IClientEntitySet clientEntitySet = ClientEntitySetExtensions.GetClientEntitySet(this);
                return clientEntitySet == null || ChangeTracker.State == ObjectState.Detached ? null : clientEntitySet.Context;
            }

            ;
        }

        protected virtual void OnEmployees1PropertyChanging(TrackableCollection<Employee> oldValue, TrackableCollection<Employee> newValue)
        {
            if (Employees1PropertyChanging != null)
                Employees1PropertyChanging(oldValue, newValue);
        }

        protected internal event Action<TrackableCollection<Employee>, TrackableCollection<Employee>> Employees1PropertyChanging;
        [DataMember]
        public Employee Employee1
        {
            get
            {
                return _employee1;
            }

            set
            {
                if (ReferenceEquals(_employee1, value))
                {
                    return;
                }

                var oldEmployee1 = _employee1;
                if (!ChangeTracker.Saving)
                    OnEmployee1Changing(ref value);
                _employee1 = value;
                FixupEmployee1(oldEmployee1);
                if (!ChangeTracker.Saving)
                {
                    OnEmployee1Changed(value);
                }

                OnEmployee1PropertyChanging(oldEmployee1, _employee1);
                if (!IsInitializingRelationships)
                {
                    if (_employee1 == null || !_employee1.IsInitializingRelationships)
                        OnNavigationPropertyChanged("Employee1");
                    else
                        NotifyPropertyChanged.RaisePropertyChanged(() => Employee1);
                }
            }
        }

        partial void OnEmployee1Changing(ref Employee value);
        partial void OnEmployee1Changed(Employee value);
        private Employee _employee1;
        protected virtual void OnEmployee1FKsChanged(Nullable<int> oldReportsTo, Nullable<int> newReportsTo)
        {
            if (Employee1FKsChanged != null)
                Employee1FKsChanged(this, oldReportsTo, newReportsTo);
        }

        public event Action<Employee, Nullable<int>, Nullable<int>> Employee1FKsChanged;
        protected virtual void OnEmployee1PropertyChanging(Employee oldValue, Employee newValue)
        {
            if (Employee1PropertyChanging != null)
                Employee1PropertyChanging(oldValue, newValue);
        }

        protected internal event Action<Employee, Employee> Employee1PropertyChanging;
        [DataMember]
        public TrackableCollection<Order> Orders
        {
            get
            {
                if (!ChangeTracker.Saving)
                    OnGetOrders();
                if (OnGetOrdersAction != null)
                    OnGetOrdersAction();
                if (_orders == null)
                {
                    _orders = new TrackableCollection<Order>();
                    SetFixupOrders();
                    OnOrdersPropertyChanging(null, _orders);
                    OnOrdersPropertyChanged(null, _orders);
                }

                return _orders;
            }

            set
            {
                if (ReferenceEquals(_orders, value))
                    return;
                if (ChangeTracker.ChangeTrackingEnabled)
                    throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                var oldOrders = _orders;
                if (_orders != null)
                {
                    _orders.CollectionChanged -= FixupOrders;
                }

                _orders = value;
                if (_orders != null)
                {
                    SetFixupOrders();
                }

                OnOrdersPropertyChanging(oldOrders, _orders);
                OnOrdersPropertyChanged(oldOrders, _orders);
                OnNavigationPropertyChanged("Orders");
            }
        }

        partial void OnGetOrders();
        public Action OnGetOrdersAction
        {
            get;
            set;
        }

        partial void OnOrdersPropertyChanged(TrackableCollection<Order> oldValue, TrackableCollection<Order> newValue);
        private TrackableCollection<Order> _orders;
        private void SetFixupOrders()
        {
            _orders.CollectionChanged += FixupOrders;
            var ordersAsITrackableCollection = (ITrackableCollection<Order>)_orders;
            ordersAsITrackableCollection.GetWhereExpression = e => e.EmployeeId == Id;
            ordersAsITrackableCollection.GetClientContext = () =>
            {
                IClientEntitySet clientEntitySet = ClientEntitySetExtensions.GetClientEntitySet(this);
                return clientEntitySet == null || ChangeTracker.State == ObjectState.Detached ? null : clientEntitySet.Context;
            }

            ;
        }

        protected virtual void OnOrdersPropertyChanging(TrackableCollection<Order> oldValue, TrackableCollection<Order> newValue)
        {
            if (OrdersPropertyChanging != null)
                OrdersPropertyChanging(oldValue, newValue);
        }

        protected internal event Action<TrackableCollection<Order>, TrackableCollection<Order>> OrdersPropertyChanging;
#endregion
#region Specifications
        public virtual IEnumerable<Error> ValidateOnClient(bool force = false)
        {
            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("LastName"))
            {
                Error error = ValidateLastNameRequired(LastName);
                if (error != null)
                    yield return error;
                error = ValidateLastNameMaxLength(LastName);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("FirstName"))
            {
                Error error = ValidateFirstNameRequired(FirstName);
                if (error != null)
                    yield return error;
                error = ValidateFirstNameMaxLength(FirstName);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("Title"))
            {
                Error error = ValidateTitleMaxLength(Title);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("TitleOfCourtesy"))
            {
                Error error = ValidateTitleOfCourtesyMaxLength(TitleOfCourtesy);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("Address"))
            {
                Error error = ValidateAddressMaxLength(Address);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("City"))
            {
                Error error = ValidateCityMaxLength(City);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("Region"))
            {
                Error error = ValidateRegionMaxLength(Region);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("PostalCode"))
            {
                Error error = ValidatePostalCodeMaxLength(PostalCode);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("Country"))
            {
                Error error = ValidateCountryMaxLength(Country);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("HomePhone"))
            {
                Error error = ValidateHomePhoneMaxLength(HomePhone);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("Extension"))
            {
                Error error = ValidateExtensionMaxLength(Extension);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("PhotoPath"))
            {
                Error error = ValidatePhotoPathMaxLength(PhotoPath);
                if (error != null)
                    yield return error;
            }

            List<Error> errors = null;
            GetCustomValidation(ref errors);
            if (errors != null)
                foreach (var er in errors)
                    yield return er;
        }

        partial void GetCustomValidation(ref List<Error> errors);
#endregion
#region ChangeTracking
        protected virtual void AddValidationProperty(string propertyName)
        {
            if (!ChangeTracker.ValidationProperties.Contains(propertyName))
                ChangeTracker.ValidationProperties.Add(propertyName);
        }

        protected virtual void OnPropertyChanged(string propertyName, bool isTracked = true)
        {
            if (propertyName != "Id" && isTracked && ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && (ChangeTracker.State & ObjectState.Deleted) == 0)
            {
                if (!(IsDeserializing || ChangeTracker.ModifiedProperties.Contains(propertyName)))
                    ChangeTracker.ModifiedProperties.Add(propertyName);
                ChangeTracker.State = ObjectState.Modified;
            }

            NotifyPropertyChanged.RaisePropertyChanged(propertyName);
            OnPropertyChangedExtension(propertyName);
        }

        partial void OnPropertyChangedExtension(string propertyName);
        protected virtual void OnNavigationPropertyChanged(string propertyName)
        {
            NotifyPropertyChanged.RaisePropertyChanged(propertyName);
            OnNavigationPropertyChangedExtension(propertyName);
            RaiseNavigationPropertyChanged(propertyName);
        }

        partial void OnNavigationPropertyChangedExtension(string propertyName);
        protected virtual void RaiseNavigationPropertyChanged(string propertyName)
        {
            if (NavigationPropertyChanged != null)
                NavigationPropertyChanged(this, propertyName);
        }

        public event Action<Employee, string> NavigationPropertyChanged;
        private ObjectChangeTracker _changeTracker;
        [DataMember]
        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanged += HandleObjectStateChanged;
                }

                return _changeTracker;
            }

            set
            {
                if (_changeTracker != null)
                    _changeTracker.ObjectStateChanged -= HandleObjectStateChanged;
                _changeTracker = value;
                if (_changeTracker != null)
                    _changeTracker.ObjectStateChanged += HandleObjectStateChanged;
            }
        }

        private void HandleObjectStateChanged(object sender, ObjectStateChangedEventArgs e)
        {
            switch (e.NewState)
            {
                case ObjectState.Deleted:
                case ObjectState.CascadeDeleted:
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        IsDeleting = true;
                        ClearNavigationProperties();
                        IsDeleting = false;
                    }

                    break;
                case ObjectState.Detached:
                    ClearNavigationProperties();
                    break;
            }

            OnStateChanged(e.NewState);
        }

        protected virtual void OnStateChanged(ObjectState state)
        {
            if (StateChanged != null)
                StateChanged(this, state);
        }

        public event Action<IObjectWithChangeTracker, ObjectState> StateChanged;
        private bool _isDeserializing;
        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public bool IsDeserializing
        {
            get
            {
                return _isDeserializing;
            }

            set
            {
                if (_isDeserializing == value)
                    return;
                _isDeserializing = value;
            }
        }

        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public bool IsInitializingRelationships
        {
            get;
            set;
        }

        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }

        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }

        public virtual void MarkAsModified()
        {
            ChangeTracker.ChangeTrackingEnabled = true;
            ChangeTracker.State = ObjectState.Modified;
            ChangeTracker.ModifiedProperties.Add("Id");
            ChangeTracker.ModifiedProperties.Add("LastName");
            ChangeTracker.ModifiedProperties.Add("FirstName");
            ChangeTracker.ModifiedProperties.Add("Title");
            ChangeTracker.ModifiedProperties.Add("TitleOfCourtesy");
            ChangeTracker.ModifiedProperties.Add("BirthDate");
            ChangeTracker.ModifiedProperties.Add("HireDate");
            ChangeTracker.ModifiedProperties.Add("Address");
            ChangeTracker.ModifiedProperties.Add("City");
            ChangeTracker.ModifiedProperties.Add("Region");
            ChangeTracker.ModifiedProperties.Add("PostalCode");
            ChangeTracker.ModifiedProperties.Add("Country");
            ChangeTracker.ModifiedProperties.Add("HomePhone");
            ChangeTracker.ModifiedProperties.Add("Extension");
            ChangeTracker.ModifiedProperties.Add("Photo");
            ChangeTracker.ModifiedProperties.Add("Notes");
            ChangeTracker.ModifiedProperties.Add("ReportsTo");
            ChangeTracker.ModifiedProperties.Add("PhotoPath");
        }

        protected virtual void ClearNavigationProperties()
        {
            bool isInitializingRelationships = IsInitializingRelationships;
            IsInitializingRelationships = true;
            Employees1.Clear();
            Employee1 = null;
            Orders.Clear();
            IsInitializingRelationships = isInitializingRelationships;
        }

        public bool HasTemporaryKey
        {
            get
            {
                return ChangeTracker.State == ObjectState.Added;
            }
        }

        public virtual bool HasChanges
        {
            get
            {
                return ChangeTracker.State != ObjectState.Unchanged || ChangeTracker.ObjectsRemovedFromCollectionProperties.Any() || ChangeTracker.OriginalValues.Any() || ChangeTracker.ObjectsAddedToCollectionProperties.Any();
            }
        }

        private Guid? _uniqueIdentifier;
        Guid IObjectWithChangeTracker.UniqueIdentifier
        {
            get
            {
                return _uniqueIdentifier ?? (_uniqueIdentifier = Guid.NewGuid()).Value;
            }
        }

#endregion
#region Association Fixup
        private bool IsDeleting
        {
            get;
            set;
        }

        internal virtual void Detach()
        {
            ChangeTracker.State = ObjectState.Detached;
        }

        private void FixupEmployee1(Employee previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
                return;
            if (Employee1 == null && ChangeTracker.ChangeTrackingEnabled && previousValue.ChangeTracker.State == ObjectState.Detached && previousValue.ChangeTracker.DetachedPreviousState != ObjectState.Added)
            {
                object originalValue;
                if (ChangeTracker.OriginalValues.TryGetValue("Employee1", out originalValue) && (originalValue == null || originalValue == previousValue))
                    ChangeTracker.OriginalValues.Remove("Employee1");
                return;
            }

            bool isInitializingRelationships = IsInitializingRelationships || (Employee1 != null && Employee1.IsInitializingRelationships);
            var changeTrackingEnabled = ChangeTracker.ChangeTrackingEnabled;
            if (isInitializingRelationships || ChangeTracker.IsAttaching)
                ChangeTracker.ChangeTrackingEnabled = false;
            if (previousValue != null && previousValue.Employees1.Contains(this))
                previousValue.Employees1.Remove(this);
            if (Employee1 != null)
            {
                if (!Employee1.Employees1.Contains(this))
                {
                    if (isInitializingRelationships)
                        Employee1.Employees1.Attach(this);
                    else
                        Employee1.Employees1.Add(this);
                }

                ReportsTo = Employee1.Id;
            }
            else if (!(skipKeys || IsDeserializing || ChangeTracker.State == ObjectState.Detached) && (ChangeTracker.State & ObjectState.Deleted) == 0)
            {
                ReportsTo = default (Nullable<int>);
            }

            if (ChangeTracker.ChangeTrackingEnabled && (!isInitializingRelationships || ChangeTracker.State == ObjectState.Added || Employee1 != null && Employee1.ChangeTracker.State == ObjectState.Added))
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Employee1") && (ChangeTracker.OriginalValues["Employee1"] == Employee1))
                    ChangeTracker.OriginalValues.Remove("Employee1");
                else
                {
                    ChangeTracker.RecordOriginalValue("Employee1", previousValue);
                }

                if (Employee1 != null && !Employee1.ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Detached)
                    Employee1.MarkAsAdded();
            }

            ChangeTracker.ChangeTrackingEnabled |= changeTrackingEnabled;
        }

        private void FixupEmployees1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing || Employees1.IsAttachingOrDetaching)
                return;
            if (e.NewItems != null)
            {
                foreach (Employee item in e.NewItems)
                {
                    bool itemIsInitializingRelationships = item.IsInitializingRelationships;
                    if (IsInitializingRelationships)
                        item.IsInitializingRelationships = true;
                    item.Employee1 = this;
                    if (!(IsInitializingRelationships || item.IsInitializingRelationships) && ChangeTracker.ChangeTrackingEnabled && (ChangeTracker.State == ObjectState.Added || item.ChangeTracker.State == ObjectState.Added || !(ChangeTracker.IsAttaching || item.ChangeTracker.IsAttaching)))
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                            item.MarkAsAdded();
                        ChangeTracker.RecordAdditionToCollectionProperties("Employees1", item);
                    }

                    item.IsInitializingRelationships = itemIsInitializingRelationships;
                }
            }

            if (e.OldItems != null)
            {
                foreach (Employee item in e.OldItems)
                {
                    bool itemIsInitializingRelationships = item.IsInitializingRelationships;
                    if (IsInitializingRelationships)
                        item.IsInitializingRelationships = true;
                    if (ReferenceEquals(item.Employee1, this))
                        item.Employee1 = null;
                    if (ChangeTracker.ChangeTrackingEnabled && !IsInitializingRelationships)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Employees1", item);
                    }

                    item.IsInitializingRelationships = itemIsInitializingRelationships;
                }
            }
        }

        private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing || Orders.IsAttachingOrDetaching)
                return;
            if (e.NewItems != null)
            {
                foreach (Order item in e.NewItems)
                {
                    bool itemIsInitializingRelationships = item.IsInitializingRelationships;
                    if (IsInitializingRelationships)
                        item.IsInitializingRelationships = true;
                    item.Employee = this;
                    if (!(IsInitializingRelationships || item.IsInitializingRelationships) && ChangeTracker.ChangeTrackingEnabled && (ChangeTracker.State == ObjectState.Added || item.ChangeTracker.State == ObjectState.Added || !(ChangeTracker.IsAttaching || item.ChangeTracker.IsAttaching)))
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                            item.MarkAsAdded();
                        ChangeTracker.RecordAdditionToCollectionProperties("Orders", item);
                    }

                    item.IsInitializingRelationships = itemIsInitializingRelationships;
                }
            }

            if (e.OldItems != null)
            {
                foreach (Order item in e.OldItems)
                {
                    bool itemIsInitializingRelationships = item.IsInitializingRelationships;
                    if (IsInitializingRelationships)
                        item.IsInitializingRelationships = true;
                    if (ReferenceEquals(item.Employee, this))
                        item.Employee = null;
                    if (ChangeTracker.ChangeTrackingEnabled && !IsInitializingRelationships)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Orders", item);
                    }

                    item.IsInitializingRelationships = itemIsInitializingRelationships;
                }
            }
        }

#endregion
#region EntityKey
        private Guid? _dataTransferEntityKey;
        [DataMember]
        public virtual Guid DataTransferEntityKey
        {
            get
            {
                return _dataTransferEntityKey ?? (_dataTransferEntityKey = Guid.NewGuid()).Value;
            }

            set
            {
                _dataTransferEntityKey = value;
            }
        }

        private string _entityKey;
        public virtual string EntityKey
        {
            get
            {
                switch (ChangeTracker.State)
                {
                    case ObjectState.Added:
                        if (_entityKey == null)
                            _entityKey = "Employee - IdentityKey = " + Guid.NewGuid().ToString();
                        return _entityKey;
                    case ObjectState.Detached:
                        if (_entityKey != null)
                            return _entityKey;
                        if (Id == default (int))
                            goto case ObjectState.Added;
                        break;
                    case ObjectState.Unchanged:
                    case ObjectState.Modified:
                    case ObjectState.CascadeDeleted:
                    case ObjectState.Deleted:
                        _entityKey = null;
                        break;
                }

                return string.Format("Employee - Id={0};", Id);
            }

            set
            {
                _entityKey = value;
            }
        }

        public virtual void ResetEntityKey()
        {
            if (!IsDeserializing)
            {
                var previousEntityKey = _entityKey;
                _entityKey = null;
                OnEntityKeyChanged(previousEntityKey);
            }
        }

        protected virtual void OnEntityKeyChanged(string previousEntityKey)
        {
            if (EntityKeyChanged != null)
                EntityKeyChanged(this, previousEntityKey);
        }

        public event Action<Employee, string> EntityKeyChanged;
        public virtual bool IsTemporaryKey
        {
            get
            {
                return _entityKey != null;
            }
        }

#endregion
#region Dependences
#endregion
#region UISpecifications
        static Employee()
        {
            DynamicType<Employee>.AddProperty("IdIsMandatory", e => e.UISpecifications.GetIdIsMandatory(e));
            DynamicType<Employee>.AddProperty("IdMinValue", e => e.UISpecifications.GetIdMinValue(e));
            DynamicType<Employee>.AddProperty("IdMaxValue", e => e.UISpecifications.GetIdMaxValue(e));
            DynamicType<Employee>.AddProperty("LastNameIsMandatory", e => e.UISpecifications.GetLastNameIsMandatory(e));
            DynamicType<Employee>.AddProperty("LastNameMaxLength", e => e.UISpecifications.GetLastNameMaxLength(e));
            DynamicType<Employee>.AddProperty("LastNameMinLength", e => e.UISpecifications.GetLastNameMinLength(e));
            DynamicType<Employee>.AddProperty("LastNamePattern", e => e.UISpecifications.GetLastNamePattern(e));
            DynamicType<Employee>.AddProperty("FirstNameIsMandatory", e => e.UISpecifications.GetFirstNameIsMandatory(e));
            DynamicType<Employee>.AddProperty("FirstNameMaxLength", e => e.UISpecifications.GetFirstNameMaxLength(e));
            DynamicType<Employee>.AddProperty("FirstNameMinLength", e => e.UISpecifications.GetFirstNameMinLength(e));
            DynamicType<Employee>.AddProperty("FirstNamePattern", e => e.UISpecifications.GetFirstNamePattern(e));
            DynamicType<Employee>.AddProperty("TitleIsMandatory", e => e.UISpecifications.GetTitleIsMandatory(e));
            DynamicType<Employee>.AddProperty("TitleMaxLength", e => e.UISpecifications.GetTitleMaxLength(e));
            DynamicType<Employee>.AddProperty("TitleMinLength", e => e.UISpecifications.GetTitleMinLength(e));
            DynamicType<Employee>.AddProperty("TitlePattern", e => e.UISpecifications.GetTitlePattern(e));
            DynamicType<Employee>.AddProperty("TitleOfCourtesyIsMandatory", e => e.UISpecifications.GetTitleOfCourtesyIsMandatory(e));
            DynamicType<Employee>.AddProperty("TitleOfCourtesyMaxLength", e => e.UISpecifications.GetTitleOfCourtesyMaxLength(e));
            DynamicType<Employee>.AddProperty("TitleOfCourtesyMinLength", e => e.UISpecifications.GetTitleOfCourtesyMinLength(e));
            DynamicType<Employee>.AddProperty("TitleOfCourtesyPattern", e => e.UISpecifications.GetTitleOfCourtesyPattern(e));
            DynamicType<Employee>.AddProperty("BirthDateIsMandatory", e => e.UISpecifications.GetBirthDateIsMandatory(e));
            DynamicType<Employee>.AddProperty("BirthDateMinValue", e => e.UISpecifications.GetBirthDateMinValue(e));
            DynamicType<Employee>.AddProperty("BirthDateMaxValue", e => e.UISpecifications.GetBirthDateMaxValue(e));
            DynamicType<Employee>.AddProperty("HireDateIsMandatory", e => e.UISpecifications.GetHireDateIsMandatory(e));
            DynamicType<Employee>.AddProperty("HireDateMinValue", e => e.UISpecifications.GetHireDateMinValue(e));
            DynamicType<Employee>.AddProperty("HireDateMaxValue", e => e.UISpecifications.GetHireDateMaxValue(e));
            DynamicType<Employee>.AddProperty("AddressIsMandatory", e => e.UISpecifications.GetAddressIsMandatory(e));
            DynamicType<Employee>.AddProperty("AddressMaxLength", e => e.UISpecifications.GetAddressMaxLength(e));
            DynamicType<Employee>.AddProperty("AddressMinLength", e => e.UISpecifications.GetAddressMinLength(e));
            DynamicType<Employee>.AddProperty("AddressPattern", e => e.UISpecifications.GetAddressPattern(e));
            DynamicType<Employee>.AddProperty("CityIsMandatory", e => e.UISpecifications.GetCityIsMandatory(e));
            DynamicType<Employee>.AddProperty("CityMaxLength", e => e.UISpecifications.GetCityMaxLength(e));
            DynamicType<Employee>.AddProperty("CityMinLength", e => e.UISpecifications.GetCityMinLength(e));
            DynamicType<Employee>.AddProperty("CityPattern", e => e.UISpecifications.GetCityPattern(e));
            DynamicType<Employee>.AddProperty("RegionIsMandatory", e => e.UISpecifications.GetRegionIsMandatory(e));
            DynamicType<Employee>.AddProperty("RegionMaxLength", e => e.UISpecifications.GetRegionMaxLength(e));
            DynamicType<Employee>.AddProperty("RegionMinLength", e => e.UISpecifications.GetRegionMinLength(e));
            DynamicType<Employee>.AddProperty("RegionPattern", e => e.UISpecifications.GetRegionPattern(e));
            DynamicType<Employee>.AddProperty("PostalCodeIsMandatory", e => e.UISpecifications.GetPostalCodeIsMandatory(e));
            DynamicType<Employee>.AddProperty("PostalCodeMaxLength", e => e.UISpecifications.GetPostalCodeMaxLength(e));
            DynamicType<Employee>.AddProperty("PostalCodeMinLength", e => e.UISpecifications.GetPostalCodeMinLength(e));
            DynamicType<Employee>.AddProperty("PostalCodePattern", e => e.UISpecifications.GetPostalCodePattern(e));
            DynamicType<Employee>.AddProperty("CountryIsMandatory", e => e.UISpecifications.GetCountryIsMandatory(e));
            DynamicType<Employee>.AddProperty("CountryMaxLength", e => e.UISpecifications.GetCountryMaxLength(e));
            DynamicType<Employee>.AddProperty("CountryMinLength", e => e.UISpecifications.GetCountryMinLength(e));
            DynamicType<Employee>.AddProperty("CountryPattern", e => e.UISpecifications.GetCountryPattern(e));
            DynamicType<Employee>.AddProperty("HomePhoneIsMandatory", e => e.UISpecifications.GetHomePhoneIsMandatory(e));
            DynamicType<Employee>.AddProperty("HomePhoneMaxLength", e => e.UISpecifications.GetHomePhoneMaxLength(e));
            DynamicType<Employee>.AddProperty("HomePhoneMinLength", e => e.UISpecifications.GetHomePhoneMinLength(e));
            DynamicType<Employee>.AddProperty("HomePhonePattern", e => e.UISpecifications.GetHomePhonePattern(e));
            DynamicType<Employee>.AddProperty("ExtensionIsMandatory", e => e.UISpecifications.GetExtensionIsMandatory(e));
            DynamicType<Employee>.AddProperty("ExtensionMaxLength", e => e.UISpecifications.GetExtensionMaxLength(e));
            DynamicType<Employee>.AddProperty("ExtensionMinLength", e => e.UISpecifications.GetExtensionMinLength(e));
            DynamicType<Employee>.AddProperty("ExtensionPattern", e => e.UISpecifications.GetExtensionPattern(e));
            DynamicType<Employee>.AddProperty("PhotoIsMandatory", e => e.UISpecifications.GetPhotoIsMandatory(e));
            DynamicType<Employee>.AddProperty("PhotoMaxLength", e => e.UISpecifications.GetPhotoMaxLength(e));
            DynamicType<Employee>.AddProperty("PhotoMinLength", e => e.UISpecifications.GetPhotoMinLength(e));
            DynamicType<Employee>.AddProperty("NotesIsMandatory", e => e.UISpecifications.GetNotesIsMandatory(e));
            DynamicType<Employee>.AddProperty("NotesMaxLength", e => e.UISpecifications.GetNotesMaxLength(e));
            DynamicType<Employee>.AddProperty("NotesMinLength", e => e.UISpecifications.GetNotesMinLength(e));
            DynamicType<Employee>.AddProperty("NotesPattern", e => e.UISpecifications.GetNotesPattern(e));
            DynamicType<Employee>.AddProperty("ReportsToIsMandatory", e => e.UISpecifications.GetReportsToIsMandatory(e));
            DynamicType<Employee>.AddProperty("ReportsToMinValue", e => e.UISpecifications.GetReportsToMinValue(e));
            DynamicType<Employee>.AddProperty("ReportsToMaxValue", e => e.UISpecifications.GetReportsToMaxValue(e));
            DynamicType<Employee>.AddProperty("PhotoPathIsMandatory", e => e.UISpecifications.GetPhotoPathIsMandatory(e));
            DynamicType<Employee>.AddProperty("PhotoPathMaxLength", e => e.UISpecifications.GetPhotoPathMaxLength(e));
            DynamicType<Employee>.AddProperty("PhotoPathMinLength", e => e.UISpecifications.GetPhotoPathMinLength(e));
            DynamicType<Employee>.AddProperty("PhotoPathPattern", e => e.UISpecifications.GetPhotoPathPattern(e));
            DynamicType<Employee>.AddProperty("Employee1IsMandatory", e => e.UISpecifications.GetEmployee1IsMandatory(e));
            DynamicType<Employee>.AddProperty("AllErrors", e => e.Errors.AllErrors);
            DynamicType<Employee>.AddProperty("IdErrors", e => e.Errors.Id);
            DynamicType<Employee>.AddProperty("LastNameErrors", e => e.Errors.LastName);
            DynamicType<Employee>.AddProperty("FirstNameErrors", e => e.Errors.FirstName);
            DynamicType<Employee>.AddProperty("TitleErrors", e => e.Errors.Title);
            DynamicType<Employee>.AddProperty("TitleOfCourtesyErrors", e => e.Errors.TitleOfCourtesy);
            DynamicType<Employee>.AddProperty("BirthDateErrors", e => e.Errors.BirthDate);
            DynamicType<Employee>.AddProperty("HireDateErrors", e => e.Errors.HireDate);
            DynamicType<Employee>.AddProperty("AddressErrors", e => e.Errors.Address);
            DynamicType<Employee>.AddProperty("CityErrors", e => e.Errors.City);
            DynamicType<Employee>.AddProperty("RegionErrors", e => e.Errors.Region);
            DynamicType<Employee>.AddProperty("PostalCodeErrors", e => e.Errors.PostalCode);
            DynamicType<Employee>.AddProperty("CountryErrors", e => e.Errors.Country);
            DynamicType<Employee>.AddProperty("HomePhoneErrors", e => e.Errors.HomePhone);
            DynamicType<Employee>.AddProperty("ExtensionErrors", e => e.Errors.Extension);
            DynamicType<Employee>.AddProperty("PhotoErrors", e => e.Errors.Photo);
            DynamicType<Employee>.AddProperty("NotesErrors", e => e.Errors.Notes);
            DynamicType<Employee>.AddProperty("ReportsToErrors", e => e.Errors.ReportsTo);
            DynamicType<Employee>.AddProperty("PhotoPathErrors", e => e.Errors.PhotoPath);
            StaticInitializer();
        }

        static partial void StaticInitializer();
        private UISpecificationsInfo _uiSpecifications;
        private UISpecificationsInfo UISpecifications
        {
            get
            {
                return _uiSpecifications ?? (_uiSpecifications = CreateEmployeeUISpecifications());
            }
        }

        protected virtual UISpecificationsInfo CreateEmployeeUISpecifications()
        {
            return new UISpecificationsInfo();
        }

        public partial class UISpecificationsInfo
        {
            public virtual bool GetIdIsMandatory(Employee entity)
            {
                return true;
            }

            public virtual int ? GetIdMinValue(Employee entity)
            {
                return null;
            }

            public virtual int ? GetIdMaxValue(Employee entity)
            {
                return null;
            }

            public virtual bool GetLastNameIsMandatory(Employee entity)
            {
                return true;
            }

            public virtual int ? GetLastNameMaxLength(Employee entity)
            {
                return 20;
            }

            public virtual int ? GetLastNameMinLength(Employee entity)
            {
                return null;
            }

            public virtual string GetLastNamePattern(Employee entity)
            {
                return null;
            }

            public virtual bool GetFirstNameIsMandatory(Employee entity)
            {
                return true;
            }

            public virtual int ? GetFirstNameMaxLength(Employee entity)
            {
                return 10;
            }

            public virtual int ? GetFirstNameMinLength(Employee entity)
            {
                return null;
            }

            public virtual string GetFirstNamePattern(Employee entity)
            {
                return null;
            }

            public virtual bool GetTitleIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual int ? GetTitleMaxLength(Employee entity)
            {
                return 30;
            }

            public virtual int ? GetTitleMinLength(Employee entity)
            {
                return null;
            }

            public virtual string GetTitlePattern(Employee entity)
            {
                return null;
            }

            public virtual bool GetTitleOfCourtesyIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual int ? GetTitleOfCourtesyMaxLength(Employee entity)
            {
                return 25;
            }

            public virtual int ? GetTitleOfCourtesyMinLength(Employee entity)
            {
                return null;
            }

            public virtual string GetTitleOfCourtesyPattern(Employee entity)
            {
                return null;
            }

            public virtual bool GetBirthDateIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual DateTime? GetBirthDateMinValue(Employee entity)
            {
                return null;
            }

            public virtual DateTime? GetBirthDateMaxValue(Employee entity)
            {
                return null;
            }

            public virtual bool GetHireDateIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual DateTime? GetHireDateMinValue(Employee entity)
            {
                return null;
            }

            public virtual DateTime? GetHireDateMaxValue(Employee entity)
            {
                return null;
            }

            public virtual bool GetAddressIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual int ? GetAddressMaxLength(Employee entity)
            {
                return 60;
            }

            public virtual int ? GetAddressMinLength(Employee entity)
            {
                return null;
            }

            public virtual string GetAddressPattern(Employee entity)
            {
                return null;
            }

            public virtual bool GetCityIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual int ? GetCityMaxLength(Employee entity)
            {
                return 15;
            }

            public virtual int ? GetCityMinLength(Employee entity)
            {
                return null;
            }

            public virtual string GetCityPattern(Employee entity)
            {
                return null;
            }

            public virtual bool GetRegionIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual int ? GetRegionMaxLength(Employee entity)
            {
                return 15;
            }

            public virtual int ? GetRegionMinLength(Employee entity)
            {
                return null;
            }

            public virtual string GetRegionPattern(Employee entity)
            {
                return null;
            }

            public virtual bool GetPostalCodeIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual int ? GetPostalCodeMaxLength(Employee entity)
            {
                return 10;
            }

            public virtual int ? GetPostalCodeMinLength(Employee entity)
            {
                return null;
            }

            public virtual string GetPostalCodePattern(Employee entity)
            {
                return null;
            }

            public virtual bool GetCountryIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual int ? GetCountryMaxLength(Employee entity)
            {
                return 15;
            }

            public virtual int ? GetCountryMinLength(Employee entity)
            {
                return null;
            }

            public virtual string GetCountryPattern(Employee entity)
            {
                return null;
            }

            public virtual bool GetHomePhoneIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual int ? GetHomePhoneMaxLength(Employee entity)
            {
                return 24;
            }

            public virtual int ? GetHomePhoneMinLength(Employee entity)
            {
                return null;
            }

            public virtual string GetHomePhonePattern(Employee entity)
            {
                return null;
            }

            public virtual bool GetExtensionIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual int ? GetExtensionMaxLength(Employee entity)
            {
                return 4;
            }

            public virtual int ? GetExtensionMinLength(Employee entity)
            {
                return null;
            }

            public virtual string GetExtensionPattern(Employee entity)
            {
                return null;
            }

            public virtual bool GetPhotoIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual int ? GetPhotoMaxLength(Employee entity)
            {
                return null;
            }

            public virtual int ? GetPhotoMinLength(Employee entity)
            {
                return null;
            }

            public virtual bool GetNotesIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual int ? GetNotesMaxLength(Employee entity)
            {
                return null;
            }

            public virtual int ? GetNotesMinLength(Employee entity)
            {
                return null;
            }

            public virtual string GetNotesPattern(Employee entity)
            {
                return null;
            }

            public virtual bool GetReportsToIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual int ? GetReportsToMinValue(Employee entity)
            {
                return null;
            }

            public virtual int ? GetReportsToMaxValue(Employee entity)
            {
                return null;
            }

            public virtual bool GetPhotoPathIsMandatory(Employee entity)
            {
                return false;
            }

            public virtual int ? GetPhotoPathMaxLength(Employee entity)
            {
                return 255;
            }

            public virtual int ? GetPhotoPathMinLength(Employee entity)
            {
                return null;
            }

            public virtual string GetPhotoPathPattern(Employee entity)
            {
                return null;
            }

            public virtual bool GetEmployee1IsMandatory(WAQSWorkshopClient.Employee entity)
            {
                return false;
            }
        }

        private ErrorsSpecifications _errors;
        protected ErrorsSpecifications Errors
        {
            get
            {
                return _errors ?? (_errors = new ErrorsSpecifications());
            }
        }

        bool IEntityWithErrors.HasErrors
        {
            get
            {
                return Errors.AllErrors.Count != 0;
            }
        }

        event Action IEntityWithErrors.HasErrorsChanged
        {
            add
            {
                Errors.HasErrorChanged += value;
            }

            remove
            {
                Errors.HasErrorChanged += value;
            }
        }

        public partial class ErrorsSpecifications
        {
            private ObservableCollection<Error> _id;
            public ObservableCollection<Error> Id
            {
                get
                {
                    return _id ?? (_id = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _lastName;
            public ObservableCollection<Error> LastName
            {
                get
                {
                    return _lastName ?? (_lastName = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _firstName;
            public ObservableCollection<Error> FirstName
            {
                get
                {
                    return _firstName ?? (_firstName = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _title;
            public ObservableCollection<Error> Title
            {
                get
                {
                    return _title ?? (_title = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _titleOfCourtesy;
            public ObservableCollection<Error> TitleOfCourtesy
            {
                get
                {
                    return _titleOfCourtesy ?? (_titleOfCourtesy = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _birthDate;
            public ObservableCollection<Error> BirthDate
            {
                get
                {
                    return _birthDate ?? (_birthDate = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _hireDate;
            public ObservableCollection<Error> HireDate
            {
                get
                {
                    return _hireDate ?? (_hireDate = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _address;
            public ObservableCollection<Error> Address
            {
                get
                {
                    return _address ?? (_address = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _city;
            public ObservableCollection<Error> City
            {
                get
                {
                    return _city ?? (_city = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _region;
            public ObservableCollection<Error> Region
            {
                get
                {
                    return _region ?? (_region = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _postalCode;
            public ObservableCollection<Error> PostalCode
            {
                get
                {
                    return _postalCode ?? (_postalCode = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _country;
            public ObservableCollection<Error> Country
            {
                get
                {
                    return _country ?? (_country = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _homePhone;
            public ObservableCollection<Error> HomePhone
            {
                get
                {
                    return _homePhone ?? (_homePhone = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _extension;
            public ObservableCollection<Error> Extension
            {
                get
                {
                    return _extension ?? (_extension = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _photo;
            public ObservableCollection<Error> Photo
            {
                get
                {
                    return _photo ?? (_photo = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _notes;
            public ObservableCollection<Error> Notes
            {
                get
                {
                    return _notes ?? (_notes = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _reportsTo;
            public ObservableCollection<Error> ReportsTo
            {
                get
                {
                    return _reportsTo ?? (_reportsTo = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _photoPath;
            public ObservableCollection<Error> PhotoPath
            {
                get
                {
                    return _photoPath ?? (_photoPath = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _allErrors;
            public ObservableCollection<Error> AllErrors
            {
                get
                {
                    if (_allErrors == null)
                    {
                        _allErrors = new ObservableCollection<Error>();
                        NotifyCollectionChangedEventHandler errorsCollectionChanged = (_, e) =>
                        {
                            if (e.NewItems != null)
                                foreach (Error error in e.NewItems)
                                {
                                    if (!_allErrors.Any(er => er.Key == error.Key))
                                        _allErrors.Add(error);
                                }

                            if (e.OldItems != null)
                                foreach (Error error in e.OldItems)
                                    _allErrors.Remove(error);
                        }

                        ;
                        AddAllErrorsHandlers(errorsCollectionChanged);
                    }

                    return _allErrors;
                }
            }

            protected virtual void AddAllErrorsHandlers(NotifyCollectionChangedEventHandler errorsCollectionChanged)
            {
                NotifyCollectionChangedEventHandler specificErrorsCollectionChanged = (sender, e) =>
                {
                    errorsCollectionChanged(sender, e);
                    switch (e.Action)
                    {
                        case NotifyCollectionChangedAction.Add:
                            if (AllErrors.Count == e.NewItems.Count)
                                OnHasErrorChanged();
                            break;
                        case NotifyCollectionChangedAction.Remove:
                            if (AllErrors.Count == 0)
                                OnHasErrorChanged();
                            break;
                    }
                }

                ;
                Id.CollectionChanged += specificErrorsCollectionChanged;
                LastName.CollectionChanged += specificErrorsCollectionChanged;
                FirstName.CollectionChanged += specificErrorsCollectionChanged;
                Title.CollectionChanged += specificErrorsCollectionChanged;
                TitleOfCourtesy.CollectionChanged += specificErrorsCollectionChanged;
                BirthDate.CollectionChanged += specificErrorsCollectionChanged;
                HireDate.CollectionChanged += specificErrorsCollectionChanged;
                Address.CollectionChanged += specificErrorsCollectionChanged;
                City.CollectionChanged += specificErrorsCollectionChanged;
                Region.CollectionChanged += specificErrorsCollectionChanged;
                PostalCode.CollectionChanged += specificErrorsCollectionChanged;
                Country.CollectionChanged += specificErrorsCollectionChanged;
                HomePhone.CollectionChanged += specificErrorsCollectionChanged;
                Extension.CollectionChanged += specificErrorsCollectionChanged;
                Photo.CollectionChanged += specificErrorsCollectionChanged;
                Notes.CollectionChanged += specificErrorsCollectionChanged;
                ReportsTo.CollectionChanged += specificErrorsCollectionChanged;
                PhotoPath.CollectionChanged += specificErrorsCollectionChanged;
            }

            protected void OnHasErrorChanged()
            {
                if (HasErrorChanged != null)
                    OnHasErrorChanged();
            }

            public event Action HasErrorChanged;
        }
#endregion
    }
}
            