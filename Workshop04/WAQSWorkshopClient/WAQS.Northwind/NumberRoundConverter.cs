//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace WAQS.Controls.Converters
{
    public partial class NumberRoundConverter : IValueConverter
    {
    	public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    	{
            double doubleValue;
            if (double.TryParse(value.ToString(), out doubleValue))
            {
                var decimals = parameter == null ? 2 : (int)parameter;
                var roundValue = Math.Round(doubleValue, decimals);
                if (roundValue == doubleValue)
                    return roundValue;
                else
                    return roundValue.ToString("0.00");
            }
            return value;
    	}
    
    	public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    	{
            object result = null;
            bool proceed = false;
            CustomConvertBack(value, targetType, parameter, culture, ref result, ref proceed);
            if (proceed || result != null)
            {
                return result;
            }
    
            var valueString = value.ToString();
            double valueDouble;
            if (double.TryParse(valueString, out valueDouble))
            {
                if (targetType == typeof(double))
                {
                    return valueDouble;
                }
                if (targetType == typeof(decimal))
                {
                    return (decimal)valueDouble;
                }
                if (targetType == typeof(float))
                {
                    return (float)valueDouble;
                }
                if (targetType == typeof(double?))
                {
                    return (double?)valueDouble;
                }
                if (targetType == typeof(decimal?))
                {
                    return (decimal?)valueDouble;
                }
                if (targetType == typeof(float?))
                {
                    return (float?)valueDouble;
                }
            }
            if (string.IsNullOrWhiteSpace(valueString))
            {
                if (targetType == typeof(decimal?))
                {
                    return (decimal?)null;
                }
                if (targetType == typeof(float?))
                {
                    return (float?)null;
                }
                if (targetType == typeof(double?))
                {
                    return (double?)null;
                }
            }
            throw new NotImplementedException();
        }
    
        partial void CustomConvertBack(object value, Type targetType, object parameter, CultureInfo culture, ref object result, ref bool proceed);
    }
}
