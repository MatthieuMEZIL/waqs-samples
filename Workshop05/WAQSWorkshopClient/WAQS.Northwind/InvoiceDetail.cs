//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

            using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using WAQS.ClientContext;
using WAQS.ClientContext.Interfaces;
using WAQS.ClientContext.Interfaces.Errors;
using WAQS.ComponentModel;
using WAQS.Entities;
using WAQS.EntitiesTracking;

namespace WAQSWorkshopClient
{
    [DataContract(IsReference = true, Namespace = "http://Northwind/Entities")]
    [KnownType(typeof (Invoice))]
    [KnownType(typeof (OrderDetail))]
    public partial class InvoiceDetail : DynamicType, IEntityWithErrors
    {
#region DynamicType
        protected override ICustomTypeDescriptor CustomTypeDescriptor
        {
            get
            {
                return new DynamicType<InvoiceDetail>(this, CustomPropertyDescriptors);
            }
        }

        protected override IEnumerable<CustomPropertyDescriptor> CustomPropertyDescriptors
        {
            get
            {
                return DynamicType<InvoiceDetail>.CustomProperties;
            }
        }

#endregion
#region Simple Properties
        [DataMember]
        public int OrderDetailId
        {
            get
            {
                return _orderDetailId;
            }

            set
            {
                if (_orderDetailId == value)
                {
                    return;
                }

                OnOrderDetailIdPropertyChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    throw new InvalidOperationException("The property 'OrderDetailId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                if (!IsDeserializing)
                {
                    if (OrderDetail != null && OrderDetail.Id != value)
                    {
                        OrderDetail = null;
                    }

                    ChangeTracker.RecordOriginalValue("OrderDetailId", _orderDetailId);
                }

                var oldOrderDetailId = _orderDetailId;
                _orderDetailId = value;
                if (!ChangeTracker.Saving)
                {
                    OnOrderDetailIdPropertyChanged(value);
                    OnPropertyChanged("OrderDetailId");
                    ResetEntityKey();
                    OnOrderDetailFKsChanged(oldOrderDetailId, value);
                    RaiseNavigationPropertyChanged("OrderDetailId");
                }
            }
        }

        private int _orderDetailId;
        partial void OnOrderDetailIdPropertyChanging(ref int value);
        partial void OnOrderDetailIdPropertyChanged(int value);
        [DataMember]
        public int InvoiceId
        {
            get
            {
                return _invoiceId;
            }

            set
            {
                if (_invoiceId == value)
                {
                    return;
                }

                OnInvoiceIdPropertyChanging(ref value);
                if (!IsDeserializing)
                {
                    if (Invoice != null && Invoice.OrderId != value)
                    {
                        Invoice = null;
                    }

                    ChangeTracker.RecordOriginalValue("InvoiceId", _invoiceId);
                }

                var oldInvoiceId = _invoiceId;
                _invoiceId = value;
                if (!ChangeTracker.Saving)
                {
                    OnInvoiceIdPropertyChanged(value);
                    OnPropertyChanged("InvoiceId");
                    OnInvoiceFKsChanged(oldInvoiceId, value);
                    RaiseNavigationPropertyChanged("InvoiceId");
                }
            }
        }

        private int _invoiceId;
        partial void OnInvoiceIdPropertyChanging(ref int value);
        partial void OnInvoiceIdPropertyChanged(int value);
        [DataMember]
        public double UnitPrice
        {
            get
            {
                return _unitPrice;
            }

            set
            {
                if (_unitPrice == value)
                {
                    return;
                }

                OnUnitPricePropertyChanging(ref value);
                _unitPrice = value;
                if (!ChangeTracker.Saving)
                {
                    OnUnitPricePropertyChanged(value);
                    OnPropertyChanged("UnitPrice");
                }
            }
        }

        private double _unitPrice;
        partial void OnUnitPricePropertyChanging(ref double value);
        partial void OnUnitPricePropertyChanged(double value);
        [DataMember]
        public short Quantity
        {
            get
            {
                return _quantity;
            }

            set
            {
                if (_quantity == value)
                {
                    return;
                }

                OnQuantityPropertyChanging(ref value);
                _quantity = value;
                if (!ChangeTracker.Saving)
                {
                    OnQuantityPropertyChanged(value);
                    OnPropertyChanged("Quantity");
                }
            }
        }

        private short _quantity;
        partial void OnQuantityPropertyChanging(ref short value);
        partial void OnQuantityPropertyChanged(short value);
        [DataMember]
        public double Discount
        {
            get
            {
                return _discount;
            }

            set
            {
                if (_discount == value)
                {
                    return;
                }

                OnDiscountPropertyChanging(ref value);
                _discount = value;
                if (!ChangeTracker.Saving)
                {
                    OnDiscountPropertyChanged(value);
                    OnPropertyChanged("Discount");
                }
            }
        }

        private double _discount;
        partial void OnDiscountPropertyChanging(ref double value);
        partial void OnDiscountPropertyChanged(double value);
        [DataMember]
        public double Amount
        {
            get
            {
                return _amount;
            }

            set
            {
                if (_amount == value)
                {
                    return;
                }

                OnAmountPropertyChanging(ref value);
                _amount = value;
                if (!ChangeTracker.Saving)
                {
                    OnAmountPropertyChanged(value);
                    OnPropertyChanged("Amount");
                }
            }
        }

        private double _amount;
        partial void OnAmountPropertyChanging(ref double value);
        partial void OnAmountPropertyChanged(double value);
#endregion
#region Complex Properties
#endregion
#region Navigation Properties
        [DataMember]
        public Invoice Invoice
        {
            get
            {
                return _invoice;
            }

            set
            {
                if (ReferenceEquals(_invoice, value))
                {
                    if (!(IsDeserializing || ChangeTracker.Saving || IsInitializingRelationships || value != null && value.IsInitializingRelationships))
                        ValidateInvoiceRequired(value);
                    return;
                }

                var oldInvoice = _invoice;
                if (!ChangeTracker.Saving)
                    OnInvoiceChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving || IsInitializingRelationships || value != null && value.IsInitializingRelationships))
                    ValidateInvoiceRequired(value);
                _invoice = value;
                FixupInvoice(oldInvoice);
                if (!ChangeTracker.Saving)
                {
                    OnInvoiceChanged(value);
                }

                OnInvoicePropertyChanging(oldInvoice, _invoice);
                if (!IsInitializingRelationships)
                {
                    if (_invoice == null || !_invoice.IsInitializingRelationships)
                        OnNavigationPropertyChanged("Invoice");
                    else
                        NotifyPropertyChanged.RaisePropertyChanged(() => Invoice);
                }
            }
        }

        partial void OnInvoiceChanging(ref Invoice value);
        partial void OnInvoiceChanged(Invoice value);
        private Invoice _invoice;
        protected virtual Error ValidateInvoiceRequired(Invoice value)
        {
            var errorInfo = Validators.ValidateRequiredObjectProperty(value, () => Invoice, DataErrorInfo);
            var error = Errors.Invoice.FirstOrDefault(e => e.Key == "InvoiceRequired");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Invoice.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Invoice.Add(error = new Error
                {
                Criticity = Criticity.Mandatory, Key = "InvoiceRequired", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual void OnInvoiceFKsChanged(int oldInvoiceId, int newInvoiceId)
        {
            if (InvoiceFKsChanged != null)
                InvoiceFKsChanged(this, oldInvoiceId, newInvoiceId);
        }

        public event Action<InvoiceDetail, int, int> InvoiceFKsChanged;
        protected virtual void OnInvoicePropertyChanging(Invoice oldValue, Invoice newValue)
        {
            if (InvoicePropertyChanging != null)
                InvoicePropertyChanging(oldValue, newValue);
        }

        protected internal event Action<Invoice, Invoice> InvoicePropertyChanging;
        [DataMember]
        public OrderDetail OrderDetail
        {
            get
            {
                return _orderDetail;
            }

            set
            {
                if (ReferenceEquals(_orderDetail, value))
                {
                    if (!(IsDeserializing || ChangeTracker.Saving || IsInitializingRelationships || value != null && value.IsInitializingRelationships))
                        ValidateOrderDetailRequired(value);
                    return;
                }

                var oldOrderDetail = _orderDetail;
                if (!ChangeTracker.Saving)
                    OnOrderDetailChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                {
                    if (OrderDetailId != value.Id)
                        throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                }

                if (!(IsDeserializing || ChangeTracker.Saving || IsInitializingRelationships || value != null && value.IsInitializingRelationships))
                    ValidateOrderDetailRequired(value);
                _orderDetail = value;
                FixupOrderDetail(oldOrderDetail);
                if (!ChangeTracker.Saving)
                {
                    OnOrderDetailChanged(value);
                    if (value != null && value.HasTemporaryKey)
                        ResetEntityKey();
                }

                OnOrderDetailPropertyChanging(oldOrderDetail, _orderDetail);
                if (!IsInitializingRelationships)
                {
                    if (_orderDetail == null || !_orderDetail.IsInitializingRelationships)
                        OnNavigationPropertyChanged("OrderDetail");
                    else
                        NotifyPropertyChanged.RaisePropertyChanged(() => OrderDetail);
                }
            }
        }

        partial void OnOrderDetailChanging(ref OrderDetail value);
        partial void OnOrderDetailChanged(OrderDetail value);
        private OrderDetail _orderDetail;
        protected virtual Error ValidateOrderDetailRequired(OrderDetail value)
        {
            var errorInfo = Validators.ValidateRequiredObjectProperty(value, () => OrderDetail, DataErrorInfo);
            var error = Errors.OrderDetail.FirstOrDefault(e => e.Key == "OrderDetailRequired");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.OrderDetail.Remove(error);
                return null;
            }

            if (error == null)
                Errors.OrderDetail.Add(error = new Error
                {
                Criticity = Criticity.Mandatory, Key = "OrderDetailRequired", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual void OnOrderDetailFKsChanged(int oldOrderDetailId, int newOrderDetailId)
        {
            if (OrderDetailFKsChanged != null)
                OrderDetailFKsChanged(this, oldOrderDetailId, newOrderDetailId);
        }

        public event Action<InvoiceDetail, int, int> OrderDetailFKsChanged;
        protected virtual void OnOrderDetailPropertyChanging(OrderDetail oldValue, OrderDetail newValue)
        {
            if (OrderDetailPropertyChanging != null)
                OrderDetailPropertyChanging(oldValue, newValue);
        }

        protected internal event Action<OrderDetail, OrderDetail> OrderDetailPropertyChanging;
#endregion
#region Specifications
        public virtual IEnumerable<Error> ValidateOnClient(bool force = false)
        {
            if ((ChangeTracker.State & ObjectState.Deleted) == 0 && (force || ChangeTracker.OriginalValues.ContainsKey("Invoice")))
            {
                Error error = ValidateInvoiceRequired(Invoice);
                if (error != null)
                    yield return error;
            }

            if ((ChangeTracker.State & ObjectState.Deleted) == 0 && (force || ChangeTracker.OriginalValues.ContainsKey("OrderDetail")))
            {
                Error error = ValidateOrderDetailRequired(OrderDetail);
                if (error != null)
                    yield return error;
            }

            List<Error> errors = null;
            GetCustomValidation(ref errors);
            if (errors != null)
                foreach (var er in errors)
                    yield return er;
        }

        partial void GetCustomValidation(ref List<Error> errors);
#endregion
#region ChangeTracking
        protected virtual void AddValidationProperty(string propertyName)
        {
            if (!ChangeTracker.ValidationProperties.Contains(propertyName))
                ChangeTracker.ValidationProperties.Add(propertyName);
        }

        protected virtual void OnPropertyChanged(string propertyName, bool isTracked = true)
        {
            if (propertyName != "OrderDetailId" && isTracked && ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && (ChangeTracker.State & ObjectState.Deleted) == 0)
            {
                if (!(IsDeserializing || ChangeTracker.ModifiedProperties.Contains(propertyName)))
                    ChangeTracker.ModifiedProperties.Add(propertyName);
                ChangeTracker.State = ObjectState.Modified;
            }

            NotifyPropertyChanged.RaisePropertyChanged(propertyName);
            OnPropertyChangedExtension(propertyName);
        }

        partial void OnPropertyChangedExtension(string propertyName);
        protected virtual void OnNavigationPropertyChanged(string propertyName)
        {
            NotifyPropertyChanged.RaisePropertyChanged(propertyName);
            OnNavigationPropertyChangedExtension(propertyName);
            RaiseNavigationPropertyChanged(propertyName);
        }

        partial void OnNavigationPropertyChangedExtension(string propertyName);
        protected virtual void RaiseNavigationPropertyChanged(string propertyName)
        {
            if (NavigationPropertyChanged != null)
                NavigationPropertyChanged(this, propertyName);
        }

        public event Action<InvoiceDetail, string> NavigationPropertyChanged;
        private ObjectChangeTracker _changeTracker;
        [DataMember]
        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanged += HandleObjectStateChanged;
                }

                return _changeTracker;
            }

            set
            {
                if (_changeTracker != null)
                    _changeTracker.ObjectStateChanged -= HandleObjectStateChanged;
                _changeTracker = value;
                if (_changeTracker != null)
                    _changeTracker.ObjectStateChanged += HandleObjectStateChanged;
            }
        }

        private void HandleObjectStateChanged(object sender, ObjectStateChangedEventArgs e)
        {
            switch (e.NewState)
            {
                case ObjectState.Deleted:
                case ObjectState.CascadeDeleted:
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        IsDeleting = true;
                        ClearNavigationProperties();
                        IsDeleting = false;
                    }

                    break;
                case ObjectState.Detached:
                    ClearNavigationProperties();
                    break;
            }

            OnStateChanged(e.NewState);
        }

        protected virtual void OnStateChanged(ObjectState state)
        {
            if (StateChanged != null)
                StateChanged(this, state);
        }

        public event Action<IObjectWithChangeTracker, ObjectState> StateChanged;
        private bool _isDeserializing;
        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public bool IsDeserializing
        {
            get
            {
                return _isDeserializing;
            }

            set
            {
                if (_isDeserializing == value)
                    return;
                _isDeserializing = value;
            }
        }

        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public bool IsInitializingRelationships
        {
            get;
            set;
        }

        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }

        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }

        internal void HandleCascadeDelete(object sender, ObjectStateChangedEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
                this.MarkAsDeleted();
        }

        public virtual void MarkAsModified()
        {
            ChangeTracker.ChangeTrackingEnabled = true;
            ChangeTracker.State = ObjectState.Modified;
            ChangeTracker.ModifiedProperties.Add("OrderDetailId");
            ChangeTracker.ModifiedProperties.Add("InvoiceId");
            ChangeTracker.ModifiedProperties.Add("UnitPrice");
            ChangeTracker.ModifiedProperties.Add("Quantity");
            ChangeTracker.ModifiedProperties.Add("Discount");
            ChangeTracker.ModifiedProperties.Add("Amount");
        }

        protected virtual void ClearNavigationProperties()
        {
            bool isInitializingRelationships = IsInitializingRelationships;
            IsInitializingRelationships = true;
            Invoice = null;
            OrderDetail = null;
            IsInitializingRelationships = isInitializingRelationships;
        }

        public bool HasTemporaryKey
        {
            get
            {
                return ChangeTracker.State == ObjectState.Added;
            }
        }

        public virtual bool HasChanges
        {
            get
            {
                return ChangeTracker.State != ObjectState.Unchanged || ChangeTracker.ObjectsRemovedFromCollectionProperties.Any() || ChangeTracker.OriginalValues.Any() || ChangeTracker.ObjectsAddedToCollectionProperties.Any();
            }
        }

#endregion
#region Association Fixup
        private bool IsDeleting
        {
            get;
            set;
        }

        internal virtual void Detach()
        {
            ChangeTracker.State = ObjectState.Detached;
        }

        private void FixupInvoice(Invoice previousValue)
        {
            if (IsDeserializing)
                return;
            if (Invoice == null && ChangeTracker.ChangeTrackingEnabled && previousValue.ChangeTracker.State == ObjectState.Detached && previousValue.ChangeTracker.DetachedPreviousState != ObjectState.Added)
            {
                object originalValue;
                if (ChangeTracker.OriginalValues.TryGetValue("Invoice", out originalValue) && (originalValue == null || originalValue == previousValue))
                    ChangeTracker.OriginalValues.Remove("Invoice");
                return;
            }

            bool isInitializingRelationships = IsInitializingRelationships || (Invoice != null && Invoice.IsInitializingRelationships);
            var changeTrackingEnabled = ChangeTracker.ChangeTrackingEnabled;
            if (isInitializingRelationships || ChangeTracker.IsAttaching)
                ChangeTracker.ChangeTrackingEnabled = false;
            if (previousValue != null && previousValue.InvoiceDetails.Contains(this))
                previousValue.InvoiceDetails.Remove(this);
            if (Invoice != null)
            {
                if (!Invoice.InvoiceDetails.Contains(this))
                {
                    if (isInitializingRelationships)
                        Invoice.InvoiceDetails.Attach(this);
                    else
                        Invoice.InvoiceDetails.Add(this);
                }

                InvoiceId = Invoice.OrderId;
            }
            else if (!(IsDeserializing || ChangeTracker.State == ObjectState.Detached) && (ChangeTracker.State & ObjectState.Deleted) == 0)
            {
                InvoiceId = default (int);
            }

            if (ChangeTracker.ChangeTrackingEnabled && (!isInitializingRelationships || ChangeTracker.State == ObjectState.Added || Invoice != null && Invoice.ChangeTracker.State == ObjectState.Added))
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Invoice") && (ChangeTracker.OriginalValues["Invoice"] == Invoice))
                    ChangeTracker.OriginalValues.Remove("Invoice");
                else
                {
                    ChangeTracker.RecordOriginalValue("Invoice", previousValue);
                }

                if (Invoice != null && !Invoice.ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Detached)
                    Invoice.MarkAsAdded();
            }

            ChangeTracker.ChangeTrackingEnabled |= changeTrackingEnabled;
        }

        private void FixupOrderDetail(OrderDetail previousValue)
        {
            if (IsDeserializing)
                return;
            if (OrderDetail == null && ChangeTracker.ChangeTrackingEnabled && previousValue.ChangeTracker.State == ObjectState.Detached && previousValue.ChangeTracker.DetachedPreviousState != ObjectState.Added)
            {
                object originalValue;
                if (ChangeTracker.OriginalValues.TryGetValue("OrderDetail", out originalValue) && (originalValue == null || originalValue == previousValue))
                    ChangeTracker.OriginalValues.Remove("OrderDetail");
                return;
            }

            bool isInitializingRelationships = IsInitializingRelationships || (OrderDetail != null && OrderDetail.IsInitializingRelationships);
            var changeTrackingEnabled = ChangeTracker.ChangeTrackingEnabled;
            if (isInitializingRelationships || ChangeTracker.IsAttaching)
                ChangeTracker.ChangeTrackingEnabled = false;
            if (previousValue != null && ReferenceEquals(previousValue.InvoiceDetail, this))
                previousValue.InvoiceDetail = null;
            if (OrderDetail != null)
            {
                OrderDetail.InvoiceDetail = this;
                OrderDetailId = OrderDetail.Id;
            }

            if (ChangeTracker.ChangeTrackingEnabled && (!isInitializingRelationships || ChangeTracker.State == ObjectState.Added || OrderDetail != null && OrderDetail.ChangeTracker.State == ObjectState.Added))
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OrderDetail") && (ChangeTracker.OriginalValues["OrderDetail"] == OrderDetail))
                    ChangeTracker.OriginalValues.Remove("OrderDetail");
                else
                {
                    ChangeTracker.RecordOriginalValue("OrderDetail", previousValue);
                }

                if (OrderDetail != null && !OrderDetail.ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Detached)
                    OrderDetail.MarkAsAdded();
            }

            ChangeTracker.ChangeTrackingEnabled |= changeTrackingEnabled;
        }

#endregion
#region EntityKey
        private Guid? _dataTransferEntityKey;
        [DataMember]
        public virtual Guid DataTransferEntityKey
        {
            get
            {
                return _dataTransferEntityKey ?? (_dataTransferEntityKey = Guid.NewGuid()).Value;
            }

            set
            {
                _dataTransferEntityKey = value;
            }
        }

        private string _entityKey;
        public virtual string EntityKey
        {
            get
            {
                switch (ChangeTracker.State)
                {
                    case ObjectState.Added:
                        if (_entityKey == null)
                            _entityKey = "InvoiceDetail - IdentityKey = " + Guid.NewGuid().ToString();
                        return _entityKey;
                    case ObjectState.Detached:
                        if (_entityKey != null)
                            return _entityKey;
                        if (OrderDetailId == default (int))
                            goto case ObjectState.Added;
                        break;
                    case ObjectState.Unchanged:
                    case ObjectState.Modified:
                    case ObjectState.CascadeDeleted:
                    case ObjectState.Deleted:
                        _entityKey = null;
                        break;
                }

                return string.Format("InvoiceDetail - OrderDetailId={0};", OrderDetailId);
            }

            set
            {
                _entityKey = value;
            }
        }

        public virtual void ResetEntityKey()
        {
            if (!IsDeserializing)
            {
                var previousEntityKey = _entityKey;
                _entityKey = null;
                OnEntityKeyChanged(previousEntityKey);
            }
        }

        protected virtual void OnEntityKeyChanged(string previousEntityKey)
        {
            if (EntityKeyChanged != null)
                EntityKeyChanged(this, previousEntityKey);
        }

        public event Action<InvoiceDetail, string> EntityKeyChanged;
        public virtual bool IsTemporaryKey
        {
            get
            {
                return _entityKey != null;
            }
        }

#endregion
#region Dependences
#endregion
#region UISpecifications
        static InvoiceDetail()
        {
            DynamicType<InvoiceDetail>.AddProperty("OrderDetailIdIsMandatory", e => e.UISpecifications.GetOrderDetailIdIsMandatory(e));
            DynamicType<InvoiceDetail>.AddProperty("OrderDetailIdMinValue", e => e.UISpecifications.GetOrderDetailIdMinValue(e));
            DynamicType<InvoiceDetail>.AddProperty("OrderDetailIdMaxValue", e => e.UISpecifications.GetOrderDetailIdMaxValue(e));
            DynamicType<InvoiceDetail>.AddProperty("InvoiceIdIsMandatory", e => e.UISpecifications.GetInvoiceIdIsMandatory(e));
            DynamicType<InvoiceDetail>.AddProperty("InvoiceIdMinValue", e => e.UISpecifications.GetInvoiceIdMinValue(e));
            DynamicType<InvoiceDetail>.AddProperty("InvoiceIdMaxValue", e => e.UISpecifications.GetInvoiceIdMaxValue(e));
            DynamicType<InvoiceDetail>.AddProperty("UnitPriceIsMandatory", e => e.UISpecifications.GetUnitPriceIsMandatory(e));
            DynamicType<InvoiceDetail>.AddProperty("UnitPriceMinValue", e => e.UISpecifications.GetUnitPriceMinValue(e));
            DynamicType<InvoiceDetail>.AddProperty("UnitPriceMaxValue", e => e.UISpecifications.GetUnitPriceMaxValue(e));
            DynamicType<InvoiceDetail>.AddProperty("QuantityIsMandatory", e => e.UISpecifications.GetQuantityIsMandatory(e));
            DynamicType<InvoiceDetail>.AddProperty("QuantityMinValue", e => e.UISpecifications.GetQuantityMinValue(e));
            DynamicType<InvoiceDetail>.AddProperty("QuantityMaxValue", e => e.UISpecifications.GetQuantityMaxValue(e));
            DynamicType<InvoiceDetail>.AddProperty("DiscountIsMandatory", e => e.UISpecifications.GetDiscountIsMandatory(e));
            DynamicType<InvoiceDetail>.AddProperty("DiscountMinValue", e => e.UISpecifications.GetDiscountMinValue(e));
            DynamicType<InvoiceDetail>.AddProperty("DiscountMaxValue", e => e.UISpecifications.GetDiscountMaxValue(e));
            DynamicType<InvoiceDetail>.AddProperty("AmountIsMandatory", e => e.UISpecifications.GetAmountIsMandatory(e));
            DynamicType<InvoiceDetail>.AddProperty("AmountMinValue", e => e.UISpecifications.GetAmountMinValue(e));
            DynamicType<InvoiceDetail>.AddProperty("AmountMaxValue", e => e.UISpecifications.GetAmountMaxValue(e));
            DynamicType<InvoiceDetail>.AddProperty("InvoiceIsMandatory", e => e.UISpecifications.GetInvoiceIsMandatory(e));
            DynamicType<InvoiceDetail>.AddProperty("OrderDetailIsMandatory", e => e.UISpecifications.GetOrderDetailIsMandatory(e));
            DynamicType<InvoiceDetail>.AddProperty("AllErrors", e => e.Errors.AllErrors);
            DynamicType<InvoiceDetail>.AddProperty("OrderDetailIdErrors", e => e.Errors.OrderDetailId);
            DynamicType<InvoiceDetail>.AddProperty("InvoiceIdErrors", e => e.Errors.InvoiceId);
            DynamicType<InvoiceDetail>.AddProperty("UnitPriceErrors", e => e.Errors.UnitPrice);
            DynamicType<InvoiceDetail>.AddProperty("QuantityErrors", e => e.Errors.Quantity);
            DynamicType<InvoiceDetail>.AddProperty("DiscountErrors", e => e.Errors.Discount);
            DynamicType<InvoiceDetail>.AddProperty("AmountErrors", e => e.Errors.Amount);
            DynamicType<InvoiceDetail>.AddProperty("InvoiceErrors", e => e.Errors.Invoice);
            DynamicType<InvoiceDetail>.AddProperty("OrderDetailErrors", e => e.Errors.OrderDetail);
            StaticInitializer();
        }

        static partial void StaticInitializer();
        private UISpecificationsInfo _uiSpecifications;
        private UISpecificationsInfo UISpecifications
        {
            get
            {
                return _uiSpecifications ?? (_uiSpecifications = CreateInvoiceDetailUISpecifications());
            }
        }

        protected virtual UISpecificationsInfo CreateInvoiceDetailUISpecifications()
        {
            return new UISpecificationsInfo();
        }

        public partial class UISpecificationsInfo
        {
            public virtual bool GetOrderDetailIdIsMandatory(InvoiceDetail entity)
            {
                return true;
            }

            public virtual int ? GetOrderDetailIdMinValue(InvoiceDetail entity)
            {
                return null;
            }

            public virtual int ? GetOrderDetailIdMaxValue(InvoiceDetail entity)
            {
                return null;
            }

            public virtual bool GetInvoiceIdIsMandatory(InvoiceDetail entity)
            {
                return true;
            }

            public virtual int ? GetInvoiceIdMinValue(InvoiceDetail entity)
            {
                return null;
            }

            public virtual int ? GetInvoiceIdMaxValue(InvoiceDetail entity)
            {
                return null;
            }

            public virtual bool GetUnitPriceIsMandatory(InvoiceDetail entity)
            {
                return true;
            }

            public virtual double ? GetUnitPriceMinValue(InvoiceDetail entity)
            {
                return null;
            }

            public virtual double ? GetUnitPriceMaxValue(InvoiceDetail entity)
            {
                return null;
            }

            public virtual bool GetQuantityIsMandatory(InvoiceDetail entity)
            {
                return true;
            }

            public virtual short ? GetQuantityMinValue(InvoiceDetail entity)
            {
                return null;
            }

            public virtual short ? GetQuantityMaxValue(InvoiceDetail entity)
            {
                return null;
            }

            public virtual bool GetDiscountIsMandatory(InvoiceDetail entity)
            {
                return true;
            }

            public virtual double ? GetDiscountMinValue(InvoiceDetail entity)
            {
                return null;
            }

            public virtual double ? GetDiscountMaxValue(InvoiceDetail entity)
            {
                return null;
            }

            public virtual bool GetAmountIsMandatory(InvoiceDetail entity)
            {
                return true;
            }

            public virtual double ? GetAmountMinValue(InvoiceDetail entity)
            {
                return null;
            }

            public virtual double ? GetAmountMaxValue(InvoiceDetail entity)
            {
                return null;
            }

            public virtual bool GetInvoiceIsMandatory(WAQSWorkshopClient.InvoiceDetail entity)
            {
                return true;
            }

            public virtual bool GetOrderDetailIsMandatory(WAQSWorkshopClient.InvoiceDetail entity)
            {
                return true;
            }
        }

        private ErrorsSpecifications _errors;
        protected ErrorsSpecifications Errors
        {
            get
            {
                return _errors ?? (_errors = new ErrorsSpecifications());
            }
        }

        bool IEntityWithErrors.HasErrors
        {
            get
            {
                return Errors.AllErrors.Count != 0;
            }
        }

        event Action IEntityWithErrors.HasErrorsChanged
        {
            add
            {
                Errors.HasErrorChanged += value;
            }

            remove
            {
                Errors.HasErrorChanged += value;
            }
        }

        public partial class ErrorsSpecifications
        {
            private ObservableCollection<Error> _orderDetailId;
            public ObservableCollection<Error> OrderDetailId
            {
                get
                {
                    return _orderDetailId ?? (_orderDetailId = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _invoiceId;
            public ObservableCollection<Error> InvoiceId
            {
                get
                {
                    return _invoiceId ?? (_invoiceId = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _unitPrice;
            public ObservableCollection<Error> UnitPrice
            {
                get
                {
                    return _unitPrice ?? (_unitPrice = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _quantity;
            public ObservableCollection<Error> Quantity
            {
                get
                {
                    return _quantity ?? (_quantity = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _discount;
            public ObservableCollection<Error> Discount
            {
                get
                {
                    return _discount ?? (_discount = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _amount;
            public ObservableCollection<Error> Amount
            {
                get
                {
                    return _amount ?? (_amount = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _invoice;
            public ObservableCollection<Error> Invoice
            {
                get
                {
                    return _invoice ?? (_invoice = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _orderDetail;
            public ObservableCollection<Error> OrderDetail
            {
                get
                {
                    return _orderDetail ?? (_orderDetail = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _allErrors;
            public ObservableCollection<Error> AllErrors
            {
                get
                {
                    if (_allErrors == null)
                    {
                        _allErrors = new ObservableCollection<Error>();
                        NotifyCollectionChangedEventHandler errorsCollectionChanged = (_, e) =>
                        {
                            if (e.NewItems != null)
                                foreach (Error error in e.NewItems)
                                {
                                    if (!_allErrors.Any(er => er.Key == error.Key))
                                        _allErrors.Add(error);
                                }

                            if (e.OldItems != null)
                                foreach (Error error in e.OldItems)
                                    _allErrors.Remove(error);
                        }

                        ;
                        AddAllErrorsHandlers(errorsCollectionChanged);
                    }

                    return _allErrors;
                }
            }

            protected virtual void AddAllErrorsHandlers(NotifyCollectionChangedEventHandler errorsCollectionChanged)
            {
                NotifyCollectionChangedEventHandler specificErrorsCollectionChanged = (sender, e) =>
                {
                    errorsCollectionChanged(sender, e);
                    switch (e.Action)
                    {
                        case NotifyCollectionChangedAction.Add:
                            if (AllErrors.Count == e.NewItems.Count)
                                OnHasErrorChanged();
                            break;
                        case NotifyCollectionChangedAction.Remove:
                            if (AllErrors.Count == 0)
                                OnHasErrorChanged();
                            break;
                    }
                }

                ;
                OrderDetailId.CollectionChanged += specificErrorsCollectionChanged;
                InvoiceId.CollectionChanged += specificErrorsCollectionChanged;
                UnitPrice.CollectionChanged += specificErrorsCollectionChanged;
                Quantity.CollectionChanged += specificErrorsCollectionChanged;
                Discount.CollectionChanged += specificErrorsCollectionChanged;
                Amount.CollectionChanged += specificErrorsCollectionChanged;
                Invoice.CollectionChanged += specificErrorsCollectionChanged;
                OrderDetail.CollectionChanged += specificErrorsCollectionChanged;
            }

            protected void OnHasErrorChanged()
            {
                if (HasErrorChanged != null)
                    OnHasErrorChanged();
            }

            public event Action HasErrorChanged;
        }
#endregion
    }
}
            