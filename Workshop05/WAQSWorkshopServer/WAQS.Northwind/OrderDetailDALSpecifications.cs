//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Linq;
using System.Linq.Expressions;
using WAQS.Common;
using WAQSWorkshopServer;
using WAQSWorkshopServer.DAL.Interfaces;

namespace WAQSWorkshopServer.DAL
{
    public partial class OrderDetailDALSpecifications : IOrderDetailDALSpecifications
    {
        private NorthwindEntities _context;
    
        public OrderDetailDALSpecifications(NorthwindEntities context)
        {
            _context = context;
        }
    
        Expression<Func<WAQSWorkshopServer.OrderDetail, double>> IOrderDetailDALSpecifications.AmountExpression
        {
            get { return OrderDetailDALSpecifications.GetAmountExpression(); }
        }
    
        private static Expression<Func<WAQSWorkshopServer.OrderDetail, double>> _getAmountExpression;
        protected internal static Expression<Func<WAQSWorkshopServer.OrderDetail, double>> GetAmountExpression(bool isCoalesceEnabled = true)
        {
            if (_getAmountExpression == null)
            {
                Expression<Func<WAQSWorkshopServer.OrderDetail, double>> exp = (orderDetail) => orderDetail.UnitPrice * orderDetail.Quantity * (1 - orderDetail.Discount);
                _getAmountExpression = exp;
            }
            GetAmountExpression(ref _getAmountExpression);
            return _getAmountExpression;
        }
        static partial void GetAmountExpression(ref Expression<Func<WAQSWorkshopServer.OrderDetail, double>> exp);
    
        Expression<Func<WAQSWorkshopServer.OrderDetail, string>> IOrderDetailDALSpecifications.ProductFullNameExpression
        {
            get { return OrderDetailDALSpecifications.GetProductFullNameExpression(); }
        }
    
        private static Expression<Func<WAQSWorkshopServer.OrderDetail, string>> _getProductFullNameExpression;
        protected internal static Expression<Func<WAQSWorkshopServer.OrderDetail, string>> GetProductFullNameExpression(bool isCoalesceEnabled = true)
        {
            if (_getProductFullNameExpression == null)
            {
                Func<WAQSWorkshopServer.Product, string> getFullName_Product = (_) => default(string);
                Expression<Func<WAQSWorkshopServer.OrderDetail, string>> exp = (orderDetail) => getFullName_Product(orderDetail.Product);
                Func<InvocationExpression, Expression> replaceExpFunc = null;
                replaceExpFunc = invocationExpression =>
                    {
                        MemberExpression memberExpression = invocationExpression.Expression as MemberExpression;
                        if (memberExpression == null)
                            return invocationExpression;
                        switch (memberExpression.Member.Name)
                        {
                            case "getFullName_Product":
                            {
                                var getFullName_ProductSubExp = ProductDALSpecifications.GetFullNameExpression(isCoalesceEnabled : false);
                                if (getFullName_ProductSubExp == null)
                                    return null;
                                Expression subExp = getFullName_ProductSubExp.Body.ReplaceParameter(parameter => 
                                    {
                                        int index = getFullName_ProductSubExp.Parameters.IndexOf(parameter);
                                        if (index == -1)
                                            return parameter;
                                        return invocationExpression.Arguments[index].ReplaceInvocation(replaceExpFunc);
                                    });
                                return subExp;
                            }
                            default:
                                return invocationExpression;
                        }
                    };
                exp = (Expression<Func<WAQSWorkshopServer.OrderDetail, string>>)exp.ReplaceInvocation(replaceExpFunc);
                _getProductFullNameExpression = exp;
            }
            GetProductFullNameExpression(ref _getProductFullNameExpression);
            return _getProductFullNameExpression;
        }
        static partial void GetProductFullNameExpression(ref Expression<Func<WAQSWorkshopServer.OrderDetail, string>> exp);
    
    }
}
