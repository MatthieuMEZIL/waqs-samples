//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

            using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using WAQS.ClientContext;
using WAQS.ClientContext.Interfaces;
using WAQS.ClientContext.Interfaces.Errors;
using WAQS.ComponentModel;
using WAQS.Entities;
using WAQS.EntitiesTracking;

namespace WAQSWorkshopClient
{
    [DataContract(IsReference = true, Namespace = "http://Northwind/Entities")]
    [KnownType(typeof (Invoice))]
    [KnownType(typeof (Order))]
    public partial class Customer : DynamicType, IEntityWithErrors
    {
#region DynamicType
        protected override ICustomTypeDescriptor CustomTypeDescriptor
        {
            get
            {
                return new DynamicType<Customer>(this, CustomPropertyDescriptors);
            }
        }

        protected override IEnumerable<CustomPropertyDescriptor> CustomPropertyDescriptors
        {
            get
            {
                return DynamicType<Customer>.CustomProperties;
            }
        }

#endregion
#region Simple Properties
        [DataMember]
        public string Id
        {
            get
            {
                return _id;
            }

            set
            {
                if (_id == value)
                {
                    if (!(IsDeserializing || ChangeTracker.Saving))
                        ValidateIdRequired(value);
                    return;
                }

                OnIdPropertyChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateIdRequired(value);
                    ValidateIdMaxLength(value);
                    if (value != null)
                        value = value.PadRight(5);
                }

                _id = value;
                if (!ChangeTracker.Saving)
                {
                    OnIdPropertyChanged(value);
                    OnPropertyChanged("Id");
                }
            }
        }

        private string _id;
        partial void OnIdPropertyChanging(ref string value);
        partial void OnIdPropertyChanged(string value);
        protected virtual Error ValidateIdRequired(string value)
        {
            var errorInfo = Validators.ValidateRequiredStringProperty(value, () => Id, DataErrorInfo);
            var error = Errors.Id.FirstOrDefault(e => e.Key == "IdRequired");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Id.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Id.Add(error = new Error
                {
                Criticity = Criticity.Mandatory, Key = "IdRequired", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual Error ValidateIdMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 5, () => Id, DataErrorInfo);
            var error = Errors.Id.FirstOrDefault(e => e.Key == "IdMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Id.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Id.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "IdMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual void OnCompanyNameChanged(bool raise = true, bool validate = true)
        {
            if (raise)
                OnPropertyChanged("CompanyName");
            OnFullNameChanged();
        }

        [DataMember]
        public string CompanyName
        {
            get
            {
                return _companyName;
            }

            set
            {
                if (_companyName == value)
                {
                    if (!(IsDeserializing || ChangeTracker.Saving))
                        ValidateCompanyNameRequired(value);
                    return;
                }

                OnCompanyNamePropertyChanging(ref value);
                if (ChangeTracker.IsDetaching)
                    return;
                if (!IsDeserializing)
                {
                    ValidateCompanyNameRequired(value);
                    ValidateCompanyNameMaxLength(value);
                }

                _companyName = value;
                if (!ChangeTracker.Saving)
                {
                    OnCompanyNamePropertyChanged(value);
                    OnCompanyNameChanged(validate: !IsDeserializing);
                }
            }
        }

        private string _companyName;
        partial void OnCompanyNamePropertyChanging(ref string value);
        partial void OnCompanyNamePropertyChanged(string value);
        protected virtual Error ValidateCompanyNameRequired(string value)
        {
            var errorInfo = Validators.ValidateRequiredStringProperty(value, () => CompanyName, DataErrorInfo);
            var error = Errors.CompanyName.FirstOrDefault(e => e.Key == "CompanyNameRequired");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.CompanyName.Remove(error);
                return null;
            }

            if (error == null)
                Errors.CompanyName.Add(error = new Error
                {
                Criticity = Criticity.Mandatory, Key = "CompanyNameRequired", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual Error ValidateCompanyNameMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 40, () => CompanyName, DataErrorInfo);
            var error = Errors.CompanyName.FirstOrDefault(e => e.Key == "CompanyNameMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.CompanyName.Remove(error);
                return null;
            }

            if (error == null)
                Errors.CompanyName.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "CompanyNameMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual void OnContactNameChanged(bool raise = true, bool validate = true)
        {
            if (raise)
                OnPropertyChanged("ContactName");
            OnFullNameChanged();
        }

        [DataMember]
        public string ContactName
        {
            get
            {
                return _contactName;
            }

            set
            {
                if (_contactName == value)
                {
                    return;
                }

                OnContactNamePropertyChanging(ref value);
                if (ChangeTracker.IsDetaching)
                    return;
                if (!IsDeserializing)
                {
                    ValidateContactNameMaxLength(value);
                }

                _contactName = value;
                if (!ChangeTracker.Saving)
                {
                    OnContactNamePropertyChanged(value);
                    OnContactNameChanged(validate: !IsDeserializing);
                }
            }
        }

        private string _contactName;
        partial void OnContactNamePropertyChanging(ref string value);
        partial void OnContactNamePropertyChanged(string value);
        protected virtual Error ValidateContactNameMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 30, () => ContactName, DataErrorInfo);
            var error = Errors.ContactName.FirstOrDefault(e => e.Key == "ContactNameMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.ContactName.Remove(error);
                return null;
            }

            if (error == null)
                Errors.ContactName.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "ContactNameMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string ContactTitle
        {
            get
            {
                return _contactTitle;
            }

            set
            {
                if (_contactTitle == value)
                {
                    return;
                }

                OnContactTitlePropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateContactTitleMaxLength(value);
                }

                _contactTitle = value;
                if (!ChangeTracker.Saving)
                {
                    OnContactTitlePropertyChanged(value);
                    OnPropertyChanged("ContactTitle");
                }
            }
        }

        private string _contactTitle;
        partial void OnContactTitlePropertyChanging(ref string value);
        partial void OnContactTitlePropertyChanged(string value);
        protected virtual Error ValidateContactTitleMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 30, () => ContactTitle, DataErrorInfo);
            var error = Errors.ContactTitle.FirstOrDefault(e => e.Key == "ContactTitleMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.ContactTitle.Remove(error);
                return null;
            }

            if (error == null)
                Errors.ContactTitle.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "ContactTitleMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string Address
        {
            get
            {
                return _address;
            }

            set
            {
                if (_address == value)
                {
                    return;
                }

                OnAddressPropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateAddressMaxLength(value);
                }

                _address = value;
                if (!ChangeTracker.Saving)
                {
                    OnAddressPropertyChanged(value);
                    OnPropertyChanged("Address");
                }
            }
        }

        private string _address;
        partial void OnAddressPropertyChanging(ref string value);
        partial void OnAddressPropertyChanged(string value);
        protected virtual Error ValidateAddressMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 60, () => Address, DataErrorInfo);
            var error = Errors.Address.FirstOrDefault(e => e.Key == "AddressMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Address.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Address.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "AddressMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string City
        {
            get
            {
                return _city;
            }

            set
            {
                if (_city == value)
                {
                    return;
                }

                OnCityPropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateCityMaxLength(value);
                }

                _city = value;
                if (!ChangeTracker.Saving)
                {
                    OnCityPropertyChanged(value);
                    OnPropertyChanged("City");
                }
            }
        }

        private string _city;
        partial void OnCityPropertyChanging(ref string value);
        partial void OnCityPropertyChanged(string value);
        protected virtual Error ValidateCityMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 15, () => City, DataErrorInfo);
            var error = Errors.City.FirstOrDefault(e => e.Key == "CityMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.City.Remove(error);
                return null;
            }

            if (error == null)
                Errors.City.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "CityMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual void OnRegionChanged(bool raise = true, bool validate = true)
        {
            if (raise)
                OnPropertyChanged("Region");
            if (validate)
            {
                ValidateRegionRequired(Region);
                AddValidationProperty("Country");
                NotifyPropertyChanged.RaisePropertyChanged("RegionIsMandatory");
                ValidateRegionMaxLength(Region);
            }
        }

        [DataMember]
        public string Region
        {
            get
            {
                return _region;
            }

            set
            {
                if (_region == value)
                {
                    if (!(IsDeserializing || ChangeTracker.Saving))
                        ValidateRegionRequired(value);
                    return;
                }

                OnRegionPropertyChanging(ref value);
                if (ChangeTracker.IsDetaching)
                    return;
                if (!IsDeserializing)
                {
                    ValidateRegionMaxLength(value);
                }

                _region = value;
                if (!ChangeTracker.Saving)
                {
                    OnRegionPropertyChanged(value);
                    OnRegionChanged(validate: !IsDeserializing);
                }
            }
        }

        private string _region;
        partial void OnRegionPropertyChanging(ref string value);
        partial void OnRegionPropertyChanged(string value);
        protected virtual Error ValidateRegionRequired(string value)
        {
            var errorInfo = this.Country != "USA" ? (ErrorInfo)null : Validators.ValidateRequiredStringProperty(value, () => Region, DataErrorInfo);
            var error = Errors.Region.FirstOrDefault(e => e.Key == "RegionRequired");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Region.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Region.Add(error = new Error
                {
                Criticity = Criticity.Mandatory, Key = "RegionRequired", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual Error ValidateRegionMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 15, () => Region, DataErrorInfo);
            var error = Errors.Region.FirstOrDefault(e => e.Key == "RegionMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Region.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Region.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "RegionMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual void OnPostalCodeChanged(bool raise = true, bool validate = true)
        {
            if (raise)
                OnPropertyChanged("PostalCode");
            if (validate)
            {
                ValidatePostalCodePattern(PostalCode);
                AddValidationProperty("Country");
                NotifyPropertyChanged.RaisePropertyChanged("PostalCodePattern");
                ValidatePostalCodeMaxLength(PostalCode);
            }
        }

        [DataMember]
        public string PostalCode
        {
            get
            {
                return _postalCode;
            }

            set
            {
                if (_postalCode == value)
                {
                    return;
                }

                OnPostalCodePropertyChanging(ref value);
                if (ChangeTracker.IsDetaching)
                    return;
                if (!IsDeserializing)
                {
                    ValidatePostalCodeMaxLength(value);
                }

                _postalCode = value;
                if (!ChangeTracker.Saving)
                {
                    OnPostalCodePropertyChanged(value);
                    OnPostalCodeChanged(validate: !IsDeserializing);
                }
            }
        }

        private string _postalCode;
        partial void OnPostalCodePropertyChanging(ref string value);
        partial void OnPostalCodePropertyChanged(string value);
        protected virtual Error ValidatePostalCodeMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 10, () => PostalCode, DataErrorInfo);
            var error = Errors.PostalCode.FirstOrDefault(e => e.Key == "PostalCodeMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.PostalCode.Remove(error);
                return null;
            }

            if (error == null)
                Errors.PostalCode.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "PostalCodeMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual Error ValidatePostalCodePattern(string value)
        {
            if (value == null)
                return null;
            string pattern = this.Country == "USA" ? "^[0-9]{5}(?:-[0-9]{4})?$" : this.Country == "France" ? @"^(?:\d{2}|(?:2(?:A|B)))\d{3}$" : null;
            var errorInfo = pattern != null ? Validators.ValidatePattern(value, pattern, () => PostalCode, DataErrorInfo) : null;
            var error = Errors.PostalCode.FirstOrDefault(e => e.Key == "PostalCodePattern");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.PostalCode.Remove(error);
                return null;
            }

            if (error == null)
                Errors.PostalCode.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "PostalCodePattern", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual void OnCountryChanged(bool raise = true, bool validate = true)
        {
            if (raise)
                OnPropertyChanged("Country");
            if (validate)
            {
                ValidateRegionRequired(Region);
                NotifyPropertyChanged.RaisePropertyChanged("RegionIsMandatory");
                ValidatePostalCodePattern(PostalCode);
                NotifyPropertyChanged.RaisePropertyChanged("PostalCodePattern");
                ValidateCountryMaxLength(Country);
            }
        }

        [DataMember]
        public string Country
        {
            get
            {
                return _country;
            }

            set
            {
                if (_country == value)
                {
                    return;
                }

                OnCountryPropertyChanging(ref value);
                if (ChangeTracker.IsDetaching)
                    return;
                if (!IsDeserializing)
                {
                    ValidateCountryMaxLength(value);
                }

                _country = value;
                if (!ChangeTracker.Saving)
                {
                    OnCountryPropertyChanged(value);
                    OnCountryChanged(validate: !IsDeserializing);
                }
            }
        }

        private string _country;
        partial void OnCountryPropertyChanging(ref string value);
        partial void OnCountryPropertyChanged(string value);
        protected virtual Error ValidateCountryMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 15, () => Country, DataErrorInfo);
            var error = Errors.Country.FirstOrDefault(e => e.Key == "CountryMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Country.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Country.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "CountryMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string Phone
        {
            get
            {
                return _phone;
            }

            set
            {
                if (_phone == value)
                {
                    return;
                }

                OnPhonePropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidatePhoneMaxLength(value);
                }

                _phone = value;
                if (!ChangeTracker.Saving)
                {
                    OnPhonePropertyChanged(value);
                    OnPropertyChanged("Phone");
                }
            }
        }

        private string _phone;
        partial void OnPhonePropertyChanging(ref string value);
        partial void OnPhonePropertyChanged(string value);
        protected virtual Error ValidatePhoneMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 24, () => Phone, DataErrorInfo);
            var error = Errors.Phone.FirstOrDefault(e => e.Key == "PhoneMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Phone.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Phone.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "PhoneMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string Fax
        {
            get
            {
                return _fax;
            }

            set
            {
                if (_fax == value)
                {
                    return;
                }

                OnFaxPropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateFaxMaxLength(value);
                }

                _fax = value;
                if (!ChangeTracker.Saving)
                {
                    OnFaxPropertyChanged(value);
                    OnPropertyChanged("Fax");
                }
            }
        }

        private string _fax;
        partial void OnFaxPropertyChanging(ref string value);
        partial void OnFaxPropertyChanged(string value);
        protected virtual Error ValidateFaxMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 24, () => Fax, DataErrorInfo);
            var error = Errors.Fax.FirstOrDefault(e => e.Key == "FaxMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Fax.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Fax.Add(error = new Error
                {
                Criticity = Criticity.Error, Key = "FaxMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public bool IsVIP
        {
            get
            {
                return _isVIP;
            }

            set
            {
                if (_isVIP == value)
                {
                    return;
                }

                OnIsVIPPropertyChanging(ref value);
                _isVIP = value;
                if (!ChangeTracker.Saving)
                {
                    OnIsVIPPropertyChanged(value);
                    OnPropertyChanged("IsVIP");
                }
            }
        }

        private bool _isVIP;
        partial void OnIsVIPPropertyChanging(ref bool value);
        partial void OnIsVIPPropertyChanged(bool value);
#endregion
#region Complex Properties
#endregion
#region Navigation Properties
        [DataMember]
        public TrackableCollection<Invoice> Invoices
        {
            get
            {
                if (!ChangeTracker.Saving)
                    OnGetInvoices();
                if (OnGetInvoicesAction != null)
                    OnGetInvoicesAction();
                if (_invoices == null)
                {
                    _invoices = new TrackableCollection<Invoice>();
                    SetFixupInvoices();
                    OnInvoicesPropertyChanging(null, _invoices);
                    OnInvoicesPropertyChanged(null, _invoices);
                }

                return _invoices;
            }

            set
            {
                if (ReferenceEquals(_invoices, value))
                    return;
                if (ChangeTracker.ChangeTrackingEnabled)
                    throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                var oldInvoices = _invoices;
                if (_invoices != null)
                {
                    _invoices.CollectionChanged -= FixupInvoices;
                }

                _invoices = value;
                if (_invoices != null)
                {
                    SetFixupInvoices();
                }

                OnInvoicesPropertyChanging(oldInvoices, _invoices);
                OnInvoicesPropertyChanged(oldInvoices, _invoices);
                OnNavigationPropertyChanged("Invoices");
            }
        }

        partial void OnGetInvoices();
        public Action OnGetInvoicesAction
        {
            get;
            set;
        }

        partial void OnInvoicesPropertyChanged(TrackableCollection<Invoice> oldValue, TrackableCollection<Invoice> newValue);
        private TrackableCollection<Invoice> _invoices;
        private void SetFixupInvoices()
        {
            _invoices.CollectionChanged += FixupInvoices;
            var invoicesAsITrackableCollection = (ITrackableCollection<Invoice>)_invoices;
            invoicesAsITrackableCollection.GetWhereExpression = e => e.CustomerId == Id;
            invoicesAsITrackableCollection.GetClientContext = () =>
            {
                IClientEntitySet clientEntitySet = ClientEntitySetExtensions.GetClientEntitySet(this);
                return clientEntitySet == null || ChangeTracker.State == ObjectState.Detached ? null : clientEntitySet.Context;
            }

            ;
        }

        protected virtual void OnInvoicesPropertyChanging(TrackableCollection<Invoice> oldValue, TrackableCollection<Invoice> newValue)
        {
            if (InvoicesPropertyChanging != null)
                InvoicesPropertyChanging(oldValue, newValue);
        }

        protected internal event Action<TrackableCollection<Invoice>, TrackableCollection<Invoice>> InvoicesPropertyChanging;
        private void OrdersCollectionChanged(object _, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (Order entity in e.NewItems)
                        OrdersAddHandler(entity);
                    OnTotalSpentChanged();
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (Order entity in e.OldItems)
                        OrdersRemoveHandler(entity);
                    OnTotalSpentChanged();
                    break;
                case NotifyCollectionChangedAction.Replace:
                    foreach (Order entity in e.NewItems)
                        OrdersAddHandler(entity);
                    foreach (Order entity in e.OldItems)
                        OrdersRemoveHandler(entity);
                    OnTotalSpentChanged();
                    break;
                case NotifyCollectionChangedAction.Reset:
                    // Should not append because TrackableCollection uses Remove for each of them instead using real Clear method
                    throw new InvalidOperationException();
            }
        }

        private void OrdersAddHandler(TrackableCollection<Order> collection)
        {
            if (collection != null)
            {
                foreach (var entity in collection)
                    OrdersAddHandler(entity);
                collection.CollectionChanged += OrdersCollectionChanged;
            }
        }

        private void OrdersRemoveHandler(TrackableCollection<Order> collection)
        {
            if (collection != null)
            {
                foreach (var entity in collection)
                    OrdersRemoveHandler(entity);
                collection.CollectionChanged -= OrdersCollectionChanged;
            }
        }

        private void OrdersAddHandler(Order entity)
        {
            if (entity != null)
            {
                entity.PropertyChanged += OrdersPropertyChanged;
            }
        }

        private void OrdersPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            switch (e.PropertyName)
            {
                case "Total":
                    OnTotalSpentChanged();
                    break;
            }
        }

        private void OrdersRemoveHandler(Order entity)
        {
            if (entity != null)
            {
                entity.PropertyChanged -= OrdersPropertyChanged;
            }
        }

        protected virtual void OnOrdersChanged(TrackableCollection<Order> oldValue, TrackableCollection<Order> newValue, bool raise = true, bool validate = true)
        {
            OrdersRemoveHandler(oldValue);
            OrdersAddHandler(newValue);
            if (raise)
                OnPropertyChanged("Orders", false);
            OnTotalSpentChanged();
        }

        [DataMember]
        public TrackableCollection<Order> Orders
        {
            get
            {
                if (!ChangeTracker.Saving)
                    OnGetOrders();
                if (OnGetOrdersAction != null)
                    OnGetOrdersAction();
                if (_orders == null)
                {
                    _orders = new TrackableCollection<Order>();
                    SetFixupOrders();
                    OnOrdersPropertyChanging(null, _orders);
                    OnOrdersChanged(null, _orders, false);
                    OnOrdersPropertyChanged(null, _orders);
                }

                return _orders;
            }

            set
            {
                if (ReferenceEquals(_orders, value))
                    return;
                if (ChangeTracker.ChangeTrackingEnabled)
                    throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                var oldOrders = _orders;
                if (_orders != null)
                {
                    _orders.CollectionChanged -= FixupOrders;
                }

                _orders = value;
                if (_orders != null)
                {
                    SetFixupOrders();
                }

                OnOrdersPropertyChanging(oldOrders, _orders);
                OnOrdersChanged(oldOrders, _orders);
                OnOrdersPropertyChanged(oldOrders, _orders);
                OnNavigationPropertyChanged("Orders");
            }
        }

        partial void OnGetOrders();
        public Action OnGetOrdersAction
        {
            get;
            set;
        }

        partial void OnOrdersPropertyChanged(TrackableCollection<Order> oldValue, TrackableCollection<Order> newValue);
        private TrackableCollection<Order> _orders;
        private void SetFixupOrders()
        {
            _orders.CollectionChanged += FixupOrders;
            var ordersAsITrackableCollection = (ITrackableCollection<Order>)_orders;
            ordersAsITrackableCollection.GetWhereExpression = e => e.CustomerId == Id;
            ordersAsITrackableCollection.GetClientContext = () =>
            {
                IClientEntitySet clientEntitySet = ClientEntitySetExtensions.GetClientEntitySet(this);
                return clientEntitySet == null || ChangeTracker.State == ObjectState.Detached ? null : clientEntitySet.Context;
            }

            ;
        }

        protected virtual void OnOrdersPropertyChanging(TrackableCollection<Order> oldValue, TrackableCollection<Order> newValue)
        {
            if (OrdersPropertyChanging != null)
                OrdersPropertyChanging(oldValue, newValue);
        }

        protected internal event Action<TrackableCollection<Order>, TrackableCollection<Order>> OrdersPropertyChanging;
#endregion
#region Specifications
        public virtual IEnumerable<Error> ValidateOnClient(bool force = false)
        {
            bool yieldPostalCodePattern = false;
            bool yieldRegionRequired = false;
            {
                Error error = ValidateIdRequired(Id);
                if (error != null)
                    yield return error;
                error = ValidateIdMaxLength(Id);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("CompanyName"))
            {
                Error error = ValidateCompanyNameRequired(CompanyName);
                if (error != null)
                    yield return error;
                error = ValidateCompanyNameMaxLength(CompanyName);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("ContactName"))
            {
                Error error = ValidateContactNameMaxLength(ContactName);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("ContactTitle"))
            {
                Error error = ValidateContactTitleMaxLength(ContactTitle);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("Address"))
            {
                Error error = ValidateAddressMaxLength(Address);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("City"))
            {
                Error error = ValidateCityMaxLength(City);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("Region"))
            {
                Error error = ValidateRegionRequired(Region);
                if (!(error == null || yieldRegionRequired))
                {
                    yieldRegionRequired = true;
                    yield return error;
                }

                error = ValidateRegionMaxLength(Region);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("PostalCode"))
            {
                Error error = ValidatePostalCodeMaxLength(PostalCode);
                if (error != null)
                    yield return error;
                error = ValidatePostalCodePattern(PostalCode);
                if (!(error == null || yieldPostalCodePattern))
                {
                    yieldPostalCodePattern = true;
                    yield return error;
                }
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("Country"))
            {
                Error error = ValidateRegionRequired(Region);
                if (!(error == null || yieldRegionRequired))
                {
                    yieldRegionRequired = true;
                    yield return error;
                }

                error = ValidateCountryMaxLength(Country);
                if (error != null)
                    yield return error;
                error = ValidatePostalCodePattern(PostalCode);
                if (!(error == null || yieldPostalCodePattern))
                {
                    yieldPostalCodePattern = true;
                    yield return error;
                }
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("Phone"))
            {
                Error error = ValidatePhoneMaxLength(Phone);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("Fax"))
            {
                Error error = ValidateFaxMaxLength(Fax);
                if (error != null)
                    yield return error;
            }

            List<Error> errors = null;
            GetCustomValidation(ref errors);
            if (errors != null)
                foreach (var er in errors)
                    yield return er;
        }

        private string _previousFullName;
        public string FullName
        {
            get
            {
                if (Specifications != null && Specifications.HasFullName)
                    return Specifications.FullName;
                return this.CompanyName + " " + this.ContactName;
            }

            set
            {
                throw new System.InvalidOperationException();
                ;
            }
        }

        protected virtual void OnFullNamePropertyChanging()
        {
            if (FullNamePropertyChanging != null)
            {
                var value = FullName;
                if (value == _previousFullName)
                    return;
                var oldValue = _previousFullName;
                _previousFullName = value;
                FullNamePropertyChanging(oldValue, value);
            }
        }

        protected internal event Action<string, string> FullNamePropertyChanging;
        private double _previousTotalSpent;
        public double TotalSpent
        {
            get
            {
                if (Specifications != null && Specifications.HasTotalSpent)
                    return Specifications.TotalSpent;
                if (this.Orders == null)
                    return default (double);
                return this.Orders.Sum(o =>
                {
                    if (o == null)
                        return default (double);
                    return o.Total;
                }

                );
            }

            set
            {
                throw new System.InvalidOperationException();
                ;
            }
        }

        protected virtual void OnTotalSpentPropertyChanging()
        {
            if (TotalSpentPropertyChanging != null)
            {
                var value = TotalSpent;
                if (value == _previousTotalSpent)
                    return;
                var oldValue = _previousTotalSpent;
                _previousTotalSpent = value;
                TotalSpentPropertyChanging(oldValue, value);
            }
        }

        protected internal event Action<double, double> TotalSpentPropertyChanging;
        partial void GetCustomValidation(ref List<Error> errors);
        [DataContract(Namespace = "http://Northwind/Entities")]
        public partial class CustomerSpecifications
        {
            string _fullName;
            [DataMember]
            public string FullName
            {
                get
                {
                    return _fullName;
                }

                set
                {
                    _fullName = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged((Customer e) => e.FullName);
                }
            }

            bool _hasFullName;
            [DataMember]
            public bool HasFullName
            {
                get
                {
                    return _hasFullName;
                }

                set
                {
                    _hasFullName = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged((Customer e) => e.FullName);
                }
            }

            double _totalSpent;
            [DataMember]
            public double TotalSpent
            {
                get
                {
                    return _totalSpent;
                }

                set
                {
                    _totalSpent = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged((Customer e) => e.TotalSpent);
                }
            }

            bool _hasTotalSpent;
            [DataMember]
            public bool HasTotalSpent
            {
                get
                {
                    return _hasTotalSpent;
                }

                set
                {
                    _hasTotalSpent = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged((Customer e) => e.TotalSpent);
                }
            }

            public NotifyPropertyChanged NotifyPropertyChanged
            {
                get;
                set;
            }
        }

        private CustomerSpecifications _specifications;
        [DataMember]
        public CustomerSpecifications Specifications
        {
            get
            {
                return _specifications;
            }

            set
            {
                _specifications = value;
                if (_specifications != null)
                    _specifications.NotifyPropertyChanged = NotifyPropertyChanged;
            }
        }

        protected virtual void OnTotalSpentChanged(bool raise = true, bool validate = true)
        {
            if (!IsDeserializing)
                OnTotalSpentPropertyChanging();
            if (raise)
                OnPropertyChanged("TotalSpent", false);
        }

        protected virtual void OnFullNameChanged(bool raise = true, bool validate = true)
        {
            if (!IsDeserializing)
                OnFullNamePropertyChanging();
            if (raise)
                OnPropertyChanged("FullName", false);
        }

#endregion
#region ChangeTracking
        protected virtual void AddValidationProperty(string propertyName)
        {
            if (!ChangeTracker.ValidationProperties.Contains(propertyName))
                ChangeTracker.ValidationProperties.Add(propertyName);
        }

        protected virtual void OnPropertyChanged(string propertyName, bool isTracked = true)
        {
            if (propertyName != "Id" && isTracked && ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && (ChangeTracker.State & ObjectState.Deleted) == 0)
            {
                if (!(IsDeserializing || ChangeTracker.ModifiedProperties.Contains(propertyName)))
                    ChangeTracker.ModifiedProperties.Add(propertyName);
                ChangeTracker.State = ObjectState.Modified;
            }

            NotifyPropertyChanged.RaisePropertyChanged(propertyName);
            OnPropertyChangedExtension(propertyName);
        }

        partial void OnPropertyChangedExtension(string propertyName);
        protected virtual void OnNavigationPropertyChanged(string propertyName)
        {
            NotifyPropertyChanged.RaisePropertyChanged(propertyName);
            OnNavigationPropertyChangedExtension(propertyName);
            RaiseNavigationPropertyChanged(propertyName);
        }

        partial void OnNavigationPropertyChangedExtension(string propertyName);
        protected virtual void RaiseNavigationPropertyChanged(string propertyName)
        {
            if (NavigationPropertyChanged != null)
                NavigationPropertyChanged(this, propertyName);
        }

        public event Action<Customer, string> NavigationPropertyChanged;
        private ObjectChangeTracker _changeTracker;
        [DataMember]
        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanged += HandleObjectStateChanged;
                }

                return _changeTracker;
            }

            set
            {
                if (_changeTracker != null)
                    _changeTracker.ObjectStateChanged -= HandleObjectStateChanged;
                _changeTracker = value;
                if (_changeTracker != null)
                    _changeTracker.ObjectStateChanged += HandleObjectStateChanged;
            }
        }

        private void HandleObjectStateChanged(object sender, ObjectStateChangedEventArgs e)
        {
            switch (e.NewState)
            {
                case ObjectState.Deleted:
                case ObjectState.CascadeDeleted:
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        IsDeleting = true;
                        ClearNavigationProperties();
                        IsDeleting = false;
                    }

                    break;
                case ObjectState.Detached:
                    ClearNavigationProperties();
                    break;
            }

            OnStateChanged(e.NewState);
        }

        protected virtual void OnStateChanged(ObjectState state)
        {
            if (StateChanged != null)
                StateChanged(this, state);
        }

        public event Action<IObjectWithChangeTracker, ObjectState> StateChanged;
        private bool _isDeserializing;
        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public bool IsDeserializing
        {
            get
            {
                return _isDeserializing;
            }

            set
            {
                if (_isDeserializing == value)
                    return;
                _isDeserializing = value;
            }
        }

        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public bool IsInitializingRelationships
        {
            get;
            set;
        }

        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }

        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }

        public virtual void MarkAsModified()
        {
            ChangeTracker.ChangeTrackingEnabled = true;
            ChangeTracker.State = ObjectState.Modified;
            ChangeTracker.ModifiedProperties.Add("Id");
            ChangeTracker.ModifiedProperties.Add("CompanyName");
            ChangeTracker.ModifiedProperties.Add("ContactName");
            ChangeTracker.ModifiedProperties.Add("ContactTitle");
            ChangeTracker.ModifiedProperties.Add("Address");
            ChangeTracker.ModifiedProperties.Add("City");
            ChangeTracker.ModifiedProperties.Add("Region");
            ChangeTracker.ModifiedProperties.Add("PostalCode");
            ChangeTracker.ModifiedProperties.Add("Country");
            ChangeTracker.ModifiedProperties.Add("Phone");
            ChangeTracker.ModifiedProperties.Add("Fax");
            ChangeTracker.ModifiedProperties.Add("IsVIP");
        }

        protected virtual void ClearNavigationProperties()
        {
            bool isInitializingRelationships = IsInitializingRelationships;
            IsInitializingRelationships = true;
            Invoices.Clear();
            Orders.Clear();
            IsInitializingRelationships = isInitializingRelationships;
        }

        public bool HasTemporaryKey
        {
            get
            {
                return false;
            }
        }

        public virtual bool HasChanges
        {
            get
            {
                return ChangeTracker.State != ObjectState.Unchanged || ChangeTracker.ObjectsRemovedFromCollectionProperties.Any() || ChangeTracker.OriginalValues.Any() || ChangeTracker.ObjectsAddedToCollectionProperties.Any();
            }
        }

#endregion
#region Association Fixup
        private bool IsDeleting
        {
            get;
            set;
        }

        internal virtual void Detach()
        {
            ChangeTracker.State = ObjectState.Detached;
        }

        private void FixupInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing || Invoices.IsAttachingOrDetaching)
                return;
            if (e.NewItems != null)
            {
                foreach (Invoice item in e.NewItems)
                {
                    bool itemIsInitializingRelationships = item.IsInitializingRelationships;
                    if (IsInitializingRelationships)
                        item.IsInitializingRelationships = true;
                    item.Customer = this;
                    if (!(IsInitializingRelationships || item.IsInitializingRelationships) && ChangeTracker.ChangeTrackingEnabled && (ChangeTracker.State == ObjectState.Added || item.ChangeTracker.State == ObjectState.Added || !(ChangeTracker.IsAttaching || item.ChangeTracker.IsAttaching)))
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                            item.MarkAsAdded();
                        ChangeTracker.RecordAdditionToCollectionProperties("Invoices", item);
                    }

                    item.IsInitializingRelationships = itemIsInitializingRelationships;
                }
            }

            if (e.OldItems != null)
            {
                foreach (Invoice item in e.OldItems)
                {
                    bool itemIsInitializingRelationships = item.IsInitializingRelationships;
                    if (IsInitializingRelationships)
                        item.IsInitializingRelationships = true;
                    if (ReferenceEquals(item.Customer, this))
                        item.Customer = null;
                    if (ChangeTracker.ChangeTrackingEnabled && !IsInitializingRelationships)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Invoices", item);
                    }

                    item.IsInitializingRelationships = itemIsInitializingRelationships;
                }
            }
        }

        private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing || Orders.IsAttachingOrDetaching)
                return;
            if (e.NewItems != null)
            {
                foreach (Order item in e.NewItems)
                {
                    bool itemIsInitializingRelationships = item.IsInitializingRelationships;
                    if (IsInitializingRelationships)
                        item.IsInitializingRelationships = true;
                    item.Customer = this;
                    if (!(IsInitializingRelationships || item.IsInitializingRelationships) && ChangeTracker.ChangeTrackingEnabled && (ChangeTracker.State == ObjectState.Added || item.ChangeTracker.State == ObjectState.Added || !(ChangeTracker.IsAttaching || item.ChangeTracker.IsAttaching)))
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                            item.MarkAsAdded();
                        ChangeTracker.RecordAdditionToCollectionProperties("Orders", item);
                    }

                    item.IsInitializingRelationships = itemIsInitializingRelationships;
                }
            }

            if (e.OldItems != null)
            {
                foreach (Order item in e.OldItems)
                {
                    bool itemIsInitializingRelationships = item.IsInitializingRelationships;
                    if (IsInitializingRelationships)
                        item.IsInitializingRelationships = true;
                    if (ReferenceEquals(item.Customer, this))
                        item.Customer = null;
                    if (ChangeTracker.ChangeTrackingEnabled && !IsInitializingRelationships)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Orders", item);
                    }

                    item.IsInitializingRelationships = itemIsInitializingRelationships;
                }
            }
        }

#endregion
#region EntityKey
        private Guid? _dataTransferEntityKey;
        [DataMember]
        public virtual Guid DataTransferEntityKey
        {
            get
            {
                return _dataTransferEntityKey ?? (_dataTransferEntityKey = Guid.NewGuid()).Value;
            }

            set
            {
                _dataTransferEntityKey = value;
            }
        }

        public virtual string EntityKey
        {
            get
            {
                return string.Format("Customer - Id={0};", Id);
            }

            set
            {
            }
        }

#endregion
#region Dependences
#endregion
#region UISpecifications
        static Customer()
        {
            DynamicType<Customer>.AddProperty("IdIsMandatory", e => e.UISpecifications.GetIdIsMandatory(e));
            DynamicType<Customer>.AddProperty("IdMaxLength", e => e.UISpecifications.GetIdMaxLength(e));
            DynamicType<Customer>.AddProperty("IdMinLength", e => e.UISpecifications.GetIdMinLength(e));
            DynamicType<Customer>.AddProperty("IdPattern", e => e.UISpecifications.GetIdPattern(e));
            DynamicType<Customer>.AddProperty("CompanyNameIsMandatory", e => e.UISpecifications.GetCompanyNameIsMandatory(e));
            DynamicType<Customer>.AddProperty("CompanyNameMaxLength", e => e.UISpecifications.GetCompanyNameMaxLength(e));
            DynamicType<Customer>.AddProperty("CompanyNameMinLength", e => e.UISpecifications.GetCompanyNameMinLength(e));
            DynamicType<Customer>.AddProperty("CompanyNamePattern", e => e.UISpecifications.GetCompanyNamePattern(e));
            DynamicType<Customer>.AddProperty("ContactNameIsMandatory", e => e.UISpecifications.GetContactNameIsMandatory(e));
            DynamicType<Customer>.AddProperty("ContactNameMaxLength", e => e.UISpecifications.GetContactNameMaxLength(e));
            DynamicType<Customer>.AddProperty("ContactNameMinLength", e => e.UISpecifications.GetContactNameMinLength(e));
            DynamicType<Customer>.AddProperty("ContactNamePattern", e => e.UISpecifications.GetContactNamePattern(e));
            DynamicType<Customer>.AddProperty("ContactTitleIsMandatory", e => e.UISpecifications.GetContactTitleIsMandatory(e));
            DynamicType<Customer>.AddProperty("ContactTitleMaxLength", e => e.UISpecifications.GetContactTitleMaxLength(e));
            DynamicType<Customer>.AddProperty("ContactTitleMinLength", e => e.UISpecifications.GetContactTitleMinLength(e));
            DynamicType<Customer>.AddProperty("ContactTitlePattern", e => e.UISpecifications.GetContactTitlePattern(e));
            DynamicType<Customer>.AddProperty("AddressIsMandatory", e => e.UISpecifications.GetAddressIsMandatory(e));
            DynamicType<Customer>.AddProperty("AddressMaxLength", e => e.UISpecifications.GetAddressMaxLength(e));
            DynamicType<Customer>.AddProperty("AddressMinLength", e => e.UISpecifications.GetAddressMinLength(e));
            DynamicType<Customer>.AddProperty("AddressPattern", e => e.UISpecifications.GetAddressPattern(e));
            DynamicType<Customer>.AddProperty("CityIsMandatory", e => e.UISpecifications.GetCityIsMandatory(e));
            DynamicType<Customer>.AddProperty("CityMaxLength", e => e.UISpecifications.GetCityMaxLength(e));
            DynamicType<Customer>.AddProperty("CityMinLength", e => e.UISpecifications.GetCityMinLength(e));
            DynamicType<Customer>.AddProperty("CityPattern", e => e.UISpecifications.GetCityPattern(e));
            DynamicType<Customer>.AddProperty("RegionIsMandatory", e => e.UISpecifications.GetRegionIsMandatory(e));
            DynamicType<Customer>.AddProperty("RegionMaxLength", e => e.UISpecifications.GetRegionMaxLength(e));
            DynamicType<Customer>.AddProperty("RegionMinLength", e => e.UISpecifications.GetRegionMinLength(e));
            DynamicType<Customer>.AddProperty("RegionPattern", e => e.UISpecifications.GetRegionPattern(e));
            DynamicType<Customer>.AddProperty("PostalCodeIsMandatory", e => e.UISpecifications.GetPostalCodeIsMandatory(e));
            DynamicType<Customer>.AddProperty("PostalCodeMaxLength", e => e.UISpecifications.GetPostalCodeMaxLength(e));
            DynamicType<Customer>.AddProperty("PostalCodeMinLength", e => e.UISpecifications.GetPostalCodeMinLength(e));
            DynamicType<Customer>.AddProperty("PostalCodePattern", e => e.UISpecifications.GetPostalCodePattern(e));
            DynamicType<Customer>.AddProperty("CountryIsMandatory", e => e.UISpecifications.GetCountryIsMandatory(e));
            DynamicType<Customer>.AddProperty("CountryMaxLength", e => e.UISpecifications.GetCountryMaxLength(e));
            DynamicType<Customer>.AddProperty("CountryMinLength", e => e.UISpecifications.GetCountryMinLength(e));
            DynamicType<Customer>.AddProperty("CountryPattern", e => e.UISpecifications.GetCountryPattern(e));
            DynamicType<Customer>.AddProperty("PhoneIsMandatory", e => e.UISpecifications.GetPhoneIsMandatory(e));
            DynamicType<Customer>.AddProperty("PhoneMaxLength", e => e.UISpecifications.GetPhoneMaxLength(e));
            DynamicType<Customer>.AddProperty("PhoneMinLength", e => e.UISpecifications.GetPhoneMinLength(e));
            DynamicType<Customer>.AddProperty("PhonePattern", e => e.UISpecifications.GetPhonePattern(e));
            DynamicType<Customer>.AddProperty("FaxIsMandatory", e => e.UISpecifications.GetFaxIsMandatory(e));
            DynamicType<Customer>.AddProperty("FaxMaxLength", e => e.UISpecifications.GetFaxMaxLength(e));
            DynamicType<Customer>.AddProperty("FaxMinLength", e => e.UISpecifications.GetFaxMinLength(e));
            DynamicType<Customer>.AddProperty("FaxPattern", e => e.UISpecifications.GetFaxPattern(e));
            DynamicType<Customer>.AddProperty("IsVIPIsMandatory", e => e.UISpecifications.GetIsVIPIsMandatory(e));
            DynamicType<Customer>.AddProperty("AllErrors", e => e.Errors.AllErrors);
            DynamicType<Customer>.AddProperty("IdErrors", e => e.Errors.Id);
            DynamicType<Customer>.AddProperty("CompanyNameErrors", e => e.Errors.CompanyName);
            DynamicType<Customer>.AddProperty("ContactNameErrors", e => e.Errors.ContactName);
            DynamicType<Customer>.AddProperty("ContactTitleErrors", e => e.Errors.ContactTitle);
            DynamicType<Customer>.AddProperty("AddressErrors", e => e.Errors.Address);
            DynamicType<Customer>.AddProperty("CityErrors", e => e.Errors.City);
            DynamicType<Customer>.AddProperty("RegionErrors", e => e.Errors.Region);
            DynamicType<Customer>.AddProperty("PostalCodeErrors", e => e.Errors.PostalCode);
            DynamicType<Customer>.AddProperty("CountryErrors", e => e.Errors.Country);
            DynamicType<Customer>.AddProperty("PhoneErrors", e => e.Errors.Phone);
            DynamicType<Customer>.AddProperty("FaxErrors", e => e.Errors.Fax);
            DynamicType<Customer>.AddProperty("IsVIPErrors", e => e.Errors.IsVIP);
            DynamicType<Customer>.AddProperty("TotalSpentErrors", e => e.Errors.TotalSpent);
            DynamicType<Customer>.AddProperty("FullNameErrors", e => e.Errors.FullName);
            StaticInitializer();
        }

        static partial void StaticInitializer();
        private UISpecificationsInfo _uiSpecifications;
        private UISpecificationsInfo UISpecifications
        {
            get
            {
                return _uiSpecifications ?? (_uiSpecifications = CreateCustomerUISpecifications());
            }
        }

        protected virtual UISpecificationsInfo CreateCustomerUISpecifications()
        {
            return new UISpecificationsInfo();
        }

        public partial class UISpecificationsInfo
        {
            public virtual bool GetIdIsMandatory(Customer entity)
            {
                return true;
            }

            public virtual int ? GetIdMaxLength(Customer entity)
            {
                return 5;
            }

            public virtual int ? GetIdMinLength(Customer entity)
            {
                return null;
            }

            public virtual string GetIdPattern(Customer entity)
            {
                return null;
            }

            public virtual bool GetCompanyNameIsMandatory(Customer entity)
            {
                return true;
            }

            public virtual int ? GetCompanyNameMaxLength(Customer entity)
            {
                return 40;
            }

            public virtual int ? GetCompanyNameMinLength(Customer entity)
            {
                return null;
            }

            public virtual string GetCompanyNamePattern(Customer entity)
            {
                return null;
            }

            public virtual bool GetContactNameIsMandatory(Customer entity)
            {
                return false;
            }

            public virtual int ? GetContactNameMaxLength(Customer entity)
            {
                return 30;
            }

            public virtual int ? GetContactNameMinLength(Customer entity)
            {
                return null;
            }

            public virtual string GetContactNamePattern(Customer entity)
            {
                return null;
            }

            public virtual bool GetContactTitleIsMandatory(Customer entity)
            {
                return false;
            }

            public virtual int ? GetContactTitleMaxLength(Customer entity)
            {
                return 30;
            }

            public virtual int ? GetContactTitleMinLength(Customer entity)
            {
                return null;
            }

            public virtual string GetContactTitlePattern(Customer entity)
            {
                return null;
            }

            public virtual bool GetAddressIsMandatory(Customer entity)
            {
                return false;
            }

            public virtual int ? GetAddressMaxLength(Customer entity)
            {
                return 60;
            }

            public virtual int ? GetAddressMinLength(Customer entity)
            {
                return null;
            }

            public virtual string GetAddressPattern(Customer entity)
            {
                return null;
            }

            public virtual bool GetCityIsMandatory(Customer entity)
            {
                return false;
            }

            public virtual int ? GetCityMaxLength(Customer entity)
            {
                return 15;
            }

            public virtual int ? GetCityMinLength(Customer entity)
            {
                return null;
            }

            public virtual string GetCityPattern(Customer entity)
            {
                return null;
            }

            public virtual bool GetRegionIsMandatory(Customer entity)
            {
                return !(entity.Country != "USA");
            }

            public virtual int ? GetRegionMaxLength(Customer entity)
            {
                return 15;
            }

            public virtual int ? GetRegionMinLength(Customer entity)
            {
                return null;
            }

            public virtual string GetRegionPattern(Customer entity)
            {
                return null;
            }

            public virtual bool GetPostalCodeIsMandatory(Customer entity)
            {
                return false;
            }

            public virtual int ? GetPostalCodeMaxLength(Customer entity)
            {
                return 10;
            }

            public virtual int ? GetPostalCodeMinLength(Customer entity)
            {
                return null;
            }

            public virtual string GetPostalCodePattern(Customer entity)
            {
                return entity.Country == "USA" ? "^[0-9]{5}(?:-[0-9]{4})?$" : entity.Country == "France" ? @"^(?:\d{2}|(?:2(?:A|B)))\d{3}$" : null;
            }

            public virtual bool GetCountryIsMandatory(Customer entity)
            {
                return false;
            }

            public virtual int ? GetCountryMaxLength(Customer entity)
            {
                return 15;
            }

            public virtual int ? GetCountryMinLength(Customer entity)
            {
                return null;
            }

            public virtual string GetCountryPattern(Customer entity)
            {
                return null;
            }

            public virtual bool GetPhoneIsMandatory(Customer entity)
            {
                return false;
            }

            public virtual int ? GetPhoneMaxLength(Customer entity)
            {
                return 24;
            }

            public virtual int ? GetPhoneMinLength(Customer entity)
            {
                return null;
            }

            public virtual string GetPhonePattern(Customer entity)
            {
                return null;
            }

            public virtual bool GetFaxIsMandatory(Customer entity)
            {
                return false;
            }

            public virtual int ? GetFaxMaxLength(Customer entity)
            {
                return 24;
            }

            public virtual int ? GetFaxMinLength(Customer entity)
            {
                return null;
            }

            public virtual string GetFaxPattern(Customer entity)
            {
                return null;
            }

            public virtual bool GetIsVIPIsMandatory(Customer entity)
            {
                return true;
            }
        }

        private ErrorsSpecifications _errors;
        protected ErrorsSpecifications Errors
        {
            get
            {
                return _errors ?? (_errors = new ErrorsSpecifications());
            }
        }

        bool IEntityWithErrors.HasErrors
        {
            get
            {
                return Errors.AllErrors.Count != 0;
            }
        }

        event Action IEntityWithErrors.HasErrorsChanged
        {
            add
            {
                Errors.HasErrorChanged += value;
            }

            remove
            {
                Errors.HasErrorChanged += value;
            }
        }

        public partial class ErrorsSpecifications
        {
            private ObservableCollection<Error> _id;
            public ObservableCollection<Error> Id
            {
                get
                {
                    return _id ?? (_id = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _companyName;
            public ObservableCollection<Error> CompanyName
            {
                get
                {
                    return _companyName ?? (_companyName = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _contactName;
            public ObservableCollection<Error> ContactName
            {
                get
                {
                    return _contactName ?? (_contactName = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _contactTitle;
            public ObservableCollection<Error> ContactTitle
            {
                get
                {
                    return _contactTitle ?? (_contactTitle = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _address;
            public ObservableCollection<Error> Address
            {
                get
                {
                    return _address ?? (_address = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _city;
            public ObservableCollection<Error> City
            {
                get
                {
                    return _city ?? (_city = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _region;
            public ObservableCollection<Error> Region
            {
                get
                {
                    return _region ?? (_region = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _postalCode;
            public ObservableCollection<Error> PostalCode
            {
                get
                {
                    return _postalCode ?? (_postalCode = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _country;
            public ObservableCollection<Error> Country
            {
                get
                {
                    return _country ?? (_country = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _phone;
            public ObservableCollection<Error> Phone
            {
                get
                {
                    return _phone ?? (_phone = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _fax;
            public ObservableCollection<Error> Fax
            {
                get
                {
                    return _fax ?? (_fax = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _isVIP;
            public ObservableCollection<Error> IsVIP
            {
                get
                {
                    return _isVIP ?? (_isVIP = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _totalSpent;
            public ObservableCollection<Error> TotalSpent
            {
                get
                {
                    return _totalSpent ?? (_totalSpent = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _fullName;
            public ObservableCollection<Error> FullName
            {
                get
                {
                    return _fullName ?? (_fullName = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _allErrors;
            public ObservableCollection<Error> AllErrors
            {
                get
                {
                    if (_allErrors == null)
                    {
                        _allErrors = new ObservableCollection<Error>();
                        NotifyCollectionChangedEventHandler errorsCollectionChanged = (_, e) =>
                        {
                            if (e.NewItems != null)
                                foreach (Error error in e.NewItems)
                                {
                                    if (!_allErrors.Any(er => er.Key == error.Key))
                                        _allErrors.Add(error);
                                }

                            if (e.OldItems != null)
                                foreach (Error error in e.OldItems)
                                    _allErrors.Remove(error);
                        }

                        ;
                        AddAllErrorsHandlers(errorsCollectionChanged);
                    }

                    return _allErrors;
                }
            }

            protected virtual void AddAllErrorsHandlers(NotifyCollectionChangedEventHandler errorsCollectionChanged)
            {
                NotifyCollectionChangedEventHandler specificErrorsCollectionChanged = (sender, e) =>
                {
                    errorsCollectionChanged(sender, e);
                    switch (e.Action)
                    {
                        case NotifyCollectionChangedAction.Add:
                            if (AllErrors.Count == e.NewItems.Count)
                                OnHasErrorChanged();
                            break;
                        case NotifyCollectionChangedAction.Remove:
                            if (AllErrors.Count == 0)
                                OnHasErrorChanged();
                            break;
                    }
                }

                ;
                Id.CollectionChanged += specificErrorsCollectionChanged;
                CompanyName.CollectionChanged += specificErrorsCollectionChanged;
                ContactName.CollectionChanged += specificErrorsCollectionChanged;
                ContactTitle.CollectionChanged += specificErrorsCollectionChanged;
                Address.CollectionChanged += specificErrorsCollectionChanged;
                City.CollectionChanged += specificErrorsCollectionChanged;
                Region.CollectionChanged += specificErrorsCollectionChanged;
                PostalCode.CollectionChanged += specificErrorsCollectionChanged;
                Country.CollectionChanged += specificErrorsCollectionChanged;
                Phone.CollectionChanged += specificErrorsCollectionChanged;
                Fax.CollectionChanged += specificErrorsCollectionChanged;
                IsVIP.CollectionChanged += specificErrorsCollectionChanged;
                TotalSpent.CollectionChanged += specificErrorsCollectionChanged;
                FullName.CollectionChanged += specificErrorsCollectionChanged;
            }

            protected void OnHasErrorChanged()
            {
                if (HasErrorChanged != null)
                    OnHasErrorChanged();
            }

            public event Action HasErrorChanged;
        }
#endregion
    }
}
            