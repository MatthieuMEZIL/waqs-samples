//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using WAQS.ClientContext;
using WAQS.ClientContext.Interfaces;
using WAQSWorkshopClient;
using WAQSWorkshopClient.ClientContext.Interfaces;

namespace WAQSWorkshopClient.ClientContext
{
    public static partial class NorthwindAsyncQueryableExtension
    {
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Category> IncludeProducts(this IAsyncQueryable<WAQSWorkshopClient.Category> source)
        {
            return IncludeProductsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Product>, IEnumerable<WAQSWorkshopClient.Product>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Category> IncludeProductsWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Category> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Product>, IEnumerable<WAQSWorkshopClient.Product>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, ((INorthwindClientContext)source.Context).Products.AsAsyncQueryable(), e => e.Products, (e1, e2) => e1.Id == e2.CategoryId, queryTransform, (e1, e2) => e1.Id == e2.CategoryId, e => e.Products);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Category> IncludeProducts(this IAsyncQueryableValue<WAQSWorkshopClient.Category> source)
        {
            return IncludeProductsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Product>, IEnumerable<WAQSWorkshopClient.Product>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Category> IncludeProductsWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Category> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Product>, IEnumerable<WAQSWorkshopClient.Product>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.Products, queryTransform, e => e.Products);
        }
    
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Category> IncludeProductsWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Category> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Product>, WAQSWorkshopClient.Product>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, e => e.Products, queryTransform, (e1, e2) => e1.Id == e2.CategoryId, e => e.Products);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Category> IncludeProductsWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Category> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Product>, WAQSWorkshopClient.Product>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.Products, queryTransform, e => e.Products);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Category>> IncludeProducts(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Category>> source)
        {
            return IncludeProductsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Product>, IEnumerable<WAQSWorkshopClient.Product>>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Category>> IncludeProductsWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Category>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Product>, IEnumerable<WAQSWorkshopClient.Product>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToMany<WAQSWorkshopClient.Category, WAQSWorkshopClient.Product>(source, e => e.Products, queryTransform, (e1, e2) => e1.Id == e2.CategoryId, e => e.Products);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Category>> IncludeProductsWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Category>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Product>, WAQSWorkshopClient.Product>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopClient.Category, WAQSWorkshopClient.Product>(source, e => e.Products, queryTransform, (e1, e2) => e1.Id == e2.CategoryId, e => e.Products);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Category> IncludeProducts(this IEnumerable<WAQSWorkshopClient.Category> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Category> IncludeProductsWithExpression(this IEnumerable<WAQSWorkshopClient.Category> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Product>, IEnumerable<WAQSWorkshopClient.Product>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Category IncludeProducts(this WAQSWorkshopClient.Category source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Category IncludeProductsWithExpression(this WAQSWorkshopClient.Category source, Expression<Func<IEnumerable<WAQSWorkshopClient.Product>, IEnumerable<WAQSWorkshopClient.Product>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Category> IncludeProductsWithExpression(this IEnumerable<WAQSWorkshopClient.Category> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Product>, WAQSWorkshopClient.Product>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Category IncludeProductsWithExpression(this WAQSWorkshopClient.Category source, Expression<Func<IEnumerable<WAQSWorkshopClient.Product>, WAQSWorkshopClient.Product>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        public static IAsyncQueryable<WAQSWorkshopClient.Customer> WithTotalSpent(this IAsyncQueryable<WAQSWorkshopClient.Customer> source)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryable<WAQSWorkshopClient.Customer>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"TotalSpent"}), source.SelectedProperties);
        }	
    
        public static IAsyncQueryableValue<WAQSWorkshopClient.Customer> WithTotalSpent(this IAsyncQueryableValue<WAQSWorkshopClient.Customer> source)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryableValue<WAQSWorkshopClient.Customer>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"TotalSpent"}), source.SelectedProperties);
        }	
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Customer> WithTotalSpent(this IEnumerable<WAQSWorkshopClient.Customer> source)
        {
            throw new NotImplementedException();
        }	
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Customer WithTotalSpent(this WAQSWorkshopClient.Customer source)
        {
            throw new NotImplementedException();
        }	
    
        public static async Task<double> LoadTotalSpentAsync(this WAQSWorkshopClient.Customer entity, MergeOption? mergeOption = null)
        {
            var entitySet = (IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Customer>)ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await entitySet.AsAsyncQueryable().Where(e => e.Id == entity.Id).Select(e => e.TotalSpent).First().ExecuteAsync(mergeOption);
            if (entity.Specifications == null)
                entity.Specifications = new WAQSWorkshopClient.Customer.CustomerSpecifications();
            entity.Specifications.HasTotalSpent = true;
            entity.Specifications.TotalSpent = value;
            return value;
        }	
    
        public static IAsyncQueryable<WAQSWorkshopClient.Customer> WithFullName(this IAsyncQueryable<WAQSWorkshopClient.Customer> source)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryable<WAQSWorkshopClient.Customer>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"FullName"}), source.SelectedProperties);
        }	
    
        public static IAsyncQueryableValue<WAQSWorkshopClient.Customer> WithFullName(this IAsyncQueryableValue<WAQSWorkshopClient.Customer> source)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryableValue<WAQSWorkshopClient.Customer>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"FullName"}), source.SelectedProperties);
        }	
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Customer> WithFullName(this IEnumerable<WAQSWorkshopClient.Customer> source)
        {
            throw new NotImplementedException();
        }	
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Customer WithFullName(this WAQSWorkshopClient.Customer source)
        {
            throw new NotImplementedException();
        }	
    
        public static async Task<string> LoadFullNameAsync(this WAQSWorkshopClient.Customer entity, MergeOption? mergeOption = null)
        {
            var entitySet = (IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Customer>)ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await entitySet.AsAsyncQueryable().Where(e => e.Id == entity.Id).Select(e => e.FullName).First().ExecuteAsync(mergeOption);
            if (entity.Specifications == null)
                entity.Specifications = new WAQSWorkshopClient.Customer.CustomerSpecifications();
            entity.Specifications.HasFullName = true;
            entity.Specifications.FullName = value;
            return value;
        }	
    
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Customer> IncludeInvoices(this IAsyncQueryable<WAQSWorkshopClient.Customer> source)
        {
            return IncludeInvoicesWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Invoice>, IEnumerable<WAQSWorkshopClient.Invoice>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Customer> IncludeInvoicesWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Invoice>, IEnumerable<WAQSWorkshopClient.Invoice>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, ((INorthwindClientContext)source.Context).Invoices.AsAsyncQueryable(), e => e.Invoices, (e1, e2) => e1.Id == e2.CustomerId, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Invoices);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Customer> IncludeInvoices(this IAsyncQueryableValue<WAQSWorkshopClient.Customer> source)
        {
            return IncludeInvoicesWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Invoice>, IEnumerable<WAQSWorkshopClient.Invoice>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Customer> IncludeInvoicesWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Invoice>, IEnumerable<WAQSWorkshopClient.Invoice>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.Invoices, queryTransform, e => e.Invoices);
        }
    
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Customer> IncludeInvoicesWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Invoice>, WAQSWorkshopClient.Invoice>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, e => e.Invoices, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Invoices);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Customer> IncludeInvoicesWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Invoice>, WAQSWorkshopClient.Invoice>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.Invoices, queryTransform, e => e.Invoices);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Customer>> IncludeInvoices(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Customer>> source)
        {
            return IncludeInvoicesWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Invoice>, IEnumerable<WAQSWorkshopClient.Invoice>>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Customer>> IncludeInvoicesWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Customer>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Invoice>, IEnumerable<WAQSWorkshopClient.Invoice>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToMany<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Invoice>(source, e => e.Invoices, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Invoices);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Customer>> IncludeInvoicesWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Customer>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Invoice>, WAQSWorkshopClient.Invoice>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Invoice>(source, e => e.Invoices, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Invoices);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Customer> IncludeInvoices(this IEnumerable<WAQSWorkshopClient.Customer> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Customer> IncludeInvoicesWithExpression(this IEnumerable<WAQSWorkshopClient.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Invoice>, IEnumerable<WAQSWorkshopClient.Invoice>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Customer IncludeInvoices(this WAQSWorkshopClient.Customer source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Customer IncludeInvoicesWithExpression(this WAQSWorkshopClient.Customer source, Expression<Func<IEnumerable<WAQSWorkshopClient.Invoice>, IEnumerable<WAQSWorkshopClient.Invoice>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Customer> IncludeInvoicesWithExpression(this IEnumerable<WAQSWorkshopClient.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Invoice>, WAQSWorkshopClient.Invoice>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Customer IncludeInvoicesWithExpression(this WAQSWorkshopClient.Customer source, Expression<Func<IEnumerable<WAQSWorkshopClient.Invoice>, WAQSWorkshopClient.Invoice>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Customer> IncludeOrders(this IAsyncQueryable<WAQSWorkshopClient.Customer> source)
        {
            return IncludeOrdersWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Customer> IncludeOrdersWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, ((INorthwindClientContext)source.Context).Orders.AsAsyncQueryable(), e => e.Orders, (e1, e2) => e1.Id == e2.CustomerId, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Customer> IncludeOrders(this IAsyncQueryableValue<WAQSWorkshopClient.Customer> source)
        {
            return IncludeOrdersWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Customer> IncludeOrdersWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.Orders, queryTransform, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Customer> IncludeOrdersWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, WAQSWorkshopClient.Order>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, e => e.Orders, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Customer> IncludeOrdersWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, WAQSWorkshopClient.Order>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.Orders, queryTransform, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Customer>> IncludeOrders(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Customer>> source)
        {
            return IncludeOrdersWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Customer>> IncludeOrdersWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Customer>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToMany<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Order>(source, e => e.Orders, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Customer>> IncludeOrdersWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Customer>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, WAQSWorkshopClient.Order>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Order>(source, e => e.Orders, queryTransform, (e1, e2) => e1.Id == e2.CustomerId, e => e.Orders);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Customer> IncludeOrders(this IEnumerable<WAQSWorkshopClient.Customer> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Customer> IncludeOrdersWithExpression(this IEnumerable<WAQSWorkshopClient.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Customer IncludeOrders(this WAQSWorkshopClient.Customer source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Customer IncludeOrdersWithExpression(this WAQSWorkshopClient.Customer source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Customer> IncludeOrdersWithExpression(this IEnumerable<WAQSWorkshopClient.Customer> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, WAQSWorkshopClient.Order>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Customer IncludeOrdersWithExpression(this WAQSWorkshopClient.Customer source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, WAQSWorkshopClient.Order>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        public static IAsyncQueryable<WAQSWorkshopClient.Employee> WithFullName(this IAsyncQueryable<WAQSWorkshopClient.Employee> source)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryable<WAQSWorkshopClient.Employee>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"FullName"}), source.SelectedProperties);
        }	
    
        public static IAsyncQueryableValue<WAQSWorkshopClient.Employee> WithFullName(this IAsyncQueryableValue<WAQSWorkshopClient.Employee> source)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryableValue<WAQSWorkshopClient.Employee>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"FullName"}), source.SelectedProperties);
        }	
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Employee> WithFullName(this IEnumerable<WAQSWorkshopClient.Employee> source)
        {
            throw new NotImplementedException();
        }	
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Employee WithFullName(this WAQSWorkshopClient.Employee source)
        {
            throw new NotImplementedException();
        }	
    
        public static async Task<string> LoadFullNameAsync(this WAQSWorkshopClient.Employee entity, MergeOption? mergeOption = null)
        {
            var entitySet = (IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Employee>)ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await entitySet.AsAsyncQueryable().Where(e => e.Id == entity.Id).Select(e => e.FullName).First().ExecuteAsync(mergeOption);
            if (entity.Specifications == null)
                entity.Specifications = new WAQSWorkshopClient.Employee.EmployeeSpecifications();
            entity.Specifications.HasFullName = true;
            entity.Specifications.FullName = value;
            return value;
        }	
    
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Employee> IncludeEmployees1(this IAsyncQueryable<WAQSWorkshopClient.Employee> source)
        {
            return IncludeEmployees1WithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Employee>, IEnumerable<WAQSWorkshopClient.Employee>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Employee> IncludeEmployees1WithExpression(this IAsyncQueryable<WAQSWorkshopClient.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Employee>, IEnumerable<WAQSWorkshopClient.Employee>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, ((INorthwindClientContext)source.Context).Employees.AsAsyncQueryable(), e => e.Employees1, (e1, e2) => e1.Id == e2.ReportsTo, queryTransform, (e1, e2) => e1.Id == e2.ReportsTo, e => e.Employees1);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Employee> IncludeEmployees1(this IAsyncQueryableValue<WAQSWorkshopClient.Employee> source)
        {
            return IncludeEmployees1WithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Employee>, IEnumerable<WAQSWorkshopClient.Employee>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Employee> IncludeEmployees1WithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Employee>, IEnumerable<WAQSWorkshopClient.Employee>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.Employees1, queryTransform, e => e.Employees1);
        }
    
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Employee> IncludeEmployees1WithExpression(this IAsyncQueryable<WAQSWorkshopClient.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Employee>, WAQSWorkshopClient.Employee>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, e => e.Employees1, queryTransform, (e1, e2) => e1.Id == e2.ReportsTo, e => e.Employees1);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Employee> IncludeEmployees1WithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Employee>, WAQSWorkshopClient.Employee>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.Employees1, queryTransform, e => e.Employees1);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> IncludeEmployees1(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> source)
        {
            return IncludeEmployees1WithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Employee>, IEnumerable<WAQSWorkshopClient.Employee>>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> IncludeEmployees1WithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Employee>, IEnumerable<WAQSWorkshopClient.Employee>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToMany<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>(source, e => e.Employees1, queryTransform, (e1, e2) => e1.Id == e2.ReportsTo, e => e.Employees1);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> IncludeEmployees1WithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Employee>, WAQSWorkshopClient.Employee>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>(source, e => e.Employees1, queryTransform, (e1, e2) => e1.Id == e2.ReportsTo, e => e.Employees1);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Employee> IncludeEmployees1(this IEnumerable<WAQSWorkshopClient.Employee> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Employee> IncludeEmployees1WithExpression(this IEnumerable<WAQSWorkshopClient.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Employee>, IEnumerable<WAQSWorkshopClient.Employee>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Employee IncludeEmployees1(this WAQSWorkshopClient.Employee source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Employee IncludeEmployees1WithExpression(this WAQSWorkshopClient.Employee source, Expression<Func<IEnumerable<WAQSWorkshopClient.Employee>, IEnumerable<WAQSWorkshopClient.Employee>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Employee> IncludeEmployees1WithExpression(this IEnumerable<WAQSWorkshopClient.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Employee>, WAQSWorkshopClient.Employee>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Employee IncludeEmployees1WithExpression(this WAQSWorkshopClient.Employee source, Expression<Func<IEnumerable<WAQSWorkshopClient.Employee>, WAQSWorkshopClient.Employee>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Employee> IncludeEmployee1(this IAsyncQueryable<WAQSWorkshopClient.Employee> source)
        {
            return IncludeEmployee1WithExpression(source, (Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Employee> IncludeEmployee1WithExpression(this IAsyncQueryable<WAQSWorkshopClient.Employee> source, Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyToOne(source, ((INorthwindClientContext)source.Context).Employees.AsAsyncQueryable(), e => e.Employee1, (e1, e2) => e1.ReportsTo == e2.Id, addIncludes, (e1, e2) => e1.ReportsTo == e2.Id, (e, value) => e.Employee1 = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Employee> IncludeEmployee1(this IAsyncQueryableValue<WAQSWorkshopClient.Employee> source)
        {
            return IncludeEmployee1WithExpression(source, (Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Employee> IncludeEmployee1WithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Employee> source, Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneManyToOne(source, e => e.Employee1, addIncludes, (e, value) => e.Employee1 = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> IncludeEmployee1(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> source)
        {
            return IncludeEmployee1WithExpression(source, (Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> IncludeEmployee1WithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> source, Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOne<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>(source, e => e.Employee1, addIncludes, (e1, e2) => e1.ReportsTo == e2.Id, (e, value) => e.Employee1 = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Employee> IncludeEmployee1(this IEnumerable<WAQSWorkshopClient.Employee> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Employee> IncludeEmployee1WithExpression(this IEnumerable<WAQSWorkshopClient.Employee> source, Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Employee IncludeEmployee1(this WAQSWorkshopClient.Employee source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Employee IncludeEmployee1WithExpression(this WAQSWorkshopClient.Employee source, Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Employee> IncludeOrders(this IAsyncQueryable<WAQSWorkshopClient.Employee> source)
        {
            return IncludeOrdersWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Employee> IncludeOrdersWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, ((INorthwindClientContext)source.Context).Orders.AsAsyncQueryable(), e => e.Orders, (e1, e2) => e1.Id == e2.EmployeeId, queryTransform, (e1, e2) => e1.Id == e2.EmployeeId, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Employee> IncludeOrders(this IAsyncQueryableValue<WAQSWorkshopClient.Employee> source)
        {
            return IncludeOrdersWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Employee> IncludeOrdersWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.Orders, queryTransform, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Employee> IncludeOrdersWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, WAQSWorkshopClient.Order>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, e => e.Orders, queryTransform, (e1, e2) => e1.Id == e2.EmployeeId, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Employee> IncludeOrdersWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, WAQSWorkshopClient.Order>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.Orders, queryTransform, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> IncludeOrders(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> source)
        {
            return IncludeOrdersWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> IncludeOrdersWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToMany<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Order>(source, e => e.Orders, queryTransform, (e1, e2) => e1.Id == e2.EmployeeId, e => e.Orders);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> IncludeOrdersWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Employee>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, WAQSWorkshopClient.Order>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Order>(source, e => e.Orders, queryTransform, (e1, e2) => e1.Id == e2.EmployeeId, e => e.Orders);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Employee> IncludeOrders(this IEnumerable<WAQSWorkshopClient.Employee> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Employee> IncludeOrdersWithExpression(this IEnumerable<WAQSWorkshopClient.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Employee IncludeOrders(this WAQSWorkshopClient.Employee source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Employee IncludeOrdersWithExpression(this WAQSWorkshopClient.Employee source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, IEnumerable<WAQSWorkshopClient.Order>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Employee> IncludeOrdersWithExpression(this IEnumerable<WAQSWorkshopClient.Employee> source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, WAQSWorkshopClient.Order>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Employee IncludeOrdersWithExpression(this WAQSWorkshopClient.Employee source, Expression<Func<IEnumerable<WAQSWorkshopClient.Order>, WAQSWorkshopClient.Order>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Invoice> IncludeCustomer(this IAsyncQueryable<WAQSWorkshopClient.Invoice> source)
        {
            return IncludeCustomerWithExpression(source, (Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Invoice> IncludeCustomerWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Invoice> source, Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyToOne(source, ((INorthwindClientContext)source.Context).Customers.AsAsyncQueryable(), e => e.Customer, (e1, e2) => e1.CustomerId == e2.Id, addIncludes, (e1, e2) => e1.CustomerId == e2.Id, (e, value) => e.Customer = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Invoice> IncludeCustomer(this IAsyncQueryableValue<WAQSWorkshopClient.Invoice> source)
        {
            return IncludeCustomerWithExpression(source, (Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Invoice> IncludeCustomerWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Invoice> source, Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneManyToOne(source, e => e.Customer, addIncludes, (e, value) => e.Customer = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Invoice>> IncludeCustomer(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Invoice>> source)
        {
            return IncludeCustomerWithExpression(source, (Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Invoice>> IncludeCustomerWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Invoice>> source, Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOne<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Customer>(source, e => e.Customer, addIncludes, (e1, e2) => e1.CustomerId == e2.Id, (e, value) => e.Customer = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Invoice> IncludeCustomer(this IEnumerable<WAQSWorkshopClient.Invoice> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Invoice> IncludeCustomerWithExpression(this IEnumerable<WAQSWorkshopClient.Invoice> source, Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Invoice IncludeCustomer(this WAQSWorkshopClient.Invoice source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Invoice IncludeCustomerWithExpression(this WAQSWorkshopClient.Invoice source, Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Invoice> IncludeInvoiceDetails(this IAsyncQueryable<WAQSWorkshopClient.Invoice> source)
        {
            return IncludeInvoiceDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.InvoiceDetail>, IEnumerable<WAQSWorkshopClient.InvoiceDetail>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Invoice> IncludeInvoiceDetailsWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Invoice> source, Expression<Func<IEnumerable<WAQSWorkshopClient.InvoiceDetail>, IEnumerable<WAQSWorkshopClient.InvoiceDetail>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, ((INorthwindClientContext)source.Context).InvoiceDetails.AsAsyncQueryable(), e => e.InvoiceDetails, (e1, e2) => e1.OrderId == e2.InvoiceId, queryTransform, (e1, e2) => e1.OrderId == e2.InvoiceId, e => e.InvoiceDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Invoice> IncludeInvoiceDetails(this IAsyncQueryableValue<WAQSWorkshopClient.Invoice> source)
        {
            return IncludeInvoiceDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.InvoiceDetail>, IEnumerable<WAQSWorkshopClient.InvoiceDetail>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Invoice> IncludeInvoiceDetailsWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Invoice> source, Expression<Func<IEnumerable<WAQSWorkshopClient.InvoiceDetail>, IEnumerable<WAQSWorkshopClient.InvoiceDetail>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.InvoiceDetails, queryTransform, e => e.InvoiceDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Invoice> IncludeInvoiceDetailsWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Invoice> source, Expression<Func<IEnumerable<WAQSWorkshopClient.InvoiceDetail>, WAQSWorkshopClient.InvoiceDetail>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, e => e.InvoiceDetails, queryTransform, (e1, e2) => e1.OrderId == e2.InvoiceId, e => e.InvoiceDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Invoice> IncludeInvoiceDetailsWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Invoice> source, Expression<Func<IEnumerable<WAQSWorkshopClient.InvoiceDetail>, WAQSWorkshopClient.InvoiceDetail>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.InvoiceDetails, queryTransform, e => e.InvoiceDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Invoice>> IncludeInvoiceDetails(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Invoice>> source)
        {
            return IncludeInvoiceDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.InvoiceDetail>, IEnumerable<WAQSWorkshopClient.InvoiceDetail>>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Invoice>> IncludeInvoiceDetailsWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Invoice>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.InvoiceDetail>, IEnumerable<WAQSWorkshopClient.InvoiceDetail>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToMany<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.InvoiceDetail>(source, e => e.InvoiceDetails, queryTransform, (e1, e2) => e1.OrderId == e2.InvoiceId, e => e.InvoiceDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Invoice>> IncludeInvoiceDetailsWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Invoice>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.InvoiceDetail>, WAQSWorkshopClient.InvoiceDetail>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.InvoiceDetail>(source, e => e.InvoiceDetails, queryTransform, (e1, e2) => e1.OrderId == e2.InvoiceId, e => e.InvoiceDetails);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Invoice> IncludeInvoiceDetails(this IEnumerable<WAQSWorkshopClient.Invoice> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Invoice> IncludeInvoiceDetailsWithExpression(this IEnumerable<WAQSWorkshopClient.Invoice> source, Expression<Func<IEnumerable<WAQSWorkshopClient.InvoiceDetail>, IEnumerable<WAQSWorkshopClient.InvoiceDetail>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Invoice IncludeInvoiceDetails(this WAQSWorkshopClient.Invoice source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Invoice IncludeInvoiceDetailsWithExpression(this WAQSWorkshopClient.Invoice source, Expression<Func<IEnumerable<WAQSWorkshopClient.InvoiceDetail>, IEnumerable<WAQSWorkshopClient.InvoiceDetail>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Invoice> IncludeInvoiceDetailsWithExpression(this IEnumerable<WAQSWorkshopClient.Invoice> source, Expression<Func<IEnumerable<WAQSWorkshopClient.InvoiceDetail>, WAQSWorkshopClient.InvoiceDetail>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Invoice IncludeInvoiceDetailsWithExpression(this WAQSWorkshopClient.Invoice source, Expression<Func<IEnumerable<WAQSWorkshopClient.InvoiceDetail>, WAQSWorkshopClient.InvoiceDetail>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Invoice> IncludeOrder(this IAsyncQueryable<WAQSWorkshopClient.Invoice> source)
        {
            return IncludeOrderWithExpression(source, (Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Invoice> IncludeOrderWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Invoice> source, Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyToOne(source, ((INorthwindClientContext)source.Context).Orders.AsAsyncQueryable(), e => e.Order, (e1, e2) => e1.OrderId == e2.Id, addIncludes, (e1, e2) => e1.OrderId == e2.Id, (e, value) => e.Order = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Invoice> IncludeOrder(this IAsyncQueryableValue<WAQSWorkshopClient.Invoice> source)
        {
            return IncludeOrderWithExpression(source, (Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Invoice> IncludeOrderWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Invoice> source, Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneManyToOne(source, e => e.Order, addIncludes, (e, value) => e.Order = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Invoice>> IncludeOrder(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Invoice>> source)
        {
            return IncludeOrderWithExpression(source, (Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Invoice>> IncludeOrderWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Invoice>> source, Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOne<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Order>(source, e => e.Order, addIncludes, (e1, e2) => e1.OrderId == e2.Id, (e, value) => e.Order = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Invoice> IncludeOrder(this IEnumerable<WAQSWorkshopClient.Invoice> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Invoice> IncludeOrderWithExpression(this IEnumerable<WAQSWorkshopClient.Invoice> source, Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Invoice IncludeOrder(this WAQSWorkshopClient.Invoice source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Invoice IncludeOrderWithExpression(this WAQSWorkshopClient.Invoice source, Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.InvoiceDetail> IncludeInvoice(this IAsyncQueryable<WAQSWorkshopClient.InvoiceDetail> source)
        {
            return IncludeInvoiceWithExpression(source, (Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.InvoiceDetail> IncludeInvoiceWithExpression(this IAsyncQueryable<WAQSWorkshopClient.InvoiceDetail> source, Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyToOne(source, ((INorthwindClientContext)source.Context).Invoices.AsAsyncQueryable(), e => e.Invoice, (e1, e2) => e1.InvoiceId == e2.OrderId, addIncludes, (e1, e2) => e1.InvoiceId == e2.OrderId, (e, value) => e.Invoice = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.InvoiceDetail> IncludeInvoice(this IAsyncQueryableValue<WAQSWorkshopClient.InvoiceDetail> source)
        {
            return IncludeInvoiceWithExpression(source, (Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.InvoiceDetail> IncludeInvoiceWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.InvoiceDetail> source, Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneManyToOne(source, e => e.Invoice, addIncludes, (e, value) => e.Invoice = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.InvoiceDetail>> IncludeInvoice(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.InvoiceDetail>> source)
        {
            return IncludeInvoiceWithExpression(source, (Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.InvoiceDetail>> IncludeInvoiceWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.InvoiceDetail>> source, Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOne<WAQSWorkshopClient.InvoiceDetail, WAQSWorkshopClient.Invoice>(source, e => e.Invoice, addIncludes, (e1, e2) => e1.InvoiceId == e2.OrderId, (e, value) => e.Invoice = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.InvoiceDetail> IncludeInvoice(this IEnumerable<WAQSWorkshopClient.InvoiceDetail> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.InvoiceDetail> IncludeInvoiceWithExpression(this IEnumerable<WAQSWorkshopClient.InvoiceDetail> source, Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.InvoiceDetail IncludeInvoice(this WAQSWorkshopClient.InvoiceDetail source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.InvoiceDetail IncludeInvoiceWithExpression(this WAQSWorkshopClient.InvoiceDetail source, Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.InvoiceDetail> IncludeOrderDetail(this IAsyncQueryable<WAQSWorkshopClient.InvoiceDetail> source)
        {
            return IncludeOrderDetailWithExpression(source, (Expression<Func<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.OrderDetail>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.InvoiceDetail> IncludeOrderDetailWithExpression(this IAsyncQueryable<WAQSWorkshopClient.InvoiceDetail> source, Expression<Func<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.OrderDetail>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyToOne(source, ((INorthwindClientContext)source.Context).OrderDetails.AsAsyncQueryable(), e => e.OrderDetail, (e1, e2) => e1.OrderDetailId == e2.Id, addIncludes, (e1, e2) => e1.OrderDetailId == e2.Id, (e, value) => e.OrderDetail = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.InvoiceDetail> IncludeOrderDetail(this IAsyncQueryableValue<WAQSWorkshopClient.InvoiceDetail> source)
        {
            return IncludeOrderDetailWithExpression(source, (Expression<Func<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.OrderDetail>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.InvoiceDetail> IncludeOrderDetailWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.InvoiceDetail> source, Expression<Func<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.OrderDetail>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneManyToOne(source, e => e.OrderDetail, addIncludes, (e, value) => e.OrderDetail = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.InvoiceDetail>> IncludeOrderDetail(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.InvoiceDetail>> source)
        {
            return IncludeOrderDetailWithExpression(source, (Expression<Func<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.OrderDetail>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.InvoiceDetail>> IncludeOrderDetailWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.InvoiceDetail>> source, Expression<Func<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.OrderDetail>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOne<WAQSWorkshopClient.InvoiceDetail, WAQSWorkshopClient.OrderDetail>(source, e => e.OrderDetail, addIncludes, (e1, e2) => e1.OrderDetailId == e2.Id, (e, value) => e.OrderDetail = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.InvoiceDetail> IncludeOrderDetail(this IEnumerable<WAQSWorkshopClient.InvoiceDetail> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.InvoiceDetail> IncludeOrderDetailWithExpression(this IEnumerable<WAQSWorkshopClient.InvoiceDetail> source, Expression<Func<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.OrderDetail>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.InvoiceDetail IncludeOrderDetail(this WAQSWorkshopClient.InvoiceDetail source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.InvoiceDetail IncludeOrderDetailWithExpression(this WAQSWorkshopClient.InvoiceDetail source, Expression<Func<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.OrderDetail>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        public static IAsyncQueryable<WAQSWorkshopClient.Order> WithTotal(this IAsyncQueryable<WAQSWorkshopClient.Order> source)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryable<WAQSWorkshopClient.Order>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"Total"}), source.SelectedProperties);
        }	
    
        public static IAsyncQueryableValue<WAQSWorkshopClient.Order> WithTotal(this IAsyncQueryableValue<WAQSWorkshopClient.Order> source)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryableValue<WAQSWorkshopClient.Order>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"Total"}), source.SelectedProperties);
        }	
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Order> WithTotal(this IEnumerable<WAQSWorkshopClient.Order> source)
        {
            throw new NotImplementedException();
        }	
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Order WithTotal(this WAQSWorkshopClient.Order source)
        {
            throw new NotImplementedException();
        }	
    
        public static async Task<double> LoadTotalAsync(this WAQSWorkshopClient.Order entity, MergeOption? mergeOption = null)
        {
            var entitySet = (IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Order>)ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await entitySet.AsAsyncQueryable().Where(e => e.Id == entity.Id).Select(e => e.Total).First().ExecuteAsync(mergeOption);
            if (entity.Specifications == null)
                entity.Specifications = new WAQSWorkshopClient.Order.OrderSpecifications();
            entity.Specifications.HasTotal = true;
            entity.Specifications.Total = value;
            return value;
        }	
    
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Order> IncludeCustomer(this IAsyncQueryable<WAQSWorkshopClient.Order> source)
        {
            return IncludeCustomerWithExpression(source, (Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Order> IncludeCustomerWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Order> source, Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyToOne(source, ((INorthwindClientContext)source.Context).Customers.AsAsyncQueryable(), e => e.Customer, (e1, e2) => e1.CustomerId == e2.Id, addIncludes, (e1, e2) => e1.CustomerId == e2.Id, (e, value) => e.Customer = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Order> IncludeCustomer(this IAsyncQueryableValue<WAQSWorkshopClient.Order> source)
        {
            return IncludeCustomerWithExpression(source, (Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Order> IncludeCustomerWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Order> source, Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneManyToOne(source, e => e.Customer, addIncludes, (e, value) => e.Customer = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> IncludeCustomer(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> source)
        {
            return IncludeCustomerWithExpression(source, (Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> IncludeCustomerWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> source, Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOne<WAQSWorkshopClient.Order, WAQSWorkshopClient.Customer>(source, e => e.Customer, addIncludes, (e1, e2) => e1.CustomerId == e2.Id, (e, value) => e.Customer = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Order> IncludeCustomer(this IEnumerable<WAQSWorkshopClient.Order> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Order> IncludeCustomerWithExpression(this IEnumerable<WAQSWorkshopClient.Order> source, Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Order IncludeCustomer(this WAQSWorkshopClient.Order source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Order IncludeCustomerWithExpression(this WAQSWorkshopClient.Order source, Expression<Func<WAQSWorkshopClient.Customer, WAQSWorkshopClient.Customer>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Order> IncludeEmployee(this IAsyncQueryable<WAQSWorkshopClient.Order> source)
        {
            return IncludeEmployeeWithExpression(source, (Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Order> IncludeEmployeeWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Order> source, Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyToOne(source, ((INorthwindClientContext)source.Context).Employees.AsAsyncQueryable(), e => e.Employee, (e1, e2) => e1.EmployeeId == e2.Id, addIncludes, (e1, e2) => e1.EmployeeId == e2.Id, (e, value) => e.Employee = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Order> IncludeEmployee(this IAsyncQueryableValue<WAQSWorkshopClient.Order> source)
        {
            return IncludeEmployeeWithExpression(source, (Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Order> IncludeEmployeeWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Order> source, Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneManyToOne(source, e => e.Employee, addIncludes, (e, value) => e.Employee = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> IncludeEmployee(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> source)
        {
            return IncludeEmployeeWithExpression(source, (Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> IncludeEmployeeWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> source, Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOne<WAQSWorkshopClient.Order, WAQSWorkshopClient.Employee>(source, e => e.Employee, addIncludes, (e1, e2) => e1.EmployeeId == e2.Id, (e, value) => e.Employee = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Order> IncludeEmployee(this IEnumerable<WAQSWorkshopClient.Order> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Order> IncludeEmployeeWithExpression(this IEnumerable<WAQSWorkshopClient.Order> source, Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Order IncludeEmployee(this WAQSWorkshopClient.Order source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Order IncludeEmployeeWithExpression(this WAQSWorkshopClient.Order source, Expression<Func<WAQSWorkshopClient.Employee, WAQSWorkshopClient.Employee>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Order> IncludeInvoice(this IAsyncQueryable<WAQSWorkshopClient.Order> source)
        {
            return IncludeInvoiceWithExpression(source, (Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Order> IncludeInvoiceWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Order> source, Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyToOne(source, ((INorthwindClientContext)source.Context).Invoices.AsAsyncQueryable(), e => e.Invoice, (e1, e2) => e1.Id == e2.OrderId, addIncludes, (e1, e2) => e1.Id == e2.OrderId, (e, value) => e.Invoice = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Order> IncludeInvoice(this IAsyncQueryableValue<WAQSWorkshopClient.Order> source)
        {
            return IncludeInvoiceWithExpression(source, (Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Order> IncludeInvoiceWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Order> source, Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneManyToOne(source, e => e.Invoice, addIncludes, (e, value) => e.Invoice = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> IncludeInvoice(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> source)
        {
            return IncludeInvoiceWithExpression(source, (Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> IncludeInvoiceWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> source, Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOne<WAQSWorkshopClient.Order, WAQSWorkshopClient.Invoice>(source, e => e.Invoice, addIncludes, (e1, e2) => e1.Id == e2.OrderId, (e, value) => e.Invoice = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Order> IncludeInvoice(this IEnumerable<WAQSWorkshopClient.Order> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Order> IncludeInvoiceWithExpression(this IEnumerable<WAQSWorkshopClient.Order> source, Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Order IncludeInvoice(this WAQSWorkshopClient.Order source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Order IncludeInvoiceWithExpression(this WAQSWorkshopClient.Order source, Expression<Func<WAQSWorkshopClient.Invoice, WAQSWorkshopClient.Invoice>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Order> IncludeOrderDetails(this IAsyncQueryable<WAQSWorkshopClient.Order> source)
        {
            return IncludeOrderDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Order> IncludeOrderDetailsWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Order> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, ((INorthwindClientContext)source.Context).OrderDetails.AsAsyncQueryable(), e => e.OrderDetails, (e1, e2) => e1.Id == e2.OrderId, queryTransform, (e1, e2) => e1.Id == e2.OrderId, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Order> IncludeOrderDetails(this IAsyncQueryableValue<WAQSWorkshopClient.Order> source)
        {
            return IncludeOrderDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Order> IncludeOrderDetailsWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Order> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.OrderDetails, queryTransform, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Order> IncludeOrderDetailsWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Order> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, WAQSWorkshopClient.OrderDetail>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, e => e.OrderDetails, queryTransform, (e1, e2) => e1.Id == e2.OrderId, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Order> IncludeOrderDetailsWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Order> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, WAQSWorkshopClient.OrderDetail>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.OrderDetails, queryTransform, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> IncludeOrderDetails(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> source)
        {
            return IncludeOrderDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> IncludeOrderDetailsWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToMany<WAQSWorkshopClient.Order, WAQSWorkshopClient.OrderDetail>(source, e => e.OrderDetails, queryTransform, (e1, e2) => e1.Id == e2.OrderId, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> IncludeOrderDetailsWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Order>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, WAQSWorkshopClient.OrderDetail>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopClient.Order, WAQSWorkshopClient.OrderDetail>(source, e => e.OrderDetails, queryTransform, (e1, e2) => e1.Id == e2.OrderId, e => e.OrderDetails);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Order> IncludeOrderDetails(this IEnumerable<WAQSWorkshopClient.Order> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Order> IncludeOrderDetailsWithExpression(this IEnumerable<WAQSWorkshopClient.Order> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Order IncludeOrderDetails(this WAQSWorkshopClient.Order source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Order IncludeOrderDetailsWithExpression(this WAQSWorkshopClient.Order source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Order> IncludeOrderDetailsWithExpression(this IEnumerable<WAQSWorkshopClient.Order> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, WAQSWorkshopClient.OrderDetail>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Order IncludeOrderDetailsWithExpression(this WAQSWorkshopClient.Order source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, WAQSWorkshopClient.OrderDetail>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        public static IAsyncQueryable<WAQSWorkshopClient.OrderDetail> WithAmount(this IAsyncQueryable<WAQSWorkshopClient.OrderDetail> source)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryable<WAQSWorkshopClient.OrderDetail>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"Amount"}), source.SelectedProperties);
        }	
    
        public static IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> WithAmount(this IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> source)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryableValue<WAQSWorkshopClient.OrderDetail>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"Amount"}), source.SelectedProperties);
        }	
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.OrderDetail> WithAmount(this IEnumerable<WAQSWorkshopClient.OrderDetail> source)
        {
            throw new NotImplementedException();
        }	
    
        [IncludeMethod]
        public static WAQSWorkshopClient.OrderDetail WithAmount(this WAQSWorkshopClient.OrderDetail source)
        {
            throw new NotImplementedException();
        }	
    
        public static async Task<double> LoadAmountAsync(this WAQSWorkshopClient.OrderDetail entity, MergeOption? mergeOption = null)
        {
            var entitySet = (IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.OrderDetail>)ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await entitySet.AsAsyncQueryable().Where(e => e.Id == entity.Id).Select(e => e.Amount).First().ExecuteAsync(mergeOption);
            if (entity.Specifications == null)
                entity.Specifications = new WAQSWorkshopClient.OrderDetail.OrderDetailSpecifications();
            entity.Specifications.HasAmount = true;
            entity.Specifications.Amount = value;
            return value;
        }	
    
        public static IAsyncQueryable<WAQSWorkshopClient.OrderDetail> WithProductFullName(this IAsyncQueryable<WAQSWorkshopClient.OrderDetail> source)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryable<WAQSWorkshopClient.OrderDetail>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"ProductFullName"}), source.SelectedProperties);
        }	
    
        public static IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> WithProductFullName(this IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> source)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryableValue<WAQSWorkshopClient.OrderDetail>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"ProductFullName"}), source.SelectedProperties);
        }	
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.OrderDetail> WithProductFullName(this IEnumerable<WAQSWorkshopClient.OrderDetail> source)
        {
            throw new NotImplementedException();
        }	
    
        [IncludeMethod]
        public static WAQSWorkshopClient.OrderDetail WithProductFullName(this WAQSWorkshopClient.OrderDetail source)
        {
            throw new NotImplementedException();
        }	
    
        public static async Task<string> LoadProductFullNameAsync(this WAQSWorkshopClient.OrderDetail entity, MergeOption? mergeOption = null)
        {
            var entitySet = (IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.OrderDetail>)ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await entitySet.AsAsyncQueryable().Where(e => e.Id == entity.Id).Select(e => e.ProductFullName).First().ExecuteAsync(mergeOption);
            if (entity.Specifications == null)
                entity.Specifications = new WAQSWorkshopClient.OrderDetail.OrderDetailSpecifications();
            entity.Specifications.HasProductFullName = true;
            entity.Specifications.ProductFullName = value;
            return value;
        }	
    
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.OrderDetail> IncludeInvoiceDetail(this IAsyncQueryable<WAQSWorkshopClient.OrderDetail> source)
        {
            return IncludeInvoiceDetailWithExpression(source, (Expression<Func<WAQSWorkshopClient.InvoiceDetail, WAQSWorkshopClient.InvoiceDetail>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.OrderDetail> IncludeInvoiceDetailWithExpression(this IAsyncQueryable<WAQSWorkshopClient.OrderDetail> source, Expression<Func<WAQSWorkshopClient.InvoiceDetail, WAQSWorkshopClient.InvoiceDetail>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyToOne(source, ((INorthwindClientContext)source.Context).InvoiceDetails.AsAsyncQueryable(), e => e.InvoiceDetail, (e1, e2) => e1.Id == e2.OrderDetailId, addIncludes, (e1, e2) => e1.Id == e2.OrderDetailId, (e, value) => e.InvoiceDetail = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> IncludeInvoiceDetail(this IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> source)
        {
            return IncludeInvoiceDetailWithExpression(source, (Expression<Func<WAQSWorkshopClient.InvoiceDetail, WAQSWorkshopClient.InvoiceDetail>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> IncludeInvoiceDetailWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> source, Expression<Func<WAQSWorkshopClient.InvoiceDetail, WAQSWorkshopClient.InvoiceDetail>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneManyToOne(source, e => e.InvoiceDetail, addIncludes, (e, value) => e.InvoiceDetail = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.OrderDetail>> IncludeInvoiceDetail(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.OrderDetail>> source)
        {
            return IncludeInvoiceDetailWithExpression(source, (Expression<Func<WAQSWorkshopClient.InvoiceDetail, WAQSWorkshopClient.InvoiceDetail>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.OrderDetail>> IncludeInvoiceDetailWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.OrderDetail>> source, Expression<Func<WAQSWorkshopClient.InvoiceDetail, WAQSWorkshopClient.InvoiceDetail>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOne<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.InvoiceDetail>(source, e => e.InvoiceDetail, addIncludes, (e1, e2) => e1.Id == e2.OrderDetailId, (e, value) => e.InvoiceDetail = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.OrderDetail> IncludeInvoiceDetail(this IEnumerable<WAQSWorkshopClient.OrderDetail> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.OrderDetail> IncludeInvoiceDetailWithExpression(this IEnumerable<WAQSWorkshopClient.OrderDetail> source, Expression<Func<WAQSWorkshopClient.InvoiceDetail, WAQSWorkshopClient.InvoiceDetail>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.OrderDetail IncludeInvoiceDetail(this WAQSWorkshopClient.OrderDetail source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.OrderDetail IncludeInvoiceDetailWithExpression(this WAQSWorkshopClient.OrderDetail source, Expression<Func<WAQSWorkshopClient.InvoiceDetail, WAQSWorkshopClient.InvoiceDetail>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.OrderDetail> IncludeOrder(this IAsyncQueryable<WAQSWorkshopClient.OrderDetail> source)
        {
            return IncludeOrderWithExpression(source, (Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.OrderDetail> IncludeOrderWithExpression(this IAsyncQueryable<WAQSWorkshopClient.OrderDetail> source, Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyToOne(source, ((INorthwindClientContext)source.Context).Orders.AsAsyncQueryable(), e => e.Order, (e1, e2) => e1.OrderId == e2.Id, addIncludes, (e1, e2) => e1.OrderId == e2.Id, (e, value) => e.Order = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> IncludeOrder(this IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> source)
        {
            return IncludeOrderWithExpression(source, (Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> IncludeOrderWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> source, Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneManyToOne(source, e => e.Order, addIncludes, (e, value) => e.Order = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.OrderDetail>> IncludeOrder(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.OrderDetail>> source)
        {
            return IncludeOrderWithExpression(source, (Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.OrderDetail>> IncludeOrderWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.OrderDetail>> source, Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOne<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.Order>(source, e => e.Order, addIncludes, (e1, e2) => e1.OrderId == e2.Id, (e, value) => e.Order = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.OrderDetail> IncludeOrder(this IEnumerable<WAQSWorkshopClient.OrderDetail> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.OrderDetail> IncludeOrderWithExpression(this IEnumerable<WAQSWorkshopClient.OrderDetail> source, Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.OrderDetail IncludeOrder(this WAQSWorkshopClient.OrderDetail source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.OrderDetail IncludeOrderWithExpression(this WAQSWorkshopClient.OrderDetail source, Expression<Func<WAQSWorkshopClient.Order, WAQSWorkshopClient.Order>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.OrderDetail> IncludeProduct(this IAsyncQueryable<WAQSWorkshopClient.OrderDetail> source)
        {
            return IncludeProductWithExpression(source, (Expression<Func<WAQSWorkshopClient.Product, WAQSWorkshopClient.Product>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.OrderDetail> IncludeProductWithExpression(this IAsyncQueryable<WAQSWorkshopClient.OrderDetail> source, Expression<Func<WAQSWorkshopClient.Product, WAQSWorkshopClient.Product>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyToOne(source, ((INorthwindClientContext)source.Context).Products.AsAsyncQueryable(), e => e.Product, (e1, e2) => e1.ProductId == e2.Id, addIncludes, (e1, e2) => e1.ProductId == e2.Id, (e, value) => e.Product = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> IncludeProduct(this IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> source)
        {
            return IncludeProductWithExpression(source, (Expression<Func<WAQSWorkshopClient.Product, WAQSWorkshopClient.Product>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> IncludeProductWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> source, Expression<Func<WAQSWorkshopClient.Product, WAQSWorkshopClient.Product>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneManyToOne(source, e => e.Product, addIncludes, (e, value) => e.Product = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.OrderDetail>> IncludeProduct(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.OrderDetail>> source)
        {
            return IncludeProductWithExpression(source, (Expression<Func<WAQSWorkshopClient.Product, WAQSWorkshopClient.Product>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.OrderDetail>> IncludeProductWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.OrderDetail>> source, Expression<Func<WAQSWorkshopClient.Product, WAQSWorkshopClient.Product>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOne<WAQSWorkshopClient.OrderDetail, WAQSWorkshopClient.Product>(source, e => e.Product, addIncludes, (e1, e2) => e1.ProductId == e2.Id, (e, value) => e.Product = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.OrderDetail> IncludeProduct(this IEnumerable<WAQSWorkshopClient.OrderDetail> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.OrderDetail> IncludeProductWithExpression(this IEnumerable<WAQSWorkshopClient.OrderDetail> source, Expression<Func<WAQSWorkshopClient.Product, WAQSWorkshopClient.Product>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.OrderDetail IncludeProduct(this WAQSWorkshopClient.OrderDetail source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.OrderDetail IncludeProductWithExpression(this WAQSWorkshopClient.OrderDetail source, Expression<Func<WAQSWorkshopClient.Product, WAQSWorkshopClient.Product>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        public static IAsyncQueryable<WAQSWorkshopClient.Product> WithFullName(this IAsyncQueryable<WAQSWorkshopClient.Product> source)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryable<WAQSWorkshopClient.Product>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"FullName"}), source.SelectedProperties);
        }	
    
        public static IAsyncQueryableValue<WAQSWorkshopClient.Product> WithFullName(this IAsyncQueryableValue<WAQSWorkshopClient.Product> source)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryableValue<WAQSWorkshopClient.Product>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"FullName"}), source.SelectedProperties);
        }	
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Product> WithFullName(this IEnumerable<WAQSWorkshopClient.Product> source)
        {
            throw new NotImplementedException();
        }	
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Product WithFullName(this WAQSWorkshopClient.Product source)
        {
            throw new NotImplementedException();
        }	
    
        public static async Task<string> LoadFullNameAsync(this WAQSWorkshopClient.Product entity, MergeOption? mergeOption = null)
        {
            var entitySet = (IClientEntitySet<INorthwindClientContext, WAQSWorkshopClient.Product>)ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await entitySet.AsAsyncQueryable().Where(e => e.Id == entity.Id).Select(e => e.FullName).First().ExecuteAsync(mergeOption);
            if (entity.Specifications == null)
                entity.Specifications = new WAQSWorkshopClient.Product.ProductSpecifications();
            entity.Specifications.HasFullName = true;
            entity.Specifications.FullName = value;
            return value;
        }	
    
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Product> IncludeOrderDetails(this IAsyncQueryable<WAQSWorkshopClient.Product> source)
        {
            return IncludeOrderDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Product> IncludeOrderDetailsWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Product> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, ((INorthwindClientContext)source.Context).OrderDetails.AsAsyncQueryable(), e => e.OrderDetails, (e1, e2) => e1.Id == e2.ProductId, queryTransform, (e1, e2) => e1.Id == e2.ProductId, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Product> IncludeOrderDetails(this IAsyncQueryableValue<WAQSWorkshopClient.Product> source)
        {
            return IncludeOrderDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Product> IncludeOrderDetailsWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Product> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.OrderDetails, queryTransform, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Product> IncludeOrderDetailsWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Product> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, WAQSWorkshopClient.OrderDetail>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneToMany(source, e => e.OrderDetails, queryTransform, (e1, e2) => e1.Id == e2.ProductId, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Product> IncludeOrderDetailsWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Product> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, WAQSWorkshopClient.OrderDetail>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneOneToMany(source, e => e.OrderDetails, queryTransform, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Product>> IncludeOrderDetails(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Product>> source)
        {
            return IncludeOrderDetailsWithExpression(source, (Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Product>> IncludeOrderDetailsWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Product>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToMany<WAQSWorkshopClient.Product, WAQSWorkshopClient.OrderDetail>(source, e => e.OrderDetails, queryTransform, (e1, e2) => e1.Id == e2.ProductId, e => e.OrderDetails);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Product>> IncludeOrderDetailsWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Product>> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, WAQSWorkshopClient.OrderDetail>> queryTransform)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOneMany<WAQSWorkshopClient.Product, WAQSWorkshopClient.OrderDetail>(source, e => e.OrderDetails, queryTransform, (e1, e2) => e1.Id == e2.ProductId, e => e.OrderDetails);
        }
     
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Product> IncludeOrderDetails(this IEnumerable<WAQSWorkshopClient.Product> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Product> IncludeOrderDetailsWithExpression(this IEnumerable<WAQSWorkshopClient.Product> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Product IncludeOrderDetails(this WAQSWorkshopClient.Product source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Product IncludeOrderDetailsWithExpression(this WAQSWorkshopClient.Product source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, IEnumerable<WAQSWorkshopClient.OrderDetail>>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Product> IncludeOrderDetailsWithExpression(this IEnumerable<WAQSWorkshopClient.Product> source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, WAQSWorkshopClient.OrderDetail>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Product IncludeOrderDetailsWithExpression(this WAQSWorkshopClient.Product source, Expression<Func<IEnumerable<WAQSWorkshopClient.OrderDetail>, WAQSWorkshopClient.OrderDetail>> queryTransform)
        {
            throw new InvalidOperationException();
        }
        
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Product> IncludeCategory(this IAsyncQueryable<WAQSWorkshopClient.Product> source)
        {
            return IncludeCategoryWithExpression(source, (Expression<Func<WAQSWorkshopClient.Category, WAQSWorkshopClient.Category>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryable<WAQSWorkshopClient.Product> IncludeCategoryWithExpression(this IAsyncQueryable<WAQSWorkshopClient.Product> source, Expression<Func<WAQSWorkshopClient.Category, WAQSWorkshopClient.Category>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyToOne(source, ((INorthwindClientContext)source.Context).Categories.AsAsyncQueryable(), e => e.Category, (e1, e2) => e1.CategoryId == e2.Id, addIncludes, (e1, e2) => e1.CategoryId == e2.Id, (e, value) => e.Category = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Product> IncludeCategory(this IAsyncQueryableValue<WAQSWorkshopClient.Product> source)
        {
            return IncludeCategoryWithExpression(source, (Expression<Func<WAQSWorkshopClient.Category, WAQSWorkshopClient.Category>>)null);
        }
        [IncludeMethod]
        public static IAsyncQueryableValue<WAQSWorkshopClient.Product> IncludeCategoryWithExpression(this IAsyncQueryableValue<WAQSWorkshopClient.Product> source, Expression<Func<WAQSWorkshopClient.Category, WAQSWorkshopClient.Category>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeOneManyToOne(source, e => e.Category, addIncludes, (e, value) => e.Category = value);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Product>> IncludeCategory(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Product>> source)
        {
            return IncludeCategoryWithExpression(source, (Expression<Func<WAQSWorkshopClient.Category, WAQSWorkshopClient.Category>>)null);
        }
    
        [IncludeMethod]
        public static IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Product>> IncludeCategoryWithExpression(this IAsyncQueryableValue<IEnumerable<WAQSWorkshopClient.Product>> source, Expression<Func<WAQSWorkshopClient.Category, WAQSWorkshopClient.Category>> addIncludes)
        {
            return WAQS.ClientContext.AsyncQueryableExtensions.IncludeManyOneToOne<WAQSWorkshopClient.Product, WAQSWorkshopClient.Category>(source, e => e.Category, addIncludes, (e1, e2) => e1.CategoryId == e2.Id, (e, value) => e.Category = value);
        }
    
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Product> IncludeCategory(this IEnumerable<WAQSWorkshopClient.Product> source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static IEnumerable<WAQSWorkshopClient.Product> IncludeCategoryWithExpression(this IEnumerable<WAQSWorkshopClient.Product> source, Expression<Func<WAQSWorkshopClient.Category, WAQSWorkshopClient.Category>> queryTransform)
        {
            throw new InvalidOperationException();
        }
    
        [IncludeMethod]
        public static WAQSWorkshopClient.Product IncludeCategory(this WAQSWorkshopClient.Product source)
        {
            throw new InvalidOperationException();
        }
        [IncludeMethod]
        public static WAQSWorkshopClient.Product IncludeCategoryWithExpression(this WAQSWorkshopClient.Product source, Expression<Func<WAQSWorkshopClient.Category, WAQSWorkshopClient.Category>> queryTransform)
        {
            throw new InvalidOperationException();
        }
            [IncludeMethod]
            public static IAsyncQueryable<WAQSWorkshopClient.Customer> IncludeForTotalSpent(this IAsyncQueryable<WAQSWorkshopClient.Customer> query)
            {
                bool done = false;
                IncludeForTotalSpentCustomQueryable(ref query, ref done);
                if (done)
                    return query;
                query = query.IncludeOrdersWithExpression(e2 => e2.WithTotal());
                return query;
            }
            static partial void IncludeForTotalSpentCustomQueryable(ref IAsyncQueryable<WAQSWorkshopClient.Customer> query, ref bool done);
    
            [IncludeMethod]
            public static IAsyncQueryableValue<WAQSWorkshopClient.Customer> IncludeForTotalSpent(this IAsyncQueryableValue<WAQSWorkshopClient.Customer> query)
            {
                bool done = false;
                IncludeForTotalSpentCustomQueryableValue(ref query, ref done);
                if (done)
                    return query;
                query = query.IncludeOrdersWithExpression(e2 => e2.WithTotal());
                return query;
            }
            static partial void IncludeForTotalSpentCustomQueryableValue(ref IAsyncQueryableValue<WAQSWorkshopClient.Customer> query, ref bool done);
    
            [IncludeMethod]
            public static IEnumerable<WAQSWorkshopClient.Customer> IncludeForTotalSpent(this IEnumerable<WAQSWorkshopClient.Customer> source)
            {
                throw new InvalidOperationException();
            }
    
            [IncludeMethod]
            public static WAQSWorkshopClient.Customer IncludeForTotalSpent(this WAQSWorkshopClient.Customer source)
            {
                throw new InvalidOperationException();
            }
            [IncludeMethod]
            public static IAsyncQueryable<WAQSWorkshopClient.Customer> IncludeForFullName(this IAsyncQueryable<WAQSWorkshopClient.Customer> query)
            {
                bool done = false;
                IncludeForFullNameCustomQueryable(ref query, ref done);
                return query;
            }
            static partial void IncludeForFullNameCustomQueryable(ref IAsyncQueryable<WAQSWorkshopClient.Customer> query, ref bool done);
    
            [IncludeMethod]
            public static IAsyncQueryableValue<WAQSWorkshopClient.Customer> IncludeForFullName(this IAsyncQueryableValue<WAQSWorkshopClient.Customer> query)
            {
                bool done = false;
                IncludeForFullNameCustomQueryableValue(ref query, ref done);
                return query;
            }
            static partial void IncludeForFullNameCustomQueryableValue(ref IAsyncQueryableValue<WAQSWorkshopClient.Customer> query, ref bool done);
    
            [IncludeMethod]
            public static IEnumerable<WAQSWorkshopClient.Customer> IncludeForFullName(this IEnumerable<WAQSWorkshopClient.Customer> source)
            {
                throw new InvalidOperationException();
            }
    
            [IncludeMethod]
            public static WAQSWorkshopClient.Customer IncludeForFullName(this WAQSWorkshopClient.Customer source)
            {
                throw new InvalidOperationException();
            }
            [IncludeMethod]
            public static IAsyncQueryable<WAQSWorkshopClient.Employee> IncludeForFullName(this IAsyncQueryable<WAQSWorkshopClient.Employee> query)
            {
                bool done = false;
                IncludeForFullNameCustomQueryable(ref query, ref done);
                return query;
            }
            static partial void IncludeForFullNameCustomQueryable(ref IAsyncQueryable<WAQSWorkshopClient.Employee> query, ref bool done);
    
            [IncludeMethod]
            public static IAsyncQueryableValue<WAQSWorkshopClient.Employee> IncludeForFullName(this IAsyncQueryableValue<WAQSWorkshopClient.Employee> query)
            {
                bool done = false;
                IncludeForFullNameCustomQueryableValue(ref query, ref done);
                return query;
            }
            static partial void IncludeForFullNameCustomQueryableValue(ref IAsyncQueryableValue<WAQSWorkshopClient.Employee> query, ref bool done);
    
            [IncludeMethod]
            public static IEnumerable<WAQSWorkshopClient.Employee> IncludeForFullName(this IEnumerable<WAQSWorkshopClient.Employee> source)
            {
                throw new InvalidOperationException();
            }
    
            [IncludeMethod]
            public static WAQSWorkshopClient.Employee IncludeForFullName(this WAQSWorkshopClient.Employee source)
            {
                throw new InvalidOperationException();
            }
            [IncludeMethod]
            public static IAsyncQueryable<WAQSWorkshopClient.OrderDetail> IncludeForAmount(this IAsyncQueryable<WAQSWorkshopClient.OrderDetail> query)
            {
                bool done = false;
                IncludeForAmountCustomQueryable(ref query, ref done);
                return query;
            }
            static partial void IncludeForAmountCustomQueryable(ref IAsyncQueryable<WAQSWorkshopClient.OrderDetail> query, ref bool done);
    
            [IncludeMethod]
            public static IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> IncludeForAmount(this IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> query)
            {
                bool done = false;
                IncludeForAmountCustomQueryableValue(ref query, ref done);
                return query;
            }
            static partial void IncludeForAmountCustomQueryableValue(ref IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> query, ref bool done);
    
            [IncludeMethod]
            public static IEnumerable<WAQSWorkshopClient.OrderDetail> IncludeForAmount(this IEnumerable<WAQSWorkshopClient.OrderDetail> source)
            {
                throw new InvalidOperationException();
            }
    
            [IncludeMethod]
            public static WAQSWorkshopClient.OrderDetail IncludeForAmount(this WAQSWorkshopClient.OrderDetail source)
            {
                throw new InvalidOperationException();
            }
            [IncludeMethod]
            public static IAsyncQueryable<WAQSWorkshopClient.OrderDetail> IncludeForProductFullName(this IAsyncQueryable<WAQSWorkshopClient.OrderDetail> query)
            {
                bool done = false;
                IncludeForProductFullNameCustomQueryable(ref query, ref done);
                if (done)
                    return query;
                query = query.IncludeProductWithExpression(e2 => e2.WithFullName());
                return query;
            }
            static partial void IncludeForProductFullNameCustomQueryable(ref IAsyncQueryable<WAQSWorkshopClient.OrderDetail> query, ref bool done);
    
            [IncludeMethod]
            public static IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> IncludeForProductFullName(this IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> query)
            {
                bool done = false;
                IncludeForProductFullNameCustomQueryableValue(ref query, ref done);
                if (done)
                    return query;
                query = query.IncludeProductWithExpression(e2 => e2.WithFullName());
                return query;
            }
            static partial void IncludeForProductFullNameCustomQueryableValue(ref IAsyncQueryableValue<WAQSWorkshopClient.OrderDetail> query, ref bool done);
    
            [IncludeMethod]
            public static IEnumerable<WAQSWorkshopClient.OrderDetail> IncludeForProductFullName(this IEnumerable<WAQSWorkshopClient.OrderDetail> source)
            {
                throw new InvalidOperationException();
            }
    
            [IncludeMethod]
            public static WAQSWorkshopClient.OrderDetail IncludeForProductFullName(this WAQSWorkshopClient.OrderDetail source)
            {
                throw new InvalidOperationException();
            }
            [IncludeMethod]
            public static IAsyncQueryable<WAQSWorkshopClient.Order> IncludeForTotal(this IAsyncQueryable<WAQSWorkshopClient.Order> query)
            {
                bool done = false;
                IncludeForTotalCustomQueryable(ref query, ref done);
                if (done)
                    return query;
                query = query.IncludeOrderDetailsWithExpression(e2 => e2.WithAmount());
                return query;
            }
            static partial void IncludeForTotalCustomQueryable(ref IAsyncQueryable<WAQSWorkshopClient.Order> query, ref bool done);
    
            [IncludeMethod]
            public static IAsyncQueryableValue<WAQSWorkshopClient.Order> IncludeForTotal(this IAsyncQueryableValue<WAQSWorkshopClient.Order> query)
            {
                bool done = false;
                IncludeForTotalCustomQueryableValue(ref query, ref done);
                if (done)
                    return query;
                query = query.IncludeOrderDetailsWithExpression(e2 => e2.WithAmount());
                return query;
            }
            static partial void IncludeForTotalCustomQueryableValue(ref IAsyncQueryableValue<WAQSWorkshopClient.Order> query, ref bool done);
    
            [IncludeMethod]
            public static IEnumerable<WAQSWorkshopClient.Order> IncludeForTotal(this IEnumerable<WAQSWorkshopClient.Order> source)
            {
                throw new InvalidOperationException();
            }
    
            [IncludeMethod]
            public static WAQSWorkshopClient.Order IncludeForTotal(this WAQSWorkshopClient.Order source)
            {
                throw new InvalidOperationException();
            }
            [IncludeMethod]
            public static IAsyncQueryable<WAQSWorkshopClient.Product> IncludeForFullName(this IAsyncQueryable<WAQSWorkshopClient.Product> query)
            {
                bool done = false;
                IncludeForFullNameCustomQueryable(ref query, ref done);
                if (done)
                    return query;
                query = query.IncludeCategory();
                return query;
            }
            static partial void IncludeForFullNameCustomQueryable(ref IAsyncQueryable<WAQSWorkshopClient.Product> query, ref bool done);
    
            [IncludeMethod]
            public static IAsyncQueryableValue<WAQSWorkshopClient.Product> IncludeForFullName(this IAsyncQueryableValue<WAQSWorkshopClient.Product> query)
            {
                bool done = false;
                IncludeForFullNameCustomQueryableValue(ref query, ref done);
                if (done)
                    return query;
                query = query.IncludeCategory();
                return query;
            }
            static partial void IncludeForFullNameCustomQueryableValue(ref IAsyncQueryableValue<WAQSWorkshopClient.Product> query, ref bool done);
    
            [IncludeMethod]
            public static IEnumerable<WAQSWorkshopClient.Product> IncludeForFullName(this IEnumerable<WAQSWorkshopClient.Product> source)
            {
                throw new InvalidOperationException();
            }
    
            [IncludeMethod]
            public static WAQSWorkshopClient.Product IncludeForFullName(this WAQSWorkshopClient.Product source)
            {
                throw new InvalidOperationException();
            }
        public static async Task<IEnumerable<WAQSWorkshopClient.Product>> LoadProductsAsync(this Category entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Products.AsAsyncQueryable().Where(e => entity.Id == e.CategoryId).ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<IEnumerable<WAQSWorkshopClient.Invoice>> LoadInvoicesAsync(this Customer entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Invoices.AsAsyncQueryable().Where(e => entity.Id == e.CustomerId).ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<IEnumerable<WAQSWorkshopClient.Order>> LoadOrdersAsync(this Customer entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Orders.AsAsyncQueryable().Where(e => entity.Id == e.CustomerId).ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<IEnumerable<WAQSWorkshopClient.Employee>> LoadEmployees1Async(this Employee entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Employees.AsAsyncQueryable().Where(e => entity.Id == e.ReportsTo).ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<WAQSWorkshopClient.Employee> LoadEmployee1Async(this Employee entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Employees.AsAsyncQueryable().Where(e => entity.ReportsTo == e.Id).FirstOrDefault().ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<IEnumerable<WAQSWorkshopClient.Order>> LoadOrdersAsync(this Employee entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Orders.AsAsyncQueryable().Where(e => entity.Id == e.EmployeeId).ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<WAQSWorkshopClient.Customer> LoadCustomerAsync(this Invoice entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Customers.AsAsyncQueryable().Where(e => entity.CustomerId == e.Id).FirstOrDefault().ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<IEnumerable<WAQSWorkshopClient.InvoiceDetail>> LoadInvoiceDetailsAsync(this Invoice entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).InvoiceDetails.AsAsyncQueryable().Where(e => entity.OrderId == e.InvoiceId).ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<WAQSWorkshopClient.Order> LoadOrderAsync(this Invoice entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Orders.AsAsyncQueryable().Where(e => entity.OrderId == e.Id).FirstOrDefault().ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<WAQSWorkshopClient.Invoice> LoadInvoiceAsync(this InvoiceDetail entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Invoices.AsAsyncQueryable().Where(e => entity.InvoiceId == e.OrderId).FirstOrDefault().ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<WAQSWorkshopClient.OrderDetail> LoadOrderDetailAsync(this InvoiceDetail entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).OrderDetails.AsAsyncQueryable().Where(e => entity.OrderDetailId == e.Id).FirstOrDefault().ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<WAQSWorkshopClient.Customer> LoadCustomerAsync(this Order entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Customers.AsAsyncQueryable().Where(e => entity.CustomerId == e.Id).FirstOrDefault().ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<WAQSWorkshopClient.Employee> LoadEmployeeAsync(this Order entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Employees.AsAsyncQueryable().Where(e => entity.EmployeeId == e.Id).FirstOrDefault().ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<WAQSWorkshopClient.Invoice> LoadInvoiceAsync(this Order entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Invoices.AsAsyncQueryable().Where(e => entity.Id == e.OrderId).FirstOrDefault().ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<IEnumerable<WAQSWorkshopClient.OrderDetail>> LoadOrderDetailsAsync(this Order entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).OrderDetails.AsAsyncQueryable().Where(e => entity.Id == e.OrderId).ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<WAQSWorkshopClient.InvoiceDetail> LoadInvoiceDetailAsync(this OrderDetail entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).InvoiceDetails.AsAsyncQueryable().Where(e => entity.Id == e.OrderDetailId).FirstOrDefault().ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<WAQSWorkshopClient.Order> LoadOrderAsync(this OrderDetail entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Orders.AsAsyncQueryable().Where(e => entity.OrderId == e.Id).FirstOrDefault().ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<WAQSWorkshopClient.Product> LoadProductAsync(this OrderDetail entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Products.AsAsyncQueryable().Where(e => entity.ProductId == e.Id).FirstOrDefault().ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<IEnumerable<WAQSWorkshopClient.OrderDetail>> LoadOrderDetailsAsync(this Product entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).OrderDetails.AsAsyncQueryable().Where(e => entity.Id == e.ProductId).ExecuteAsync(mergeOption);
            return value;
        }
        public static async Task<WAQSWorkshopClient.Category> LoadCategoryAsync(this Product entity, MergeOption? mergeOption = null)
        {
            var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (mergeOption == MergeOption.NoTracking || entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await ((INorthwindClientContext)entitySet.Context).Categories.AsAsyncQueryable().Where(e => entity.CategoryId == e.Id).FirstOrDefault().ExecuteAsync(mergeOption);
            return value;
        }
    }
}
