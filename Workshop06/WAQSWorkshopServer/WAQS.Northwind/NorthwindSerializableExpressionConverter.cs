//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using WAQS.Common;
using WAQS.SerializableExpressions;
using WAQSWorkshopServer;
using WAQSWorkshopServer.DAL.Interfaces;
using WAQS.Service;
using WAQS.DAL.Interfaces;

namespace WAQSWorkshopServer.Service
{
    public partial class NorthwindSerializableExpressionConverter : ISerializableExpressionConverter
    {
        private INorthwindEntities _context;
        private NorthwindEntitiesFilters _entitiesFilter;
    
        public NorthwindSerializableExpressionConverter(INorthwindEntities context, NorthwindEntitiesFilters entitiesFilter)
        {
            _context = context;
            _entitiesFilter = entitiesFilter;
        }
    
        IDataContext ISerializableExpressionConverter.Context
        {
            get { return _context; }
        }
    
        Type ISerializableExpressionConverter.DataContextType
        {
            get { return typeof(INorthwindEntities); }
        }
    
        public Type GetTypeFromWCFNamespace(SerializableType serializableType, string typeName)
        {
            switch (serializableType.WCFNamespaceName)
            {
                case "http://Northwind/Entities":
                    switch (typeName)
                    {
                        case "Customer":
                            return typeof(WAQSWorkshopServer.Customer);
                        case "Employee":
                            return typeof(WAQSWorkshopServer.Employee);
                        case "InvoiceDetail":
                            return typeof(WAQSWorkshopServer.InvoiceDetail);
                        case "Invoice":
                            return typeof(WAQSWorkshopServer.Invoice);
                        case "OrderDetail":
                            return typeof(WAQSWorkshopServer.OrderDetail);
                        case "Order":
                            return typeof(WAQSWorkshopServer.Order);
                        case "Product":
                            return typeof(WAQSWorkshopServer.Product);
                        case "Category":
                            return typeof(WAQSWorkshopServer.Category);
                    }
                    break;
            }
            Type type = null;
            GetTypeFromWCFNamespace(serializableType, typeName, ref type);
            return type;
        }
        partial void GetTypeFromWCFNamespace(SerializableType serializableType, string typeName, ref Type type);
    
        public virtual Type GetTypeInLINQ(Type type)
        {
            GetTypeInLINQ(ref type);
            return type;
        }
        partial void GetTypeInLINQ(ref Type type);
    
        public Expression GetEntitySetExpression(string entitySetName)
        {
            switch (entitySetName)
            {
                case "Customers":
                    return GetObjectSetExpression(_entitiesFilter.CustomerFilterExpression, _context.CustomersExpression);
                case "Employees":
                    return GetObjectSetExpression(_entitiesFilter.EmployeeFilterExpression, _context.EmployeesExpression);
                case "InvoiceDetails":
                    return GetObjectSetExpression(_entitiesFilter.InvoiceDetailFilterExpression, _context.InvoiceDetailsExpression);
                case "Invoices":
                    return GetObjectSetExpression(_entitiesFilter.InvoiceFilterExpression, _context.InvoicesExpression);
                case "OrderDetails":
                    return GetObjectSetExpression(_entitiesFilter.OrderDetailFilterExpression, _context.OrderDetailsExpression);
                case "Orders":
                    return GetObjectSetExpression(_entitiesFilter.OrderFilterExpression, _context.OrdersExpression);
                case "Products":
                    return GetObjectSetExpression(_entitiesFilter.ProductFilterExpression, _context.ProductsExpression);
                case "Categories":
                    return GetObjectSetExpression(_entitiesFilter.CategoryFilterExpression, _context.CategoriesExpression);
    	
            }
            throw new NotImplementedException();
        }
    
        private Expression GetObjectSetExpression<T>(Expression<Func<T, bool>> filterExpression, Expression<Func<IQueryable<T>>> query)
        {
            if (filterExpression == null)
                return query.Body;
            ParameterInfo[] parameters;
            Type predicateType;
            return Expression.Call(
                typeof(Queryable).GetMethods().First(m => m.Name == "Where" && (parameters = m.GetParameters()).Length == 2 && (predicateType = parameters[1].ParameterType).IsGenericType && (predicateType = predicateType.GetGenericArguments()[0]).IsGenericType && predicateType.GetGenericArguments().Length == 2).MakeGenericMethod(typeof(T)),
                query.Body,
                filterExpression);
        }
    
        public Expression GetCustomPropertyExpression(Expression expression, PropertyInfo property)
        {
            if (property == null)
                return null;
            if (property.DeclaringType == typeof(WAQSWorkshopServer.Customer))
            {
                switch (property.Name)
                {
                    case "Invoices":
                        return FilterPropertyMany(expression, property, _entitiesFilter.InvoiceFilterExpression);
                    case "Orders":
                        return FilterPropertyMany(expression, property, _entitiesFilter.OrderFilterExpression);
                }
            }
            if (property.DeclaringType == typeof(WAQSWorkshopServer.Employee))
            {
                switch (property.Name)
                {
                    case "Employees1":
                        return FilterPropertyMany(expression, property, _entitiesFilter.EmployeeFilterExpression);
                    case "Employee1":
                        return FilterPropertySingle(expression, property, _entitiesFilter.EmployeeFilterExpression, _context.Employees, (e1, e2) => e1.Id == e2.Id);
                    case "Orders":
                        return FilterPropertyMany(expression, property, _entitiesFilter.OrderFilterExpression);
                }
            }
            if (property.DeclaringType == typeof(WAQSWorkshopServer.InvoiceDetail))
            {
                switch (property.Name)
                {
                    case "Invoice":
                        return FilterPropertySingle(expression, property, _entitiesFilter.InvoiceFilterExpression, _context.Invoices, (e1, e2) => e1.OrderId == e2.OrderId);
                    case "OrderDetail":
                        return FilterPropertySingle(expression, property, _entitiesFilter.OrderDetailFilterExpression, _context.OrderDetails, (e1, e2) => e1.Id == e2.Id);
                }
            }
            if (property.DeclaringType == typeof(WAQSWorkshopServer.Invoice))
            {
                switch (property.Name)
                {
                    case "Customer":
                        return FilterPropertySingle(expression, property, _entitiesFilter.CustomerFilterExpression, _context.Customers, (e1, e2) => e1.Id == e2.Id);
                    case "InvoiceDetails":
                        return FilterPropertyMany(expression, property, _entitiesFilter.InvoiceDetailFilterExpression);
                    case "Order":
                        return FilterPropertySingle(expression, property, _entitiesFilter.OrderFilterExpression, _context.Orders, (e1, e2) => e1.Id == e2.Id);
                }
            }
            if (property.DeclaringType == typeof(WAQSWorkshopServer.OrderDetail))
            {
                switch (property.Name)
                {
                    case "InvoiceDetail":
                        return FilterPropertySingle(expression, property, _entitiesFilter.InvoiceDetailFilterExpression, _context.InvoiceDetails, (e1, e2) => e1.OrderDetailId == e2.OrderDetailId);
                    case "Order":
                        return FilterPropertySingle(expression, property, _entitiesFilter.OrderFilterExpression, _context.Orders, (e1, e2) => e1.Id == e2.Id);
                    case "Product":
                        return FilterPropertySingle(expression, property, _entitiesFilter.ProductFilterExpression, _context.Products, (e1, e2) => e1.Id == e2.Id);
                }
            }
            if (property.DeclaringType == typeof(WAQSWorkshopServer.Order))
            {
                switch (property.Name)
                {
                    case "Customer":
                        return FilterPropertySingle(expression, property, _entitiesFilter.CustomerFilterExpression, _context.Customers, (e1, e2) => e1.Id == e2.Id);
                    case "Employee":
                        return FilterPropertySingle(expression, property, _entitiesFilter.EmployeeFilterExpression, _context.Employees, (e1, e2) => e1.Id == e2.Id);
                    case "Invoice":
                        return FilterPropertySingle(expression, property, _entitiesFilter.InvoiceFilterExpression, _context.Invoices, (e1, e2) => e1.OrderId == e2.OrderId);
                    case "OrderDetails":
                        return FilterPropertyMany(expression, property, _entitiesFilter.OrderDetailFilterExpression);
                }
            }
            if (property.DeclaringType == typeof(WAQSWorkshopServer.Product))
            {
                switch (property.Name)
                {
                    case "OrderDetails":
                        return FilterPropertyMany(expression, property, _entitiesFilter.OrderDetailFilterExpression);
                    case "Category":
                        return FilterPropertySingle(expression, property, _entitiesFilter.CategoryFilterExpression, _context.Categories, (e1, e2) => e1.Id == e2.Id);
                }
            }
            if (property.DeclaringType == typeof(WAQSWorkshopServer.Category))
            {
                switch (property.Name)
                {
                    case "Products":
                        return FilterPropertyMany(expression, property, _entitiesFilter.ProductFilterExpression);
                }
            }
            return null;
        }
    
        private Expression FilterPropertyMany<T>(Expression expression, PropertyInfo property, Expression<Func<T, bool>> filterExpression)
        {
            if (filterExpression == null)
                return Expression.MakeMemberAccess(expression, property);
            return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Where" && m.GetParameters()[1].ParameterType.GetGenericArguments().Length == 2).MakeGenericMethod(typeof(T)), Expression.MakeMemberAccess(expression, property), filterExpression);
        }
    
        private Expression FilterPropertySingle<T>(Expression expression, PropertyInfo property, Expression<Func<T, bool>> filterExpression, IQueryable<T> query, Expression<Func<T, T, bool>> equalsExpression)
        {
            if (filterExpression == null)
                return Expression.MakeMemberAccess(expression, property); 
            var parameter = Expression.Parameter(typeof(T));
            return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "FirstOrDefault" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Where" && m.GetParameters()[1].ParameterType.GetGenericArguments().Length == 2).MakeGenericMethod(typeof(T)), query.Expression, Expression.Lambda(Expression.AndAlso(filterExpression.Body.ReplaceParameter(filterExpression.Parameters[0], parameter), equalsExpression.Body.ReplaceParameter(p => 
                {
                    if (p == equalsExpression.Parameters[0])
                        return parameter;
                    else if (p == equalsExpression.Parameters[1])
                        return Expression.MakeMemberAccess(expression, property);
                    return p;
                })), parameter)));
        }
    
        public Type GetInheritedType(Type type)
        {
            return GetNorthwindInheritedType(type);
        }
        public static Type GetNorthwindInheritedType(Type type)
        {
            if (type == typeof(WAQSWorkshopServer.Customer))
                return typeof(InheritedCustomer);
            if (type == typeof(WAQSWorkshopServer.Employee))
                return typeof(InheritedEmployee);
            if (type == typeof(WAQSWorkshopServer.InvoiceDetail))
                return typeof(InheritedInvoiceDetail);
            if (type == typeof(WAQSWorkshopServer.Invoice))
                return typeof(InheritedInvoice);
            if (type == typeof(WAQSWorkshopServer.OrderDetail))
                return typeof(InheritedOrderDetail);
            if (type == typeof(WAQSWorkshopServer.Order))
                return typeof(InheritedOrder);
            if (type == typeof(WAQSWorkshopServer.Product))
                return typeof(InheritedProduct);
            if (type == typeof(WAQSWorkshopServer.Category))
                return typeof(InheritedCategory);
            return null;
        }
    
        public Type GetWithType(Type type)
        {
            return GetNorthwindWithType(type);
        }
        public static Type GetNorthwindWithType(Type type)
        {
            if (typeof(WAQSWorkshopServer.Customer).IsAssignableFrom(type))
                return typeof(WithCustomer);
            if (typeof(WAQSWorkshopServer.Employee).IsAssignableFrom(type))
                return typeof(WithEmployee);
            if (typeof(WAQSWorkshopServer.InvoiceDetail).IsAssignableFrom(type))
                return typeof(WithInvoiceDetail);
            if (typeof(WAQSWorkshopServer.Invoice).IsAssignableFrom(type))
                return typeof(WithInvoice);
            if (typeof(WAQSWorkshopServer.OrderDetail).IsAssignableFrom(type))
                return typeof(WithOrderDetail);
            if (typeof(WAQSWorkshopServer.Order).IsAssignableFrom(type))
                return typeof(WithOrder);
            if (typeof(WAQSWorkshopServer.Product).IsAssignableFrom(type))
                return typeof(WithProduct);
            if (typeof(WAQSWorkshopServer.Category).IsAssignableFrom(type))
                return typeof(WithCategory);
            return null;
        }
    
        public Type GetBaseType(Type type)
        {
            return GetNorthwindBaseType(type);
        }
        public static Type GetNorthwindBaseType(Type type)
        {
            if (type == typeof(InheritedCustomer) || type == typeof(WithCustomer))
                return typeof(WAQSWorkshopServer.Customer);
            if (type == typeof(InheritedEmployee) || type == typeof(WithEmployee))
                return typeof(WAQSWorkshopServer.Employee);
            if (type == typeof(InheritedInvoiceDetail) || type == typeof(WithInvoiceDetail))
                return typeof(WAQSWorkshopServer.InvoiceDetail);
            if (type == typeof(InheritedInvoice) || type == typeof(WithInvoice))
                return typeof(WAQSWorkshopServer.Invoice);
            if (type == typeof(InheritedOrderDetail) || type == typeof(WithOrderDetail))
                return typeof(WAQSWorkshopServer.OrderDetail);
            if (type == typeof(InheritedOrder) || type == typeof(WithOrder))
                return typeof(WAQSWorkshopServer.Order);
            if (type == typeof(InheritedProduct) || type == typeof(WithProduct))
                return typeof(WAQSWorkshopServer.Product);
            if (type == typeof(InheritedCategory) || type == typeof(WithCategory))
                return typeof(WAQSWorkshopServer.Category);
            return null;
        }
        
        public object GetBaseObject(object inheritedObject)
        {
            return GetNorthwindBaseObject(inheritedObject);
        }
        public static object GetNorthwindBaseObject(object inheritedObject)
        {
            if (inheritedObject == null)
                return null;
            var inheritedObjectAsCustomer = inheritedObject as InheritedCustomer;
            if (inheritedObjectAsCustomer != null)
                return new WAQSWorkshopServer.Customer { Id = inheritedObjectAsCustomer.Id, CompanyName = inheritedObjectAsCustomer.CompanyName, ContactName = inheritedObjectAsCustomer.ContactName, ContactTitle = inheritedObjectAsCustomer.ContactTitle, Address = inheritedObjectAsCustomer.Address, City = inheritedObjectAsCustomer.City, Region = inheritedObjectAsCustomer.Region, PostalCode = inheritedObjectAsCustomer.PostalCode, Country = inheritedObjectAsCustomer.Country, Phone = inheritedObjectAsCustomer.Phone, Fax = inheritedObjectAsCustomer.Fax, IsVIP = inheritedObjectAsCustomer.IsVIP, Specifications = inheritedObjectAsCustomer.Specifications };
            var inheritedObjectAsEmployee = inheritedObject as InheritedEmployee;
            if (inheritedObjectAsEmployee != null)
                return new WAQSWorkshopServer.Employee { Id = inheritedObjectAsEmployee.Id, LastName = inheritedObjectAsEmployee.LastName, FirstName = inheritedObjectAsEmployee.FirstName, Title = inheritedObjectAsEmployee.Title, TitleOfCourtesy = inheritedObjectAsEmployee.TitleOfCourtesy, BirthDate = inheritedObjectAsEmployee.BirthDate, HireDate = inheritedObjectAsEmployee.HireDate, Address = inheritedObjectAsEmployee.Address, City = inheritedObjectAsEmployee.City, Region = inheritedObjectAsEmployee.Region, PostalCode = inheritedObjectAsEmployee.PostalCode, Country = inheritedObjectAsEmployee.Country, HomePhone = inheritedObjectAsEmployee.HomePhone, Extension = inheritedObjectAsEmployee.Extension, Photo = inheritedObjectAsEmployee.Photo, Notes = inheritedObjectAsEmployee.Notes, ReportsTo = inheritedObjectAsEmployee.ReportsTo, PhotoPath = inheritedObjectAsEmployee.PhotoPath, Specifications = inheritedObjectAsEmployee.Specifications };
            var inheritedObjectAsInvoiceDetail = inheritedObject as InheritedInvoiceDetail;
            if (inheritedObjectAsInvoiceDetail != null)
                return new WAQSWorkshopServer.InvoiceDetail { OrderDetailId = inheritedObjectAsInvoiceDetail.OrderDetailId, InvoiceId = inheritedObjectAsInvoiceDetail.InvoiceId, UnitPrice = inheritedObjectAsInvoiceDetail.UnitPrice, Quantity = inheritedObjectAsInvoiceDetail.Quantity, Discount = inheritedObjectAsInvoiceDetail.Discount, Amount = inheritedObjectAsInvoiceDetail.Amount, };
            var inheritedObjectAsInvoice = inheritedObject as InheritedInvoice;
            if (inheritedObjectAsInvoice != null)
                return new WAQSWorkshopServer.Invoice { OrderId = inheritedObjectAsInvoice.OrderId, CustomerId = inheritedObjectAsInvoice.CustomerId, CustomerCompanyName = inheritedObjectAsInvoice.CustomerCompanyName, CustomerContactName = inheritedObjectAsInvoice.CustomerContactName, Total = inheritedObjectAsInvoice.Total, Dicount = inheritedObjectAsInvoice.Dicount, Paid = inheritedObjectAsInvoice.Paid, };
            var inheritedObjectAsOrderDetail = inheritedObject as InheritedOrderDetail;
            if (inheritedObjectAsOrderDetail != null)
                return new WAQSWorkshopServer.OrderDetail { Id = inheritedObjectAsOrderDetail.Id, OrderId = inheritedObjectAsOrderDetail.OrderId, ProductId = inheritedObjectAsOrderDetail.ProductId, UnitPrice = inheritedObjectAsOrderDetail.UnitPrice, Quantity = inheritedObjectAsOrderDetail.Quantity, Discount = inheritedObjectAsOrderDetail.Discount, Specifications = inheritedObjectAsOrderDetail.Specifications };
            var inheritedObjectAsOrder = inheritedObject as InheritedOrder;
            if (inheritedObjectAsOrder != null)
                return new WAQSWorkshopServer.Order { Id = inheritedObjectAsOrder.Id, CustomerId = inheritedObjectAsOrder.CustomerId, EmployeeId = inheritedObjectAsOrder.EmployeeId, OrderDate = inheritedObjectAsOrder.OrderDate, RequiredDate = inheritedObjectAsOrder.RequiredDate, ShippedDate = inheritedObjectAsOrder.ShippedDate, ShipVia = inheritedObjectAsOrder.ShipVia, Freight = inheritedObjectAsOrder.Freight, ShipName = inheritedObjectAsOrder.ShipName, ShipAddress = inheritedObjectAsOrder.ShipAddress, ShipCity = inheritedObjectAsOrder.ShipCity, ShipRegion = inheritedObjectAsOrder.ShipRegion, ShipPostalCode = inheritedObjectAsOrder.ShipPostalCode, ShipCountry = inheritedObjectAsOrder.ShipCountry, Specifications = inheritedObjectAsOrder.Specifications };
            var inheritedObjectAsProduct = inheritedObject as InheritedProduct;
            if (inheritedObjectAsProduct != null)
                return new WAQSWorkshopServer.Product { Id = inheritedObjectAsProduct.Id, Name = inheritedObjectAsProduct.Name, SupplierId = inheritedObjectAsProduct.SupplierId, CategoryId = inheritedObjectAsProduct.CategoryId, QuantityPerUnit = inheritedObjectAsProduct.QuantityPerUnit, UnitPrice = inheritedObjectAsProduct.UnitPrice, Discontinued = inheritedObjectAsProduct.Discontinued, Specifications = inheritedObjectAsProduct.Specifications };
            var inheritedObjectAsCategory = inheritedObject as InheritedCategory;
            if (inheritedObjectAsCategory != null)
                return new WAQSWorkshopServer.Category { Id = inheritedObjectAsCategory.Id, Name = inheritedObjectAsCategory.Name, Description = inheritedObjectAsCategory.Description, Picture = inheritedObjectAsCategory.Picture, };
            return NorthwindService.GetWithBaseObject(inheritedObject);
        }
        
        public Expression GetWithBaseExpression(Type parameterType, IEnumerable<string> withSpecificationsProperties)
        {
            return GetNorthwindWithBaseExpression(parameterType, withSpecificationsProperties);
        }
        public static Expression GetNorthwindWithBaseExpression(Type parameterType, IEnumerable<string> withSpecificationsProperties)
        {
            var parameter = Expression.Parameter(parameterType);
            Expression exp = null;
            Type valueType = null;
            Expression entityExpression = null;
            PropertyInfo prop;
            if (typeof(WithCustomer) == parameterType)
            {
                valueType = typeof(WAQSWorkshopServer.Customer);
                var valueVariable = Expression.Parameter(valueType);
                var exps = new List<Expression>() { Expression.Assign(valueVariable, entityExpression = Expression.MakeMemberAccess(parameter, parameterType.GetProperty("Customer"))) };
                if (withSpecificationsProperties.Contains("TotalSpent"))
                    exps.Add(Expression.Assign(Expression.MakeMemberAccess(valueVariable, prop = typeof(WAQSWorkshopServer.Customer).GetProperty("TotalSpent")), Expression.MakeMemberAccess(parameter, prop))); 
                if (withSpecificationsProperties.Contains("FullName"))
                    exps.Add(Expression.Assign(Expression.MakeMemberAccess(valueVariable, prop = typeof(WAQSWorkshopServer.Customer).GetProperty("FullName")), Expression.MakeMemberAccess(parameter, prop))); 
                exps.Add(valueVariable);
                exp = Expression.Block(
                    new[] { valueVariable }, 
                    exps);
            }
            else if (typeof(WithEmployee) == parameterType)
            {
                valueType = typeof(WAQSWorkshopServer.Employee);
                var valueVariable = Expression.Parameter(valueType);
                var exps = new List<Expression>() { Expression.Assign(valueVariable, entityExpression = Expression.MakeMemberAccess(parameter, parameterType.GetProperty("Employee"))) };
                if (withSpecificationsProperties.Contains("FullName"))
                    exps.Add(Expression.Assign(Expression.MakeMemberAccess(valueVariable, prop = typeof(WAQSWorkshopServer.Employee).GetProperty("FullName")), Expression.MakeMemberAccess(parameter, prop))); 
                exps.Add(valueVariable);
                exp = Expression.Block(
                    new[] { valueVariable }, 
                    exps);
            }
            else if (typeof(WithInvoiceDetail) == parameterType)
            {
                valueType = typeof(WAQSWorkshopServer.InvoiceDetail);
                var valueVariable = Expression.Parameter(valueType);
                var exps = new List<Expression>() { Expression.Assign(valueVariable, entityExpression = Expression.MakeMemberAccess(parameter, parameterType.GetProperty("InvoiceDetail"))) };
                exps.Add(valueVariable);
                exp = Expression.Block(
                    new[] { valueVariable }, 
                    exps);
            }
            else if (typeof(WithInvoice) == parameterType)
            {
                valueType = typeof(WAQSWorkshopServer.Invoice);
                var valueVariable = Expression.Parameter(valueType);
                var exps = new List<Expression>() { Expression.Assign(valueVariable, entityExpression = Expression.MakeMemberAccess(parameter, parameterType.GetProperty("Invoice"))) };
                exps.Add(valueVariable);
                exp = Expression.Block(
                    new[] { valueVariable }, 
                    exps);
            }
            else if (typeof(WithOrderDetail) == parameterType)
            {
                valueType = typeof(WAQSWorkshopServer.OrderDetail);
                var valueVariable = Expression.Parameter(valueType);
                var exps = new List<Expression>() { Expression.Assign(valueVariable, entityExpression = Expression.MakeMemberAccess(parameter, parameterType.GetProperty("OrderDetail"))) };
                if (withSpecificationsProperties.Contains("Amount"))
                    exps.Add(Expression.Assign(Expression.MakeMemberAccess(valueVariable, prop = typeof(WAQSWorkshopServer.OrderDetail).GetProperty("Amount")), Expression.MakeMemberAccess(parameter, prop))); 
                if (withSpecificationsProperties.Contains("ProductFullName"))
                    exps.Add(Expression.Assign(Expression.MakeMemberAccess(valueVariable, prop = typeof(WAQSWorkshopServer.OrderDetail).GetProperty("ProductFullName")), Expression.MakeMemberAccess(parameter, prop))); 
                exps.Add(valueVariable);
                exp = Expression.Block(
                    new[] { valueVariable }, 
                    exps);
            }
            else if (typeof(WithOrder) == parameterType)
            {
                valueType = typeof(WAQSWorkshopServer.Order);
                var valueVariable = Expression.Parameter(valueType);
                var exps = new List<Expression>() { Expression.Assign(valueVariable, entityExpression = Expression.MakeMemberAccess(parameter, parameterType.GetProperty("Order"))) };
                if (withSpecificationsProperties.Contains("Total"))
                    exps.Add(Expression.Assign(Expression.MakeMemberAccess(valueVariable, prop = typeof(WAQSWorkshopServer.Order).GetProperty("Total")), Expression.MakeMemberAccess(parameter, prop))); 
                exps.Add(valueVariable);
                exp = Expression.Block(
                    new[] { valueVariable }, 
                    exps);
            }
            else if (typeof(WithProduct) == parameterType)
            {
                valueType = typeof(WAQSWorkshopServer.Product);
                var valueVariable = Expression.Parameter(valueType);
                var exps = new List<Expression>() { Expression.Assign(valueVariable, entityExpression = Expression.MakeMemberAccess(parameter, parameterType.GetProperty("Product"))) };
                if (withSpecificationsProperties.Contains("FullName"))
                    exps.Add(Expression.Assign(Expression.MakeMemberAccess(valueVariable, prop = typeof(WAQSWorkshopServer.Product).GetProperty("FullName")), Expression.MakeMemberAccess(parameter, prop))); 
                exps.Add(valueVariable);
                exp = Expression.Block(
                    new[] { valueVariable }, 
                    exps);
            }
            else if (typeof(WithCategory) == parameterType)
            {
                valueType = typeof(WAQSWorkshopServer.Category);
                var valueVariable = Expression.Parameter(valueType);
                var exps = new List<Expression>() { Expression.Assign(valueVariable, entityExpression = Expression.MakeMemberAccess(parameter, parameterType.GetProperty("Category"))) };
                exps.Add(valueVariable);
                exp = Expression.Block(
                    new[] { valueVariable }, 
                    exps);
            }
            if (exp == null)
                return null;
            return Expression.Lambda(
                        Expression.Condition(
                            Expression.Equal(entityExpression, Expression.Constant(null, parameterType)), 
                            Expression.Constant(null, valueType),
                            exp),
                        parameter);
        }
        
        public IEnumerable<Type> GetEntityOrComplexTypes()
        {
            yield return typeof(WAQSWorkshopServer.Customer);
            yield return typeof(WAQSWorkshopServer.Employee);
            yield return typeof(WAQSWorkshopServer.InvoiceDetail);
            yield return typeof(WAQSWorkshopServer.Invoice);
            yield return typeof(WAQSWorkshopServer.OrderDetail);
            yield return typeof(WAQSWorkshopServer.Order);
            yield return typeof(WAQSWorkshopServer.Product);
            yield return typeof(WAQSWorkshopServer.Category);
        }
     
        public IEnumerable<PropertyInfo> GetScalarAndComplexProperties(Type type)
        {
            return GetScalarProperties(type).Union(GetComplexProperties(type));
        }
     
        public IEnumerable<PropertyInfo> GetScalarProperties(Type type)
        {
            if (typeof(WAQSWorkshopServer.Customer).IsAssignableFrom(type))
            {
                yield return typeof(WAQSWorkshopServer.Customer).GetProperty("Id");
                yield return typeof(WAQSWorkshopServer.Customer).GetProperty("CompanyName");
                yield return typeof(WAQSWorkshopServer.Customer).GetProperty("ContactName");
                yield return typeof(WAQSWorkshopServer.Customer).GetProperty("ContactTitle");
                yield return typeof(WAQSWorkshopServer.Customer).GetProperty("Address");
                yield return typeof(WAQSWorkshopServer.Customer).GetProperty("City");
                yield return typeof(WAQSWorkshopServer.Customer).GetProperty("Region");
                yield return typeof(WAQSWorkshopServer.Customer).GetProperty("PostalCode");
                yield return typeof(WAQSWorkshopServer.Customer).GetProperty("Country");
                yield return typeof(WAQSWorkshopServer.Customer).GetProperty("Phone");
                yield return typeof(WAQSWorkshopServer.Customer).GetProperty("Fax");
                yield return typeof(WAQSWorkshopServer.Customer).GetProperty("IsVIP");
            }
            if (typeof(WAQSWorkshopServer.Employee).IsAssignableFrom(type))
            {
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("Id");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("LastName");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("FirstName");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("Title");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("TitleOfCourtesy");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("BirthDate");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("HireDate");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("Address");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("City");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("Region");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("PostalCode");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("Country");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("HomePhone");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("Extension");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("Photo");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("Notes");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("ReportsTo");
                yield return typeof(WAQSWorkshopServer.Employee).GetProperty("PhotoPath");
            }
            if (typeof(WAQSWorkshopServer.InvoiceDetail).IsAssignableFrom(type))
            {
                yield return typeof(WAQSWorkshopServer.InvoiceDetail).GetProperty("OrderDetailId");
                yield return typeof(WAQSWorkshopServer.InvoiceDetail).GetProperty("InvoiceId");
                yield return typeof(WAQSWorkshopServer.InvoiceDetail).GetProperty("UnitPrice");
                yield return typeof(WAQSWorkshopServer.InvoiceDetail).GetProperty("Quantity");
                yield return typeof(WAQSWorkshopServer.InvoiceDetail).GetProperty("Discount");
                yield return typeof(WAQSWorkshopServer.InvoiceDetail).GetProperty("Amount");
            }
            if (typeof(WAQSWorkshopServer.Invoice).IsAssignableFrom(type))
            {
                yield return typeof(WAQSWorkshopServer.Invoice).GetProperty("OrderId");
                yield return typeof(WAQSWorkshopServer.Invoice).GetProperty("CustomerId");
                yield return typeof(WAQSWorkshopServer.Invoice).GetProperty("CustomerCompanyName");
                yield return typeof(WAQSWorkshopServer.Invoice).GetProperty("CustomerContactName");
                yield return typeof(WAQSWorkshopServer.Invoice).GetProperty("Total");
                yield return typeof(WAQSWorkshopServer.Invoice).GetProperty("Dicount");
                yield return typeof(WAQSWorkshopServer.Invoice).GetProperty("Paid");
            }
            if (typeof(WAQSWorkshopServer.OrderDetail).IsAssignableFrom(type))
            {
                yield return typeof(WAQSWorkshopServer.OrderDetail).GetProperty("Id");
                yield return typeof(WAQSWorkshopServer.OrderDetail).GetProperty("OrderId");
                yield return typeof(WAQSWorkshopServer.OrderDetail).GetProperty("ProductId");
                yield return typeof(WAQSWorkshopServer.OrderDetail).GetProperty("UnitPrice");
                yield return typeof(WAQSWorkshopServer.OrderDetail).GetProperty("Quantity");
                yield return typeof(WAQSWorkshopServer.OrderDetail).GetProperty("Discount");
            }
            if (typeof(WAQSWorkshopServer.Order).IsAssignableFrom(type))
            {
                yield return typeof(WAQSWorkshopServer.Order).GetProperty("Id");
                yield return typeof(WAQSWorkshopServer.Order).GetProperty("CustomerId");
                yield return typeof(WAQSWorkshopServer.Order).GetProperty("EmployeeId");
                yield return typeof(WAQSWorkshopServer.Order).GetProperty("OrderDate");
                yield return typeof(WAQSWorkshopServer.Order).GetProperty("RequiredDate");
                yield return typeof(WAQSWorkshopServer.Order).GetProperty("ShippedDate");
                yield return typeof(WAQSWorkshopServer.Order).GetProperty("ShipVia");
                yield return typeof(WAQSWorkshopServer.Order).GetProperty("Freight");
                yield return typeof(WAQSWorkshopServer.Order).GetProperty("ShipName");
                yield return typeof(WAQSWorkshopServer.Order).GetProperty("ShipAddress");
                yield return typeof(WAQSWorkshopServer.Order).GetProperty("ShipCity");
                yield return typeof(WAQSWorkshopServer.Order).GetProperty("ShipRegion");
                yield return typeof(WAQSWorkshopServer.Order).GetProperty("ShipPostalCode");
                yield return typeof(WAQSWorkshopServer.Order).GetProperty("ShipCountry");
            }
            if (typeof(WAQSWorkshopServer.Product).IsAssignableFrom(type))
            {
                yield return typeof(WAQSWorkshopServer.Product).GetProperty("Id");
                yield return typeof(WAQSWorkshopServer.Product).GetProperty("Name");
                yield return typeof(WAQSWorkshopServer.Product).GetProperty("SupplierId");
                yield return typeof(WAQSWorkshopServer.Product).GetProperty("CategoryId");
                yield return typeof(WAQSWorkshopServer.Product).GetProperty("QuantityPerUnit");
                yield return typeof(WAQSWorkshopServer.Product).GetProperty("UnitPrice");
                yield return typeof(WAQSWorkshopServer.Product).GetProperty("Discontinued");
            }
            if (typeof(WAQSWorkshopServer.Category).IsAssignableFrom(type))
            {
                yield return typeof(WAQSWorkshopServer.Category).GetProperty("Id");
                yield return typeof(WAQSWorkshopServer.Category).GetProperty("Name");
                yield return typeof(WAQSWorkshopServer.Category).GetProperty("Description");
                yield return typeof(WAQSWorkshopServer.Category).GetProperty("Picture");
            }
    		
            yield break;
        }
     
        public IEnumerable<PropertyInfo> GetComplexProperties(Type type)
        {
    	
            yield break;	
        }
     
        public IEnumerable<NavigationProperty> GetNavigationProperties(Type type)
        {
            if (typeof(WAQSWorkshopServer.Customer).IsAssignableFrom(type))
            {
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Customer).GetProperty("Invoices"), Multiplicity.Many);
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Customer).GetProperty("Orders"), Multiplicity.Many);
            }
            if (typeof(WAQSWorkshopServer.Employee).IsAssignableFrom(type))
            {
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Employee).GetProperty("Employees1"), Multiplicity.Many);
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Employee).GetProperty("Employee1"), Multiplicity.ZeroOne);
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Employee).GetProperty("Orders"), Multiplicity.Many);
            }
            if (typeof(WAQSWorkshopServer.InvoiceDetail).IsAssignableFrom(type))
            {
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.InvoiceDetail).GetProperty("Invoice"), Multiplicity.One);
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.InvoiceDetail).GetProperty("OrderDetail"), Multiplicity.One);
            }
            if (typeof(WAQSWorkshopServer.Invoice).IsAssignableFrom(type))
            {
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Invoice).GetProperty("Customer"), Multiplicity.ZeroOne);
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Invoice).GetProperty("InvoiceDetails"), Multiplicity.Many);
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Invoice).GetProperty("Order"), Multiplicity.One);
            }
            if (typeof(WAQSWorkshopServer.OrderDetail).IsAssignableFrom(type))
            {
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.OrderDetail).GetProperty("InvoiceDetail"), Multiplicity.ZeroOne);
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.OrderDetail).GetProperty("Order"), Multiplicity.One);
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.OrderDetail).GetProperty("Product"), Multiplicity.One);
            }
            if (typeof(WAQSWorkshopServer.Order).IsAssignableFrom(type))
            {
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Order).GetProperty("Customer"), Multiplicity.ZeroOne);
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Order).GetProperty("Employee"), Multiplicity.ZeroOne);
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Order).GetProperty("Invoice"), Multiplicity.ZeroOne);
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Order).GetProperty("OrderDetails"), Multiplicity.Many);
            }
            if (typeof(WAQSWorkshopServer.Product).IsAssignableFrom(type))
            {
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Product).GetProperty("OrderDetails"), Multiplicity.Many);
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Product).GetProperty("Category"), Multiplicity.ZeroOne);
            }
            if (typeof(WAQSWorkshopServer.Category).IsAssignableFrom(type))
            {
                yield return new NavigationProperty(typeof(WAQSWorkshopServer.Category).GetProperty("Products"), Multiplicity.Many);
            }
            yield break;
        }
    
        public Expression GetSpecificationLINQExpression(PropertyInfo property, Type type = null)
        {
            if (type == null)
                type = property.DeclaringType;
            var lambdaParamater = Expression.Parameter(type);
            return Expression.Lambda(_context.GetExpression(type, property.Name, lambdaParamater), lambdaParamater);
        }
    
        public Expression GetSpecificationLINQExpression(MethodInfo method, List<Expression> arguments, Type type = null)
        {
            if (type == null)
                type = method.DeclaringType;
            var lambdaParamater = Expression.Parameter(type);
            return Expression.Lambda(_context.GetExpression(type, method.Name, arguments, lambdaParamater), lambdaParamater);
        }
    
        public IEnumerable<IEnumerable<PropertyInfo>> GetDependentProperties(PropertyInfo property)
        {
            if (typeof(WAQSWorkshopServer.Customer).IsAssignableFrom(property.DeclaringType))
            {
                switch (property.Name)
                {
                    case "TotalSpent":
    //					var dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.Customer).GetProperty("Orders") });
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
    //					dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.Customer).GetProperty("Orders") });
    //					if (_context.OrderDALSpecifications.TotalExpression == null) 
    //						dependentProperties = (from dp in dependentProperties
    //											   from dp2 in GetDependentProperties(typeof(WAQSWorkshopServer.Order).GetProperty("Total"))
    //											   select dp.Union(dp2)).ToList();
    //					else
    //						dependentProperties = dependentProperties.Select(dp => dp.Union(new PropertyInfo[] { typeof(WAQSWorkshopServer.Order).GetProperty("Total") })).ToList();
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
                        yield break;
                    case "FullName":
    //					dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.Customer).GetProperty("CompanyName") });
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
    //					dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.Customer).GetProperty("ContactName") });
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
                        yield break;
                }
            }
            if (typeof(WAQSWorkshopServer.Employee).IsAssignableFrom(property.DeclaringType))
            {
                switch (property.Name)
                {
                    case "FullName":
    //					var dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.Employee).GetProperty("FirstName") });
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
    //					dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.Employee).GetProperty("LastName") });
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
                        yield break;
                }
            }
            if (typeof(WAQSWorkshopServer.OrderDetail).IsAssignableFrom(property.DeclaringType))
            {
                switch (property.Name)
                {
                    case "Amount":
    //					var dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.OrderDetail).GetProperty("UnitPrice") });
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
    //					dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.OrderDetail).GetProperty("Quantity") });
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
    //					dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.OrderDetail).GetProperty("Discount") });
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
                        yield break;
                    case "ProductFullName":
    //					dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.OrderDetail).GetProperty("Product") });
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
    //					dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.OrderDetail).GetProperty("Product") });
    //					if (_context.ProductDALSpecifications.FullNameExpression == null) 
    //						dependentProperties = (from dp in dependentProperties
    //											   from dp2 in GetDependentProperties(typeof(WAQSWorkshopServer.Product).GetProperty("FullName"))
    //											   select dp.Union(dp2)).ToList();
    //					else
    //						dependentProperties = dependentProperties.Select(dp => dp.Union(new PropertyInfo[] { typeof(WAQSWorkshopServer.Product).GetProperty("FullName") })).ToList();
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
                        yield break;
                }
            }
            if (typeof(WAQSWorkshopServer.Order).IsAssignableFrom(property.DeclaringType))
            {
                switch (property.Name)
                {
                    case "Total":
    //					var dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.Order).GetProperty("OrderDetails") });
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
    //					dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.Order).GetProperty("OrderDetails") });
    //					if (_context.OrderDetailDALSpecifications.AmountExpression == null) 
    //						dependentProperties = (from dp in dependentProperties
    //											   from dp2 in GetDependentProperties(typeof(WAQSWorkshopServer.OrderDetail).GetProperty("Amount"))
    //											   select dp.Union(dp2)).ToList();
    //					else
    //						dependentProperties = dependentProperties.Select(dp => dp.Union(new PropertyInfo[] { typeof(WAQSWorkshopServer.OrderDetail).GetProperty("Amount") })).ToList();
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
                        yield break;
                }
            }
            if (typeof(WAQSWorkshopServer.Product).IsAssignableFrom(property.DeclaringType))
            {
                switch (property.Name)
                {
                    case "FullName":
    //					var dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.Product).GetProperty("Name") });
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
    //					dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.Product).GetProperty("Category") });
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
    //					dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WAQSWorkshopServer.Product).GetProperty("Category") });
    //					dependentProperties = dependentProperties.Select(dp => dp.Union(new PropertyInfo[] { typeof(WAQSWorkshopServer.Category).GetProperty("Name") })).ToList();
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
                        yield break;
                }
            }
            yield break;
        }
    
        public IEnumerable<IEnumerable<PropertyInfo>> GetDependentProperties(MethodInfo method)
        {
            if (method.GetParameters().Length == 0)
                return new IEnumerable<PropertyInfo>[0];
            Type firstParameterType = method.GetParameters()[0].ParameterType;
            if (firstParameterType.IsAssignableFrom(typeof(WAQSWorkshopServer.Customer)))
            {
                switch (method.Name)
                {
                    case "GetTotalSpent":
                        return GetDependentProperties(firstParameterType.GetProperty("TotalSpent"));
                    case "GetFullName":
                        return GetDependentProperties(firstParameterType.GetProperty("FullName"));
                }
            }
            if (firstParameterType.IsAssignableFrom(typeof(WAQSWorkshopServer.Employee)))
            {
                switch (method.Name)
                {
                    case "GetFullName":
                        return GetDependentProperties(firstParameterType.GetProperty("FullName"));
                }
            }
            if (firstParameterType.IsAssignableFrom(typeof(WAQSWorkshopServer.OrderDetail)))
            {
                switch (method.Name)
                {
                    case "GetAmount":
                        return GetDependentProperties(firstParameterType.GetProperty("Amount"));
                    case "GetProductFullName":
                        return GetDependentProperties(firstParameterType.GetProperty("ProductFullName"));
                }
            }
            if (firstParameterType.IsAssignableFrom(typeof(WAQSWorkshopServer.Order)))
            {
                switch (method.Name)
                {
                    case "GetTotal":
                        return GetDependentProperties(firstParameterType.GetProperty("Total"));
                }
            }
            if (firstParameterType.IsAssignableFrom(typeof(WAQSWorkshopServer.Product)))
            {
                switch (method.Name)
                {
                    case "GetFullName":
                        return GetDependentProperties(firstParameterType.GetProperty("FullName"));
                }
            }
            return new IEnumerable<PropertyInfo>[0];
        }
    
        PropertyInfo ISerializableExpressionConverter.GetProperty(Type type, string propertyName)
        {
            var value = type.GetProperty(propertyName);
            if (value != null)
                return value;
            if (type == typeof(Customer))
                return typeof (WithCustomer).GetProperty(propertyName);
            if (type == typeof(Employee))
                return typeof (WithEmployee).GetProperty(propertyName);
            if (type == typeof(InvoiceDetail))
                return typeof (WithInvoiceDetail).GetProperty(propertyName);
            if (type == typeof(Invoice))
                return typeof (WithInvoice).GetProperty(propertyName);
            if (type == typeof(OrderDetail))
                return typeof (WithOrderDetail).GetProperty(propertyName);
            if (type == typeof(Order))
                return typeof (WithOrder).GetProperty(propertyName);
            if (type == typeof(Product))
                return typeof (WithProduct).GetProperty(propertyName);
            if (type == typeof(Category))
                return typeof (WithCategory).GetProperty(propertyName);
            throw new InvalidOperationException();
        }
    }
}
