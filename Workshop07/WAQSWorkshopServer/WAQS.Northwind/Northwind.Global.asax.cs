//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using Microsoft.Practices.ServiceLocation;
using Microsoft.Practices.Unity;
using Edm_EntityMappingGeneratedViews;
using WAQS.Common;
using WAQS.DAL;
using WAQS.DAL.Interfaces;
using WAQS.Service;
using WAQS.Service.Interfaces;
using WAQS.Service.L2E;
using WAQSWorkshopServer.DAL;
using WAQSWorkshopServer.DAL.Interfaces;
using WAQSWorkshopServer.Service;
using WAQSWorkshopServer.Service.Interfaces;
using WAQSWorkshopServer.WCFService;

namespace WAQSWorkshopServer
{
    partial class Global
    {
    	public static void NorthwindApplicationStart(IUnityContainer unityContainer)
    	{
    		using (IDataContext context = new NorthwindEntities())
    		{
    			context.LoadMetadata();
    		}
    		NorthwindNorthwindEntitiesViewsForBaseEntitySets.ComputeMappingHashValue();
    		IUnityContainer childUnityContainer = unityContainer.CreateChildContainer();
    		childUnityContainer.RegisterType<INorthwindEntities, NorthwindEntities>(new InjectionFactory(c => new NorthwindEntities()));
    		var serviceParameters = new List<object>() { (Func<INorthwindEntities>)(() => childUnityContainer.Resolve<INorthwindEntities>()), (Func<INorthwindEntities, ISerializableExpressionProvider>)(context => new SerializableExpressionProvider((serializableExpression, withSpecificationsProperties) => SerializableExpressionToL2EExpressionConverter.ToL2EExpression(serializableExpression, withSpecificationsProperties, context, new WAQSWorkshopServer.Service.L2E.NorthwindSerializableExpressionConverter(context, new NorthwindEntitiesFilters(context))), obj => SerializableExpressionToL2EExpressionConverter.Convert(obj), t => SerializableExpressionToL2EExpressionConverter.GetOriginalType(t))), (Func<NorthwindServiceL2E>)(() => (NorthwindServiceL2E)childUnityContainer.Resolve<INorthwindService>()) };
    		DefineNorthwindServiceParameters(childUnityContainer, serviceParameters);
    		unityContainer.RegisterType<INorthwindService, NorthwindServiceL2E>(new InjectionConstructor(serviceParameters.ToArray()));
    		unityContainer.RegisterInstance(typeof(NorthwindWCFService).FullName, childUnityContainer);
    	}
    
    	static partial void DefineNorthwindServiceParameters(IUnityContainer unityContainer, List<object> parameters);
    }
}
