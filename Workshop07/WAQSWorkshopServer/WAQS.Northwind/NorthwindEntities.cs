//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using WAQS.Common;
using WAQS.Specifications;
using WAQS.DAL;
using WAQS.Entities;
using WAQSWorkshopServer.DAL.Interfaces;
using WAQS.DAL.Interfaces;
using WAQS.DAL.Interfaces.L2E;
using System.Threading.Tasks;

namespace WAQSWorkshopServer.DAL
{
    public partial class NorthwindEntities : CustomizableObjectContext, INorthwindEntities
    {
        public const string ConnectionString = "name=NorthwindEntities";
        public const string ContainerName = "NorthwindEntities";
    
        #region Constructors
    
        public NorthwindEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
            OnInitialize();
        }
        partial void OnInitialize();
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as WAQS.Entities.IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<WAQSWorkshopServer.Customer> Customers
        {
            get { return _customers  ?? (_customers = CreateObjectSet<WAQSWorkshopServer.Customer>("Customers")); }
        }
        private ObjectSet<WAQSWorkshopServer.Customer> _customers;
        IEntitySet<WAQSWorkshopServer.Customer> INorthwindEntities.Customers
        {
            get { return _customersEntitySet ?? (_customersEntitySet = new EntitySet<WAQSWorkshopServer.Customer>(Customers, TransformExpression));}
        }
        private EntitySet<WAQSWorkshopServer.Customer> _customersEntitySet;
        Expression<Func<IQueryable<WAQSWorkshopServer.Customer>>> INorthwindEntities.CustomersExpression
        {
            get
            {
                var context = this;
                context.Customers.MergeOption = EFMergeOption;
                return () => context.Customers;
            }
        }
    
        public ObjectSet<WAQSWorkshopServer.Employee> Employees
        {
            get { return _employees  ?? (_employees = CreateObjectSet<WAQSWorkshopServer.Employee>("Employees")); }
        }
        private ObjectSet<WAQSWorkshopServer.Employee> _employees;
        IEntitySet<WAQSWorkshopServer.Employee> INorthwindEntities.Employees
        {
            get { return _employeesEntitySet ?? (_employeesEntitySet = new EntitySet<WAQSWorkshopServer.Employee>(Employees, TransformExpression));}
        }
        private EntitySet<WAQSWorkshopServer.Employee> _employeesEntitySet;
        Expression<Func<IQueryable<WAQSWorkshopServer.Employee>>> INorthwindEntities.EmployeesExpression
        {
            get
            {
                var context = this;
                context.Employees.MergeOption = EFMergeOption;
                return () => context.Employees;
            }
        }
    
        public ObjectSet<WAQSWorkshopServer.InvoiceDetail> InvoiceDetails
        {
            get { return _invoiceDetails  ?? (_invoiceDetails = CreateObjectSet<WAQSWorkshopServer.InvoiceDetail>("InvoiceDetails")); }
        }
        private ObjectSet<WAQSWorkshopServer.InvoiceDetail> _invoiceDetails;
        IEntitySet<WAQSWorkshopServer.InvoiceDetail> INorthwindEntities.InvoiceDetails
        {
            get { return _invoiceDetailsEntitySet ?? (_invoiceDetailsEntitySet = new EntitySet<WAQSWorkshopServer.InvoiceDetail>(InvoiceDetails, TransformExpression));}
        }
        private EntitySet<WAQSWorkshopServer.InvoiceDetail> _invoiceDetailsEntitySet;
        Expression<Func<IQueryable<WAQSWorkshopServer.InvoiceDetail>>> INorthwindEntities.InvoiceDetailsExpression
        {
            get
            {
                var context = this;
                context.InvoiceDetails.MergeOption = EFMergeOption;
                return () => context.InvoiceDetails;
            }
        }
    
        public ObjectSet<WAQSWorkshopServer.Invoice> Invoices
        {
            get { return _invoices  ?? (_invoices = CreateObjectSet<WAQSWorkshopServer.Invoice>("Invoices")); }
        }
        private ObjectSet<WAQSWorkshopServer.Invoice> _invoices;
        IEntitySet<WAQSWorkshopServer.Invoice> INorthwindEntities.Invoices
        {
            get { return _invoicesEntitySet ?? (_invoicesEntitySet = new EntitySet<WAQSWorkshopServer.Invoice>(Invoices, TransformExpression));}
        }
        private EntitySet<WAQSWorkshopServer.Invoice> _invoicesEntitySet;
        Expression<Func<IQueryable<WAQSWorkshopServer.Invoice>>> INorthwindEntities.InvoicesExpression
        {
            get
            {
                var context = this;
                context.Invoices.MergeOption = EFMergeOption;
                return () => context.Invoices;
            }
        }
    
        public ObjectSet<WAQSWorkshopServer.OrderDetail> OrderDetails
        {
            get { return _orderDetails  ?? (_orderDetails = CreateObjectSet<WAQSWorkshopServer.OrderDetail>("OrderDetails")); }
        }
        private ObjectSet<WAQSWorkshopServer.OrderDetail> _orderDetails;
        IEntitySet<WAQSWorkshopServer.OrderDetail> INorthwindEntities.OrderDetails
        {
            get { return _orderDetailsEntitySet ?? (_orderDetailsEntitySet = new EntitySet<WAQSWorkshopServer.OrderDetail>(OrderDetails, TransformExpression));}
        }
        private EntitySet<WAQSWorkshopServer.OrderDetail> _orderDetailsEntitySet;
        Expression<Func<IQueryable<WAQSWorkshopServer.OrderDetail>>> INorthwindEntities.OrderDetailsExpression
        {
            get
            {
                var context = this;
                context.OrderDetails.MergeOption = EFMergeOption;
                return () => context.OrderDetails;
            }
        }
    
        public ObjectSet<WAQSWorkshopServer.Order> Orders
        {
            get { return _orders  ?? (_orders = CreateObjectSet<WAQSWorkshopServer.Order>("Orders")); }
        }
        private ObjectSet<WAQSWorkshopServer.Order> _orders;
        IEntitySet<WAQSWorkshopServer.Order> INorthwindEntities.Orders
        {
            get { return _ordersEntitySet ?? (_ordersEntitySet = new EntitySet<WAQSWorkshopServer.Order>(Orders, TransformExpression));}
        }
        private EntitySet<WAQSWorkshopServer.Order> _ordersEntitySet;
        Expression<Func<IQueryable<WAQSWorkshopServer.Order>>> INorthwindEntities.OrdersExpression
        {
            get
            {
                var context = this;
                context.Orders.MergeOption = EFMergeOption;
                return () => context.Orders;
            }
        }
    
        public ObjectSet<WAQSWorkshopServer.Product> Products
        {
            get { return _products  ?? (_products = CreateObjectSet<WAQSWorkshopServer.Product>("Products")); }
        }
        private ObjectSet<WAQSWorkshopServer.Product> _products;
        IEntitySet<WAQSWorkshopServer.Product> INorthwindEntities.Products
        {
            get { return _productsEntitySet ?? (_productsEntitySet = new EntitySet<WAQSWorkshopServer.Product>(Products, TransformExpression));}
        }
        private EntitySet<WAQSWorkshopServer.Product> _productsEntitySet;
        Expression<Func<IQueryable<WAQSWorkshopServer.Product>>> INorthwindEntities.ProductsExpression
        {
            get
            {
                var context = this;
                context.Products.MergeOption = EFMergeOption;
                return () => context.Products;
            }
        }
    
        public ObjectSet<WAQSWorkshopServer.Category> Categories
        {
            get { return _categories  ?? (_categories = CreateObjectSet<WAQSWorkshopServer.Category>("Categories")); }
        }
        private ObjectSet<WAQSWorkshopServer.Category> _categories;
        IEntitySet<WAQSWorkshopServer.Category> INorthwindEntities.Categories
        {
            get { return _categoriesEntitySet ?? (_categoriesEntitySet = new EntitySet<WAQSWorkshopServer.Category>(Categories, TransformExpression));}
        }
        private EntitySet<WAQSWorkshopServer.Category> _categoriesEntitySet;
        Expression<Func<IQueryable<WAQSWorkshopServer.Category>>> INorthwindEntities.CategoriesExpression
        {
            get
            {
                var context = this;
                context.Categories.MergeOption = EFMergeOption;
                return () => context.Categories;
            }
        }

        #endregion

    
        private WAQS.DAL.Interfaces.MergeOption _defaultMergeOption = WAQS.DAL.Interfaces.MergeOption.NoTracking;
        public WAQS.DAL.Interfaces.MergeOption DefaultMergeOption
        {
            get { return _defaultMergeOption; }
            set { _defaultMergeOption = value; }
        }
        private System.Data.Entity.Core.Objects.MergeOption EFMergeOption
        {
            get { return DefaultMergeOption.ToEFMergeOption(); }
        }
    
        public bool UseWAQSProvider { get; set; }
    
        public Expression TransformExpression(Expression expression)
        {
            if (! UseWAQSProvider)
                return expression;
            Func<Expression, MethodCallExpression, MemberInfo, string, Expression, Expression> transformContinuation = (e, mce, memberInfo, memberName, objectExpression) =>
                {
                    if (memberInfo.DeclaringType == typeof(Customer))
                    {
                        if (memberName == "TotalSpent" && (mce == null || mce.Method.GetParameters().Count() == 0))
                        {
                            var value = (Expression<Func<WAQSWorkshopServer.Customer, double>>)TransformExpression(WAQSWorkshopServer.DAL.CustomerDALSpecifications.GetTotalSpentExpression());
                            var memberAccessExpression = objectExpression as MemberExpression;
                            if (memberAccessExpression != null && memberAccessExpression.Expression is ConstantExpression && memberAccessExpression.Member.MemberType == MemberTypes.Field)
                                return Expression.Constant(value.Compile()(Expression.Lambda<Func<WAQSWorkshopServer.Customer>>(objectExpression).Compile()()), typeof(double));
                            return (value.Body.ReplaceParameter(pe => 
                                {
                                    if (pe == value.Parameters[0])
                                        return TransformExpression(objectExpression);
                                    return pe;
                                }));
                        }
                        if (memberName == "FullName" && (mce == null || mce.Method.GetParameters().Count() == 0))
                        {
                            var value = (Expression<Func<WAQSWorkshopServer.Customer, string>>)TransformExpression(WAQSWorkshopServer.DAL.CustomerDALSpecifications.GetFullNameExpression());
                            var memberAccessExpression = objectExpression as MemberExpression;
                            if (memberAccessExpression != null && memberAccessExpression.Expression is ConstantExpression && memberAccessExpression.Member.MemberType == MemberTypes.Field)
                                return Expression.Constant(value.Compile()(Expression.Lambda<Func<WAQSWorkshopServer.Customer>>(objectExpression).Compile()()), typeof(string));
                            return (value.Body.ReplaceParameter(pe => 
                                {
                                    if (pe == value.Parameters[0])
                                        return TransformExpression(objectExpression);
                                    return pe;
                                }));
                        }
                    }
                    if (memberInfo.DeclaringType == typeof(Employee))
                    {
                        if (memberName == "FullName" && (mce == null || mce.Method.GetParameters().Count() == 0))
                        {
                            var value = (Expression<Func<WAQSWorkshopServer.Employee, string>>)TransformExpression(WAQSWorkshopServer.DAL.EmployeeDALSpecifications.GetFullNameExpression());
                            var memberAccessExpression = objectExpression as MemberExpression;
                            if (memberAccessExpression != null && memberAccessExpression.Expression is ConstantExpression && memberAccessExpression.Member.MemberType == MemberTypes.Field)
                                return Expression.Constant(value.Compile()(Expression.Lambda<Func<WAQSWorkshopServer.Employee>>(objectExpression).Compile()()), typeof(string));
                            return (value.Body.ReplaceParameter(pe => 
                                {
                                    if (pe == value.Parameters[0])
                                        return TransformExpression(objectExpression);
                                    return pe;
                                }));
                        }
                        if (memberName == "AlreadySoldTo" && (mce == null || mce.Method.GetParameters().Count() == 1 && mce.Method.GetParameters()[0].ParameterType == typeof(WAQSWorkshopServer.Customer)))
                        {
                            var value = (Expression<Func<WAQSWorkshopServer.Employee, WAQSWorkshopServer.Customer, bool>>)TransformExpression(WAQSWorkshopServer.DAL.EmployeeDALSpecifications.GetAlreadySoldToExpression());
                            var memberAccessExpression = objectExpression as MemberExpression;
                            if (memberAccessExpression != null && memberAccessExpression.Expression is ConstantExpression && memberAccessExpression.Member.MemberType == MemberTypes.Field)
                                return Expression.Constant(value.Compile()(Expression.Lambda<Func<WAQSWorkshopServer.Employee>>(objectExpression).Compile()(), Expression.Lambda<Func<WAQSWorkshopServer.Customer>>(value.Parameters[0]).Compile()()), typeof(bool));
                            return (value.Body.ReplaceParameter(pe => 
                                {
                                    if (pe == value.Parameters[0])
                                        return TransformExpression(objectExpression);
                                    if (pe == value.Parameters[1])
                                        return TransformExpression(mce.Arguments[0]);
                                    return pe;
                                }));
                        }
                    }
                    if (memberInfo.DeclaringType == typeof(OrderDetail))
                    {
                        if (memberName == "CreateInvoiceDetail" && (mce == null || mce.Method.GetParameters().Count() == 0))
                        {
                            var value = (Expression<Func<WAQSWorkshopServer.OrderDetail, WAQSWorkshopServer.InvoiceDetail>>)TransformExpression(WAQSWorkshopServer.DAL.OrderDetailDALSpecifications.GetCreateInvoiceDetailExpression());
                            var memberAccessExpression = objectExpression as MemberExpression;
                            if (memberAccessExpression != null && memberAccessExpression.Expression is ConstantExpression && memberAccessExpression.Member.MemberType == MemberTypes.Field)
                                return Expression.Constant(value.Compile()(Expression.Lambda<Func<WAQSWorkshopServer.OrderDetail>>(objectExpression).Compile()()), typeof(WAQSWorkshopServer.InvoiceDetail));
                            return (value.Body.ReplaceParameter(pe => 
                                {
                                    if (pe == value.Parameters[0])
                                        return TransformExpression(objectExpression);
                                    return pe;
                                }));
                        }
                        if (memberName == "Amount" && (mce == null || mce.Method.GetParameters().Count() == 0))
                        {
                            var value = (Expression<Func<WAQSWorkshopServer.OrderDetail, double>>)TransformExpression(WAQSWorkshopServer.DAL.OrderDetailDALSpecifications.GetAmountExpression());
                            var memberAccessExpression = objectExpression as MemberExpression;
                            if (memberAccessExpression != null && memberAccessExpression.Expression is ConstantExpression && memberAccessExpression.Member.MemberType == MemberTypes.Field)
                                return Expression.Constant(value.Compile()(Expression.Lambda<Func<WAQSWorkshopServer.OrderDetail>>(objectExpression).Compile()()), typeof(double));
                            return (value.Body.ReplaceParameter(pe => 
                                {
                                    if (pe == value.Parameters[0])
                                        return TransformExpression(objectExpression);
                                    return pe;
                                }));
                        }
                        if (memberName == "ProductFullName" && (mce == null || mce.Method.GetParameters().Count() == 0))
                        {
                            var value = (Expression<Func<WAQSWorkshopServer.OrderDetail, string>>)TransformExpression(WAQSWorkshopServer.DAL.OrderDetailDALSpecifications.GetProductFullNameExpression());
                            var memberAccessExpression = objectExpression as MemberExpression;
                            if (memberAccessExpression != null && memberAccessExpression.Expression is ConstantExpression && memberAccessExpression.Member.MemberType == MemberTypes.Field)
                                return Expression.Constant(value.Compile()(Expression.Lambda<Func<WAQSWorkshopServer.OrderDetail>>(objectExpression).Compile()()), typeof(string));
                            return (value.Body.ReplaceParameter(pe => 
                                {
                                    if (pe == value.Parameters[0])
                                        return TransformExpression(objectExpression);
                                    return pe;
                                }));
                        }
                    }
                    if (memberInfo.DeclaringType == typeof(Order))
                    {
                        if (memberName == "Total" && (mce == null || mce.Method.GetParameters().Count() == 0))
                        {
                            var value = (Expression<Func<WAQSWorkshopServer.Order, double>>)TransformExpression(WAQSWorkshopServer.DAL.OrderDALSpecifications.GetTotalExpression());
                            var memberAccessExpression = objectExpression as MemberExpression;
                            if (memberAccessExpression != null && memberAccessExpression.Expression is ConstantExpression && memberAccessExpression.Member.MemberType == MemberTypes.Field)
                                return Expression.Constant(value.Compile()(Expression.Lambda<Func<WAQSWorkshopServer.Order>>(objectExpression).Compile()()), typeof(double));
                            return (value.Body.ReplaceParameter(pe => 
                                {
                                    if (pe == value.Parameters[0])
                                        return TransformExpression(objectExpression);
                                    return pe;
                                }));
                        }
                        if (memberName == "CustomerCompanyName" && (mce == null || mce.Method.GetParameters().Count() == 0))
                        {
                            var value = (Expression<Func<WAQSWorkshopServer.Order, string>>)TransformExpression(WAQSWorkshopServer.DAL.OrderDALSpecifications.GetCustomerCompanyNameExpression());
                            var memberAccessExpression = objectExpression as MemberExpression;
                            if (memberAccessExpression != null && memberAccessExpression.Expression is ConstantExpression && memberAccessExpression.Member.MemberType == MemberTypes.Field)
                                return Expression.Constant(value.Compile()(Expression.Lambda<Func<WAQSWorkshopServer.Order>>(objectExpression).Compile()()), typeof(string));
                            return (value.Body.ReplaceParameter(pe => 
                                {
                                    if (pe == value.Parameters[0])
                                        return TransformExpression(objectExpression);
                                    return pe;
                                }));
                        }
                        if (memberName == "CustomerContactName" && (mce == null || mce.Method.GetParameters().Count() == 0))
                        {
                            var value = (Expression<Func<WAQSWorkshopServer.Order, string>>)TransformExpression(WAQSWorkshopServer.DAL.OrderDALSpecifications.GetCustomerContactNameExpression());
                            var memberAccessExpression = objectExpression as MemberExpression;
                            if (memberAccessExpression != null && memberAccessExpression.Expression is ConstantExpression && memberAccessExpression.Member.MemberType == MemberTypes.Field)
                                return Expression.Constant(value.Compile()(Expression.Lambda<Func<WAQSWorkshopServer.Order>>(objectExpression).Compile()()), typeof(string));
                            return (value.Body.ReplaceParameter(pe => 
                                {
                                    if (pe == value.Parameters[0])
                                        return TransformExpression(objectExpression);
                                    return pe;
                                }));
                        }
                        if (memberName == "HasInvoice" && (mce == null || mce.Method.GetParameters().Count() == 0))
                        {
                            var value = (Expression<Func<WAQSWorkshopServer.Order, bool>>)TransformExpression(WAQSWorkshopServer.DAL.OrderDALSpecifications.GetHasInvoiceExpression());
                            var memberAccessExpression = objectExpression as MemberExpression;
                            if (memberAccessExpression != null && memberAccessExpression.Expression is ConstantExpression && memberAccessExpression.Member.MemberType == MemberTypes.Field)
                                return Expression.Constant(value.Compile()(Expression.Lambda<Func<WAQSWorkshopServer.Order>>(objectExpression).Compile()()), typeof(bool));
                            return (value.Body.ReplaceParameter(pe => 
                                {
                                    if (pe == value.Parameters[0])
                                        return TransformExpression(objectExpression);
                                    return pe;
                                }));
                        }
                    }
                    if (memberInfo.DeclaringType == typeof(Product))
                    {
                        if (memberName == "FullName" && (mce == null || mce.Method.GetParameters().Count() == 0))
                        {
                            var value = (Expression<Func<WAQSWorkshopServer.Product, string>>)TransformExpression(WAQSWorkshopServer.DAL.ProductDALSpecifications.GetFullNameExpression());
                            var memberAccessExpression = objectExpression as MemberExpression;
                            if (memberAccessExpression != null && memberAccessExpression.Expression is ConstantExpression && memberAccessExpression.Member.MemberType == MemberTypes.Field)
                                return Expression.Constant(value.Compile()(Expression.Lambda<Func<WAQSWorkshopServer.Product>>(objectExpression).Compile()()), typeof(string));
                            return (value.Body.ReplaceParameter(pe => 
                                {
                                    if (pe == value.Parameters[0])
                                        return TransformExpression(objectExpression);
                                    return pe;
                                }));
                        }
                    }
                    return e;
                };
    
            return new ExpressionExtension.ExpressionReplaceRewriter
                {
                    ReplaceMethodCallFunc = mce =>
                        {
                            if (mce.Method.GetCustomAttributes(typeof(IncludeMethodAttribute), false).Any())
                                return mce;
                            MemberInfo memberInfo;
                            var value = WAQSL2EExpressionTransformation.TransformMethodCall(mce, this, TransformExpression);
                            if (value != mce)
                                return value;
                            memberInfo = mce.Method;
                            return transformContinuation(mce, mce, memberInfo, memberInfo.Name, mce.Object);
                        },
                    ReplaceBinaryFunc = be => WAQSL2EExpressionTransformation.TransformBinary(be, this, TransformExpression),
                    ReplaceMemberFunc = me =>
                        {
                            MemberInfo memberInfo;
                            if (!(memberInfo = me.Member).GetCustomAttributes(false).OfType<SpecificationsAttribute>().Any())
                                return WAQSL2EExpressionTransformation.TransformProperty(me, this, TransformExpression) ?? me;
                            return transformContinuation(me, null, memberInfo, memberInfo.Name, me.Expression);
                        }
                }.Visit(expression);
        }
        
        #region CSDL Functions
        [DbFunction("Edm", "CurrentDateTime")]
        public static DateTime GetDbCurrentDateTime()
        {
            return new NorthwindEntities().GetDbDateTime();
        }
        Expression IObjectContext.GetDbDateTimeExpression()
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("GetDbCurrentDateTime"));
        }
        public DateTime GetDbDateTime()
        {
            return ExecuteFunction<Nullable<global::System.DateTime>>("GetDbDateTime").First().Value;
        }
    
        [DbFunction("Edm", "TruncateTime")]
        public static DateTime GetDate(DateTime dateTime)
        {
            return dateTime.Date;
        }
        Expression IObjectContext.GetDateExpression(Expression dateTimeExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("GetDate"), dateTimeExpresion);
        }
    
        [DbFunction("Edm", "AddYears")]
        public static DateTime AddYears(DateTime dateTime, int years)
        {
            return dateTime.AddYears(years);
        }
        Expression IObjectContext.AddYearsExpression(Expression dateTimeExpresion, Expression yearsExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AddYears"), dateTimeExpresion, yearsExpresion);
        }
    
        [DbFunction("Edm", "AddYears")]
        public static DateTimeOffset AddYearsOffset(DateTimeOffset dateTime, int years)
        {
            return dateTime.AddYears(years);
        }
        Expression IObjectContext.AddYearsOffsetExpression(Expression dateTimeOffsetExpresion, Expression yearsExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AddYearsOffset"), dateTimeOffsetExpresion, yearsExpresion);
        }
    
        [DbFunction("Edm", "AddMonths")]
        public static DateTime AddMonths(DateTime dateTime, int months)
        {
            return dateTime.AddMonths(months);
        }
        Expression IObjectContext.AddMonthsExpression(Expression dateTimeExpresion, Expression monthsExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AddMonths"), dateTimeExpresion, monthsExpresion);
        }
    
        [DbFunction("Edm", "AddMonths")]
        public static DateTimeOffset AddMonthsOffset(DateTimeOffset dateTime, int months)
        {
            return dateTime.AddMonths(months);
        }
        Expression IObjectContext.AddMonthsOffsetExpression(Expression dateTimeOffsetExpresion, Expression yearsExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AddMonthsOffset"), dateTimeOffsetExpresion, yearsExpresion);
        }
    
        [DbFunction("Edm", "AddDays")]
        public static DateTime AddDays(DateTime dateTime, int days)
        {
            return dateTime.AddDays(days);
        }
        Expression IObjectContext.AddDaysExpression(Expression dateTimeExpresion, Expression daysExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AddDays"), dateTimeExpresion, daysExpresion);
        }
    
        [DbFunction("Edm", "AddDays")]
        public static DateTimeOffset AddDaysOffset(DateTimeOffset dateTime, int days)
        {
            return dateTime.AddDays(days);
        }
        Expression IObjectContext.AddDaysOffsetExpression(Expression dateTimeOffsetExpresion, Expression yearsExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AddDaysOffset"), dateTimeOffsetExpresion, yearsExpresion);
        }
    
        [DbFunction("Edm", "DiffDays")]
        public static int DiffDays(DateTime dateTime1, DateTime dateTime2)
        {
            return (dateTime1 - dateTime2).Days;
        }
        Expression IObjectContext.DiffDaysExpression(Expression dateTime1Expresion, Expression dateTime2Expresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("DiffDays"), dateTime1Expresion, dateTime2Expresion);
        }
    
        [DbFunction("Edm", "DiffDays")]
        public static int DiffDaysOffset(DateTimeOffset dateTimeOffset1, DateTimeOffset dateTimeOffset2)
        {
            return (dateTimeOffset1 - dateTimeOffset2).Days;
        }
        Expression IObjectContext.DiffDaysOffsetExpression(Expression dateTimeOffset1Expresion, Expression dateTimeOffset2Expresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("DiffDaysOffset"), dateTimeOffset1Expresion, dateTimeOffset2Expresion);
        }
    
        [DbFunction("Edm", "AddHours")]
        public static DateTime AddHours(DateTime dateTime, int hours)
        {
            return dateTime.AddHours(hours);
        }
        Expression IObjectContext.AddHoursExpression(Expression dateTimeExpresion, Expression hoursExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AddHours"), dateTimeExpresion, hoursExpresion);
        }
    
        [DbFunction("Edm", "AddHours")]
        public static DateTimeOffset AddHoursOffset(DateTimeOffset dateTime, int hours)
        {
            return dateTime.AddHours(hours);
        }
        Expression IObjectContext.AddHoursOffsetExpression(Expression dateTimeOffsetExpresion, Expression yearsExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AddHoursOffset"), dateTimeOffsetExpresion, yearsExpresion);
        }
    
        [DbFunction("Edm", "DiffHours")]
        public static int DiffHours(DateTime dateTime1, DateTime dateTime2)
        {
            return (dateTime1 - dateTime2).Hours;
        }
        Expression IObjectContext.DiffHoursExpression(Expression dateTime1Expresion, Expression dateTime2Expresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("DiffHours"), dateTime1Expresion, dateTime2Expresion);
        }
    
        [DbFunction("Edm", "DiffHours")]
        public static int DiffHoursOffset(DateTimeOffset dateTimeOffset1, DateTimeOffset dateTimeOffset2)
        {
            return (dateTimeOffset1 - dateTimeOffset2).Hours;
        }
        Expression IObjectContext.DiffHoursOffsetExpression(Expression dateTimeOffset1Expresion, Expression dateTimeOffset2Expresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("DiffHoursOffset"), dateTimeOffset1Expresion, dateTimeOffset2Expresion);
        }
    
        [DbFunction("Edm", "AddMinutes")]
        public static DateTime AddMinutes(DateTime dateTime, int minutes)
        {
            return dateTime.AddMinutes(minutes);
        }
        Expression IObjectContext.AddMinutesExpression(Expression dateTimeExpresion, Expression minutesExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AddMinutes"), dateTimeExpresion, minutesExpresion);
        }
    
        [DbFunction("Edm", "AddMinutes")]
        public static DateTimeOffset AddMinutesOffset(DateTimeOffset dateTime, int minutes)
        {
            return dateTime.AddMinutes(minutes);
        }
        Expression IObjectContext.AddMinutesOffsetExpression(Expression dateTimeOffsetExpresion, Expression yearsExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AddMinutesOffset"), dateTimeOffsetExpresion, yearsExpresion);
        }
    
        [DbFunction("Edm", "DiffMinutes")]
        public static int DiffMinutes(DateTime dateTime1, DateTime dateTime2)
        {
            return (dateTime1 - dateTime2).Minutes;
        }
        Expression IObjectContext.DiffMinutesExpression(Expression dateTime1Expresion, Expression dateTime2Expresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("DiffMinutes"), dateTime1Expresion, dateTime2Expresion);
        }
        
        [DbFunction("Edm", "DiffMinutes")]
        public static int DiffMinutesOffset(DateTimeOffset dateTimeOffset1, DateTimeOffset dateTimeOffset2)
        {
            return (dateTimeOffset1 - dateTimeOffset2).Minutes;
        }
        Expression IObjectContext.DiffMinutesOffsetExpression(Expression dateTimeOffset1Expresion, Expression dateTimeOffset2Expresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("DiffMinutesOffset"), dateTimeOffset1Expresion, dateTimeOffset2Expresion);
        }
    
        [DbFunction("Edm", "AddSeconds")]
        public static DateTime AddSeconds(DateTime dateTime, int seconds)
        {
            return dateTime.AddSeconds(seconds);
        }
        Expression IObjectContext.AddSecondsExpression(Expression dateTimeExpresion, Expression secondsExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AddSeconds"), dateTimeExpresion, secondsExpresion);
        }
        
        [DbFunction("Edm", "AddSeconds")]
        public static DateTimeOffset AddSecondsOffset(DateTimeOffset dateTime, int seconds)
        {
            return dateTime.AddSeconds(seconds);
        }
        Expression IObjectContext.AddSecondsOffsetExpression(Expression dateTimeOffsetExpresion, Expression yearsExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AddSecondsOffset"), dateTimeOffsetExpresion, yearsExpresion);
        }
    
        [DbFunction("Edm", "DiffSeconds")]
        public static int DiffSeconds(DateTime dateTime1, DateTime dateTime2)
        {
            return (dateTime1 - dateTime2).Seconds;
        }
        Expression IObjectContext.DiffSecondsExpression(Expression dateTime1Expresion, Expression dateTime2Expresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("DiffSeconds"), dateTime1Expresion, dateTime2Expresion);
        }
    
        [DbFunction("Edm", "DiffSeconds")]
        public static int DiffSecondsOffset(DateTimeOffset dateTimeOffset1, DateTimeOffset dateTimeOffset2)
        {
            return (dateTimeOffset1 - dateTimeOffset2).Seconds;
        }
        Expression IObjectContext.DiffSecondsOffsetExpression(Expression dateTimeOffset1Expresion, Expression dateTimeOffset2Expresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("DiffSecondsOffset"), dateTimeOffset1Expresion, dateTimeOffset2Expresion);
        }
    
        [DbFunction("Edm", "AddMilliseconds")]
        public static DateTime AddMilliseconds(DateTime dateTime, int milliseconds)
        {
            return dateTime.AddMilliseconds(milliseconds);
        }
        Expression IObjectContext.AddMillisecondsExpression(Expression dateTimeExpresion, Expression millisecondsExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AddMilliseconds"), dateTimeExpresion, millisecondsExpresion);
        }
    
        [DbFunction("Edm", "AddMilliseconds")]
        public static DateTimeOffset AddMillisecondsOffset(DateTimeOffset dateTime, int millisecond)
        {
            return dateTime.AddMilliseconds(millisecond);
        }
        Expression IObjectContext.AddMillisecondsOffsetExpression(Expression dateTimeOffsetExpresion, Expression yearsExpresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AddMillisecondsOffset"), dateTimeOffsetExpresion, yearsExpresion);
        }
    
        [DbFunction("Edm", "DiffMilliseconds")]
        public static int DiffMilliseconds(DateTime dateTime1, DateTime dateTime2)
        {
            return (dateTime1 - dateTime2).Milliseconds;
        }
        Expression IObjectContext.DiffMillisecondsExpression(Expression dateTime1Expresion, Expression dateTime2Expresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("DiffMilliseconds"), dateTime1Expresion, dateTime2Expresion);
        }
    
        [DbFunction("Edm", "DiffMilliseconds")]
        public static int DiffMillisecondsOffset(DateTimeOffset dateTimeOffset1, DateTimeOffset dateTimeOffset2)
        {
            return (dateTimeOffset1 - dateTimeOffset2).Milliseconds;
        }
        Expression IObjectContext.DiffMillisecondsOffsetExpression(Expression dateTimeOffset1Expresion, Expression dateTimeOffset2Expresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("DiffMillisecondsOffset"), dateTimeOffset1Expresion, dateTimeOffset2Expresion);
        }
    
        [DbFunction("Edm", "Abs")]
        public static short AbsInt16(short value)
        {
            return Math.Abs(value);
        }
        Expression IObjectContext.AbsInt16Expression(Expression value)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AbsInt16"), value);
        }
    
        [DbFunction("Edm", "Abs")]
        public static int AbsInt32(int value)
        {
            return Math.Abs(value);
        }
        Expression IObjectContext.AbsInt32Expression(Expression value)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AbsInt32"), value);
        }
    
        [DbFunction("Edm", "Abs")]
        public static long AbsInt64(long value)
        {
            return Math.Abs(value);
        }
        Expression IObjectContext.AbsInt64Expression(Expression value)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AbsInt64"), value);
        }
    
        [DbFunction("Edm", "Abs")]
        public static float AbsSingle(float value)
        {
            return Math.Abs(value);
        }
        Expression IObjectContext.AbsSingleExpression(Expression value)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AbsIntSingle"), value);
        }
    
        [DbFunction("Edm", "Abs")]
        public static double AbsDouble(double value)
        {
            return Math.Abs(value);
        }
        Expression IObjectContext.AbsDoubleExpression(Expression value)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AbsDouble"), value);
        }
    
        [DbFunction("Edm", "Abs")]
        public static decimal AbsDecimal(decimal value)
        {
            return Math.Abs(value);
        }
        Expression IObjectContext.AbsDecimalExpression(Expression value)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("AbsDecimal"), value);
        }
    
        [DbFunction("Edm", "Ceiling")]
        public static double CeilingDouble(double value)
        {
            return Math.Ceiling(value);
        }
        Expression IObjectContext.CeilingDoubleExpression(Expression value)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("CeilingDouble"), value);
        }
    
        [DbFunction("Edm", "Ceiling")]
        public static decimal CeilingDecimal(decimal value)
        {
            return Math.Ceiling(value);
        }
        Expression IObjectContext.CeilingDecimalExpression(Expression value)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("CeilingDecimal"), value);
        }
    
        [DbFunction("Edm", "Floor")]
        public static double FloorDouble(double value)
        {
            return Math.Floor(value);
        }
        Expression IObjectContext.FloorDoubleExpression(Expression value)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("FloorDouble"), value);
        }
    
        [DbFunction("Edm", "Floor")]
        public static decimal FloorDecimal(decimal value)
        {
            return Math.Floor(value);
        }
        Expression IObjectContext.FloorDecimalExpression(Expression value)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("FloorDecimal"), value);
        }
    
        [DbFunction("Edm", "Power")]
        public static double PowDouble(double value, double exponent)
        {
            return Math.Pow(value, exponent);
        }
        [DbFunction("Edm", "Power")]
        public static decimal PowDecimal(decimal value, decimal exponent)
        {
            return (decimal)Math.Pow((double)value, (double)exponent);
        }
        Expression IObjectContext.PowDoubleExpression(Expression value, Expression exponent)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("PowDouble"), value, exponent);
        }
    
        [DbFunction("Edm", "Round")]
        public static double RoundAwayFromZeroDouble(double value)
        {
            return Math.Round(value);
        }
        Expression IObjectContext.RoundToEvenDoubleExpression(Expression value)
        {
            return Expression.Condition(
                Expression.AndAlso(
                    Expression.Equal(
                        Expression.Modulo(
                            Expression.Convert(
                                Expression.Call(
                                    typeof(NorthwindEntities).GetMethod("AbsDouble"),
                                    Expression.Multiply(
                                        value,
                                        Expression.Constant(10.0))),
                                typeof(int)),
                            Expression.Constant(10)),
                        Expression.Constant(5)),
                    Expression.Equal(
                        Expression.Modulo(
                            Expression.Convert(
                                Expression.Call(
                                    typeof(NorthwindEntities).GetMethod("TruncateDouble"),
                                    value,
                                    Expression.Constant(0)),
                                typeof(int)),
                            Expression.Constant(2)),
                        Expression.Constant(0))),
                Expression.Add(
                    Expression.Call(
                        typeof(NorthwindEntities).GetMethod("RoundAwayFromZeroDouble", new Type[] { typeof(double) } ),
                        value),
                    Expression.Condition(
                        Expression.GreaterThanOrEqual(
                            value,
                            Expression.Constant(0.0)),
                        Expression.Constant(-1.0),
                        Expression.Constant(1.0))),
                Expression.Call(
                    typeof(NorthwindEntities).GetMethod("RoundAwayFromZeroDouble", new Type[] { typeof(double) } ),
                    value));
        }
        Expression IObjectContext.RoundAwayFromZeroDoubleExpression(Expression value)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("RoundAwayFromZeroDouble", new Type[] { typeof(double) } ), value);
        }
    
        [DbFunction("Edm", "Round")]
        public static decimal RoundAwayFromZeroDecimal(decimal value)
        {
            return Math.Round(value);
        }
        Expression IObjectContext.RoundToEvenDecimalExpression(Expression value)
        {
            return Expression.Condition(
                Expression.AndAlso(
                    Expression.Equal(
                        Expression.Modulo(
                            Expression.Convert(
                                Expression.Call(
                                    typeof(NorthwindEntities).GetMethod("AbsDecimal"),
                                    Expression.Multiply(
                                        value,
                                        Expression.Constant(10.0))),
                                typeof(int)),
                            Expression.Constant(10)),
                        Expression.Constant(5)),
                    Expression.Equal(
                        Expression.Modulo(
                            Expression.Convert(
                                Expression.Call(
                                    typeof(NorthwindEntities).GetMethod("TruncateDecimal"),
                                    value,
                                    Expression.Constant(0)),
                                typeof(int)),
                            Expression.Constant(2)),
                        Expression.Constant(0))),
                Expression.Add(
                    Expression.Call(
                        typeof(NorthwindEntities).GetMethod("RoundAwayFromZeroDecimal", new Type[] { typeof(double) } ),
                        value),
                    Expression.Condition(
                        Expression.GreaterThanOrEqual(
                            value,
                            Expression.Constant(0M)),
                        Expression.Constant(-1M),
                        Expression.Constant(1M))),
                Expression.Call(
                    typeof(NorthwindEntities).GetMethod("RoundAwayFromZeroDecimal", new Type[] { typeof(double) } ),
                    value));
        }
        Expression IObjectContext.RoundAwayFromZeroDecimalExpression(Expression value)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("RoundAwayFromZeroDecimal", new Type[] { typeof(decimal) }), value);
        }
    
        [DbFunction("Edm", "Round")]
        public static double RoundAwayFromZeroDouble(double value, int digits)
        {
            return Math.Round(value, digits);
        }
        Expression IObjectContext.RoundToEvenDoubleExpression(Expression value, Expression digits)
        {
            return Expression.Condition(
                Expression.AndAlso(
                    Expression.Equal(
                        Expression.Modulo(
                            Expression.Convert(
                                Expression.Call(
                                    typeof(NorthwindEntities).GetMethod("AbsDouble"),
                                    Expression.Multiply(
                                        value,
                                        Expression.Call(
                                            typeof(NorthwindEntities).GetMethod("PowDouble"),
                                            Expression.Constant(10.0),
                                            Expression.Add(
                                                Expression.Convert(digits, typeof(double)),
                                                Expression.Constant(1.0))))),
                                typeof(int)),
                            Expression.Constant(10)),
                        Expression.Constant(5)),
                    Expression.Equal(
                        Expression.Modulo(
                            Expression.Convert(
                                Expression.Call(
                                    typeof(NorthwindEntities).GetMethod("TruncateDouble"),
                                    Expression.Multiply(
                                        value,
                                        Expression.Call(
                                            typeof(NorthwindEntities).GetMethod("PowDouble"),
                                            Expression.Constant(10.0),
                                            Expression.Convert(digits, typeof(double)))),
                                    Expression.Constant(0)),
                                typeof(int)),
                            Expression.Constant(2)),
                        Expression.Constant(0))),
                Expression.Add(
                    Expression.Call(
                        typeof(NorthwindEntities).GetMethod("RoundAwayFromZeroDouble", new Type[] { typeof(double), typeof(int) }),
                        value,
                        digits),
                    Expression.Divide(
                        Expression.Condition(
                            Expression.GreaterThanOrEqual(
                                value,
                                Expression.Constant(0.0)),
                            Expression.Constant(-1.0),
                            Expression.Constant(1.0)),
                        Expression.Call(
                            typeof(NorthwindEntities).GetMethod("PowDouble"),
                            Expression.Constant(10.0),
                            Expression.Convert(digits, typeof(double))))),
                Expression.Call(
                    typeof(NorthwindEntities).GetMethod("RoundAwayFromZeroDouble", new Type[] { typeof(double), typeof(int) }),
                    value,
                    digits));
        }
        Expression IObjectContext.RoundAwayFromZeroDoubleExpression(Expression value, Expression digits)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("RoundAwayFromZeroDouble", new Type[] { typeof(double), typeof(int) }), value, digits);
        }
    
        [DbFunction("Edm", "Round")]
        public static decimal RoundAwayFromZeroDecimal(decimal value, int digits)
        {
            return Math.Round(value, digits);
        }
        Expression IObjectContext.RoundToEvenDecimalExpression(Expression value, Expression digits)
        {
            return Expression.Condition(
                Expression.AndAlso(
                    Expression.Equal(
                        Expression.Modulo(
                            Expression.Convert(
                                Expression.Call(
                                    typeof(NorthwindEntities).GetMethod("AbsDecimal"),
                                    Expression.Multiply(
                                        value,
                                        Expression.Call(
                                            typeof(NorthwindEntities).GetMethod("PowDecimal"),
                                            Expression.Constant(10M),
                                            Expression.Add(
                                                Expression.Convert(digits, typeof(decimal)),
                                                Expression.Constant(1M))))),
                                typeof(int)),
                            Expression.Constant(10)),
                        Expression.Constant(5)),
                    Expression.Equal(
                        Expression.Modulo(
                            Expression.Convert(
                                Expression.Call(
                                    typeof(NorthwindEntities).GetMethod("TruncateDecimal"),
                                    Expression.Multiply(
                                        value,
                                        Expression.Call(
                                            typeof(NorthwindEntities).GetMethod("PowDecimal"),
                                            Expression.Constant(10M),
                                            Expression.Convert(digits, typeof(decimal)))),
                                    Expression.Constant(0)),
                                typeof(int)),
                            Expression.Constant(2)),
                        Expression.Constant(0))),
                Expression.Add(
                    Expression.Call(
                        typeof(NorthwindEntities).GetMethod("RoundAwayFromZeroDecimal", new Type[] { typeof(decimal), typeof(int) }),
                        value,
                        digits),
                    Expression.Divide(
                        Expression.Condition(
                            Expression.GreaterThanOrEqual(
                                value,
                                Expression.Constant(0M)),
                            Expression.Constant(-1M),
                            Expression.Constant(1M)),
                        Expression.Call(
                            typeof(NorthwindEntities).GetMethod("PowDecimal"),
                            Expression.Constant(10M),
                            Expression.Convert(digits, typeof(decimal))))),
                Expression.Call(
                    typeof(NorthwindEntities).GetMethod("RoundAwayFromZeroDecimal", new Type[] { typeof(decimal), typeof(int) }),
                    value,
                    digits));
        }
        Expression IObjectContext.RoundAwayFromZeroDecimalExpression(Expression value, Expression digits)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("RoundAwayFromZeroDecimal", new Type[] { typeof(decimal), typeof(int) }), value, digits);
        }
    
        [DbFunction("Edm", "Truncate")]
        public static double TruncateDouble(double value, int digits)
        {
            if (digits != 0)
                throw new InvalidOperationException();
            return Math.Truncate(value);
        }
        Expression IObjectContext.TruncateDoubleExpression(Expression value)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("TruncateDouble"), value, Expression.Constant(0, typeof(int)));
        }
    
        [DbFunction("Edm", "Truncate")]
        public static decimal TruncateDecimal(decimal value, int digits)
        {
            if (digits != 0)
                throw new InvalidOperationException();
            return Math.Truncate(value);
        }
        Expression IObjectContext.TruncateDecimalExpression(Expression value)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("TruncateDecimal"), value, Expression.Constant(0, typeof(int)));
        }
    
        [DbFunction(namespaceName: "NorthwindModel", functionName: "LessThanString")]
        public static bool LessThanString(string s1, string s2)
        {
            throw new NotImplementedException();
        }
        Expression IObjectContext.LessThanString(Expression s1Expresion, Expression s2Expresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("LessThanString"), s1Expresion, s2Expresion);
        }
    
        [DbFunction(namespaceName: "NorthwindModel", functionName: "GreaterThanString")]
        public static bool GreaterThanString(string s1, string s2)
        {
            throw new NotImplementedException();
        }
        Expression IObjectContext.GreaterThanString(Expression s1Expresion, Expression s2Expresion)
        {
            return Expression.Call(typeof(NorthwindEntities).GetMethod("GreaterThanString"), s1Expresion, s2Expresion);
        }
        #endregion
    
        #region AdditionalProperties
        DateTime IObjectContext.DbDateTime
        {
            get { return DateTime.Now; }
        }
        #endregion AdditionalProperties
    
        #region Specifications
        private ICustomerDALSpecifications _customerDALSpecifications;
        private ICustomerDALSpecifications CustomerDALSpecifications
        {
            get { return _customerDALSpecifications ?? (_customerDALSpecifications = new CustomerDALSpecifications(this)); }
        }
        ICustomerDALSpecifications INorthwindEntities.CustomerDALSpecifications
        {
            get { return CustomerDALSpecifications; }
        }
        private IEmployeeDALSpecifications _employeeDALSpecifications;
        private IEmployeeDALSpecifications EmployeeDALSpecifications
        {
            get { return _employeeDALSpecifications ?? (_employeeDALSpecifications = new EmployeeDALSpecifications(this)); }
        }
        IEmployeeDALSpecifications INorthwindEntities.EmployeeDALSpecifications
        {
            get { return EmployeeDALSpecifications; }
        }
        private IOrderDetailDALSpecifications _orderDetailDALSpecifications;
        private IOrderDetailDALSpecifications OrderDetailDALSpecifications
        {
            get { return _orderDetailDALSpecifications ?? (_orderDetailDALSpecifications = new OrderDetailDALSpecifications(this)); }
        }
        IOrderDetailDALSpecifications INorthwindEntities.OrderDetailDALSpecifications
        {
            get { return OrderDetailDALSpecifications; }
        }
        private IOrderDALSpecifications _orderDALSpecifications;
        private IOrderDALSpecifications OrderDALSpecifications
        {
            get { return _orderDALSpecifications ?? (_orderDALSpecifications = new OrderDALSpecifications(this)); }
        }
        IOrderDALSpecifications INorthwindEntities.OrderDALSpecifications
        {
            get { return OrderDALSpecifications; }
        }
        private IProductDALSpecifications _productDALSpecifications;
        private IProductDALSpecifications ProductDALSpecifications
        {
            get { return _productDALSpecifications ?? (_productDALSpecifications = new ProductDALSpecifications(this)); }
        }
        IProductDALSpecifications INorthwindEntities.ProductDALSpecifications
        {
            get { return ProductDALSpecifications; }
        }

        #endregion

        
        void IDataContext.SaveChanges(bool acceptChanges)
        {
            var saveOption = acceptChanges ? SaveOptions.AcceptAllChangesAfterSave : SaveOptions.None;
            if (UseWAQSProvider)
                saveOption |= SaveOptions.DetectChangesBeforeSave;
            SaveChanges(saveOption);
        }
    
        void IDataContext.ApplyChanges<TEntity>(IEntitySet<TEntity> entitySet, TEntity entity)
        {
            ((EntitySet<TEntity>)entitySet).ObjectSet.ApplyChanges(entity);
        }
    
        void IDataContext.LoadMetadata()
        {
            MetadataWorkspace.LoadFromAssembly(typeof(NorthwindEntities).Assembly);
        }
    
        private Dictionary<Tuple<Type, string>, Lazy<Func<ParameterExpression, Expression>>> _propertiesExpressions;
        Expression IDataContext.GetExpression(Type type, string propertyName, ParameterExpression parameterExpression)
        {
            if (_propertiesExpressions == null)
            {
                _propertiesExpressions = new Dictionary<Tuple<Type, string>, Lazy<Func<ParameterExpression, Expression>>>();
                {
                    _propertiesExpressions.Add(new Tuple<Type, string>(typeof(Customer), "TotalSpent"), new Lazy<Func<ParameterExpression, Expression>>(() => 
                    {
                        LambdaExpression exp = CustomerDALSpecifications.TotalSpentExpression;
                        return p => exp.Body.ReplaceParameter(exp.Parameters[0], p);
                    }));
                }
                {
                    _propertiesExpressions.Add(new Tuple<Type, string>(typeof(Customer), "FullName"), new Lazy<Func<ParameterExpression, Expression>>(() => 
                    {
                        LambdaExpression exp = CustomerDALSpecifications.FullNameExpression;
                        return p => exp.Body.ReplaceParameter(exp.Parameters[0], p);
                    }));
                }
                {
                    _propertiesExpressions.Add(new Tuple<Type, string>(typeof(Employee), "FullName"), new Lazy<Func<ParameterExpression, Expression>>(() => 
                    {
                        LambdaExpression exp = EmployeeDALSpecifications.FullNameExpression;
                        return p => exp.Body.ReplaceParameter(exp.Parameters[0], p);
                    }));
                }
                {
                    _propertiesExpressions.Add(new Tuple<Type, string>(typeof(OrderDetail), "Amount"), new Lazy<Func<ParameterExpression, Expression>>(() => 
                    {
                        LambdaExpression exp = OrderDetailDALSpecifications.AmountExpression;
                        return p => exp.Body.ReplaceParameter(exp.Parameters[0], p);
                    }));
                }
                {
                    _propertiesExpressions.Add(new Tuple<Type, string>(typeof(OrderDetail), "ProductFullName"), new Lazy<Func<ParameterExpression, Expression>>(() => 
                    {
                        LambdaExpression exp = OrderDetailDALSpecifications.ProductFullNameExpression;
                        return p => exp.Body.ReplaceParameter(exp.Parameters[0], p);
                    }));
                }
                {
                    _propertiesExpressions.Add(new Tuple<Type, string>(typeof(Order), "Total"), new Lazy<Func<ParameterExpression, Expression>>(() => 
                    {
                        LambdaExpression exp = OrderDALSpecifications.TotalExpression;
                        return p => exp.Body.ReplaceParameter(exp.Parameters[0], p);
                    }));
                }
                {
                    _propertiesExpressions.Add(new Tuple<Type, string>(typeof(Order), "CustomerCompanyName"), new Lazy<Func<ParameterExpression, Expression>>(() => 
                    {
                        LambdaExpression exp = OrderDALSpecifications.CustomerCompanyNameExpression;
                        return p => exp.Body.ReplaceParameter(exp.Parameters[0], p);
                    }));
                }
                {
                    _propertiesExpressions.Add(new Tuple<Type, string>(typeof(Order), "CustomerContactName"), new Lazy<Func<ParameterExpression, Expression>>(() => 
                    {
                        LambdaExpression exp = OrderDALSpecifications.CustomerContactNameExpression;
                        return p => exp.Body.ReplaceParameter(exp.Parameters[0], p);
                    }));
                }
                {
                    _propertiesExpressions.Add(new Tuple<Type, string>(typeof(Order), "HasInvoice"), new Lazy<Func<ParameterExpression, Expression>>(() => 
                    {
                        LambdaExpression exp = OrderDALSpecifications.HasInvoiceExpression;
                        return p => exp.Body.ReplaceParameter(exp.Parameters[0], p);
                    }));
                }
                {
                    _propertiesExpressions.Add(new Tuple<Type, string>(typeof(Product), "FullName"), new Lazy<Func<ParameterExpression, Expression>>(() => 
                    {
                        LambdaExpression exp = ProductDALSpecifications.FullNameExpression;
                        return p => exp.Body.ReplaceParameter(exp.Parameters[0], p);
                    }));
                }
            }
            Lazy<Func<ParameterExpression, Expression>> result = null;
            while (type != null && ! _propertiesExpressions.TryGetValue(new Tuple<Type, string>(type, propertyName), out result))
                type = type.BaseType;
            if (type == null)
                throw new NotImplementedException();
            return result.Value(parameterExpression);
        }
    
    
        private Dictionary<Tuple<Type, string>, Lazy<Func<List<Expression>, ParameterExpression, Expression>>> _methodsExpressions;
        Expression IDataContext.GetExpression(Type type, string methodName, List<Expression> arguments, ParameterExpression parameterExpression)
        {
            if (_methodsExpressions == null)
            {
                _methodsExpressions = new Dictionary<Tuple<Type, string>, Lazy<Func<List<Expression>, ParameterExpression, Expression>>>();
                {
                    _methodsExpressions.Add(new Tuple<Type, string>(typeof(Employee), "AlreadySoldTo"), new Lazy<Func<List<Expression>, ParameterExpression, Expression>>(() =>
                    {
                        LambdaExpression exp = EmployeeDALSpecifications.AlreadySoldToExpression;
                        return (args, p) => exp.Body.ReplaceParameter(pe =>
                        {
                            if (pe == exp.Parameters[0])
                                return p;
                            if (pe == exp.Parameters[1])
                                return args[0];
                            return pe;
                        });
                    }));
                }
                {
                    _methodsExpressions.Add(new Tuple<Type, string>(typeof(OrderDetail), "CreateInvoiceDetail"), new Lazy<Func<List<Expression>, ParameterExpression, Expression>>(() =>
                    {
                        LambdaExpression exp = OrderDetailDALSpecifications.CreateInvoiceDetailExpression;
                        return (args, p) => exp.Body.ReplaceParameter(pe =>
                        {
                            if (pe == exp.Parameters[0])
                                return p;
                            return pe;
                        });
                    }));
                }
            }
            Lazy<Func<List<Expression>, ParameterExpression, Expression>> result = null;
            while (type != null && !_methodsExpressions.TryGetValue(new Tuple<Type, string>(type, methodName), out result))
                type = type.BaseType;
            if (type == null)
                throw new NotImplementedException();
            return result.Value(arguments, parameterExpression);
        }
    
        void IDataContext.AttachRelationship<TEntity1, TEntity2>(TEntity1 entity1, TEntity2 entity2, string collectionName)
        {
            ObjectStateEntry entity1OSE;
            if (ObjectStateManager.TryGetObjectStateEntry(entity1, out entity1OSE))
            {
            }
        }
        
    
        async Task IDataContext.SaveChangesAsync(bool acceptChanges)
        {
            var saveOption = acceptChanges ? SaveOptions.AcceptAllChangesAfterSave : SaveOptions.None;
            if (UseWAQSProvider)
                saveOption |= SaveOptions.DetectChangesBeforeSave;
            await SaveChangesAsync(saveOption);
        }
    }
}
