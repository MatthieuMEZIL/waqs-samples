//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using System.Transactions;
using WAQS.Common;
using WAQS.DAL.Interfaces;
using WAQS.Entities;
using WAQS.SerializableExpressions;
using WAQS.Service;
using WAQS.Service.Interfaces;
using WAQSWorkshopServer;
using WAQSWorkshopServer.DAL.Interfaces;
using WAQSWorkshopServer.Service;
using WAQSWorkshopServer.Service.Interfaces;

namespace WAQSWorkshopServer.Service
{
    public abstract partial class NorthwindService : ServiceBase, INorthwindService, IDisposable
    {
        private Func<NorthwindService> _serviceFactory;
        private Func<INorthwindEntities> _contextFactory;
    
        static NorthwindService()
        {
            WAQSQuery.WithTypes.Add(typeof(Customer), new WithType
                {
                    Type = typeof(WithCustomer),
                    TransformToOriginalType = e =>
                    {
                        var withCustomer = e as WithCustomer;
                        if (withCustomer == null)
                            return e;
                        var value = withCustomer.Customer;
                        value.Specifications = withCustomer.Specifications;
                        return value;
                    }
                });
            WAQSQuery.WithTypes.Add(typeof(Employee), new WithType
                {
                    Type = typeof(WithEmployee),
                    TransformToOriginalType = e =>
                    {
                        var withEmployee = e as WithEmployee;
                        if (withEmployee == null)
                            return e;
                        var value = withEmployee.Employee;
                        value.Specifications = withEmployee.Specifications;
                        return value;
                    }
                });
            WAQSQuery.WithTypes.Add(typeof(InvoiceDetail), new WithType
                {
                    Type = typeof(WithInvoiceDetail),
                    TransformToOriginalType = e =>
                    {
                        var withInvoiceDetail = e as WithInvoiceDetail;
                        if (withInvoiceDetail == null)
                            return e;
                        var value = withInvoiceDetail.InvoiceDetail;
                        return value;
                    }
                });
            WAQSQuery.WithTypes.Add(typeof(Invoice), new WithType
                {
                    Type = typeof(WithInvoice),
                    TransformToOriginalType = e =>
                    {
                        var withInvoice = e as WithInvoice;
                        if (withInvoice == null)
                            return e;
                        var value = withInvoice.Invoice;
                        return value;
                    }
                });
            WAQSQuery.WithTypes.Add(typeof(OrderDetail), new WithType
                {
                    Type = typeof(WithOrderDetail),
                    TransformToOriginalType = e =>
                    {
                        var withOrderDetail = e as WithOrderDetail;
                        if (withOrderDetail == null)
                            return e;
                        var value = withOrderDetail.OrderDetail;
                        value.Specifications = withOrderDetail.Specifications;
                        return value;
                    }
                });
            WAQSQuery.WithTypes.Add(typeof(Order), new WithType
                {
                    Type = typeof(WithOrder),
                    TransformToOriginalType = e =>
                    {
                        var withOrder = e as WithOrder;
                        if (withOrder == null)
                            return e;
                        var value = withOrder.Order;
                        value.Specifications = withOrder.Specifications;
                        return value;
                    }
                });
            WAQSQuery.WithTypes.Add(typeof(Product), new WithType
                {
                    Type = typeof(WithProduct),
                    TransformToOriginalType = e =>
                    {
                        var withProduct = e as WithProduct;
                        if (withProduct == null)
                            return e;
                        var value = withProduct.Product;
                        value.Specifications = withProduct.Specifications;
                        return value;
                    }
                });
            WAQSQuery.WithTypes.Add(typeof(Category), new WithType
                {
                    Type = typeof(WithCategory),
                    TransformToOriginalType = e =>
                    {
                        var withCategory = e as WithCategory;
                        if (withCategory == null)
                            return e;
                        var value = withCategory.Category;
                        return value;
                    }
                });
        }
    
        public static void Init()
        {
            InitPartial();
        }
    
        static partial void InitPartial();
    
        public NorthwindService(Func<INorthwindEntities> contextFactory, Func<INorthwindEntities, ISerializableExpressionProvider> serializableExpressionProviderFactory, Func<NorthwindService> serviceFactory)
            : this(contextFactory(), serviceFactory)
        {
            _serializableExpressionProviderFactory = serializableExpressionProviderFactory;
        }
    
        public NorthwindService(Func<INorthwindEntities> contextFactory, Func<NorthwindService> serviceFactory)
            : this(contextFactory())
        {
            _contextFactory = contextFactory;
            _serviceFactory = serviceFactory;
        }
    
        public NorthwindService(INorthwindEntities context, Func<NorthwindService> serviceFactory)
            : this(() => context, serviceFactory)
        {
        }
    
        public NorthwindService(INorthwindEntities context)
        {
            _context = context;
            TrackableCollectionExtensions.AttachAction = (e1, e2, name) => _context.AttachRelationship(e1, e2, name);
            WAQSWorkshopServer.EntitiesOtherSpecifications.AddInvoiceFunc = AddInvoice;
        }
    
        private readonly INorthwindEntities _context;
        protected INorthwindEntities Context
        {
            get { return _context; }
        }
    
    
        private readonly Func<INorthwindEntities, ISerializableExpressionProvider> _serializableExpressionProviderFactory;
        protected Func<INorthwindEntities, ISerializableExpressionProvider> SerializableExpressionProvider
        {
            get { return _serializableExpressionProviderFactory; }
        }
    
        protected override Func<ISerializableExpressionProvider> SerializableExpressionProviderFactory
        {
            get { return () => _serializableExpressionProviderFactory(_context); }
        }
    
        internal static object GetWithBaseObject(object obj)
        {
            var type = obj.GetType().BaseType;
            if (type == null)
                return obj;
            WithType withType;
            if (WAQSQuery.WithTypes.TryGetValue(type, out withType))
                return withType.TransformToOriginalType(obj);
            return obj;
        }
    
        public IEntitySet<WAQSWorkshopServer.Customer> Customers 
        { 
            get 
            {
                _context.UseWAQSProvider = true; 
                return _context.Customers; 
            } 
        }
    
        public void ApplyChanges(WAQSWorkshopServer.Customer entity)
        {
            ApplyingChanges(ref entity);
            _context.ApplyChanges(_context.Customers, entity);
        }
    
        partial void ApplyingChanges(ref WAQSWorkshopServer.Customer entity);
    
        public IEntitySet<WAQSWorkshopServer.Employee> Employees 
        { 
            get 
            {
                _context.UseWAQSProvider = true; 
                return _context.Employees; 
            } 
        }
    
        public void ApplyChanges(WAQSWorkshopServer.Employee entity)
        {
            ApplyingChanges(ref entity);
            _context.ApplyChanges(_context.Employees, entity);
        }
    
        partial void ApplyingChanges(ref WAQSWorkshopServer.Employee entity);
    
        public IEntitySet<WAQSWorkshopServer.InvoiceDetail> InvoiceDetails 
        { 
            get 
            {
                _context.UseWAQSProvider = true; 
                return _context.InvoiceDetails; 
            } 
        }
    
        public void ApplyChanges(WAQSWorkshopServer.InvoiceDetail entity)
        {
            ApplyingChanges(ref entity);
            _context.ApplyChanges(_context.InvoiceDetails, entity);
        }
    
        partial void ApplyingChanges(ref WAQSWorkshopServer.InvoiceDetail entity);
    
        public IEntitySet<WAQSWorkshopServer.Invoice> Invoices 
        { 
            get 
            {
                _context.UseWAQSProvider = true; 
                return _context.Invoices; 
            } 
        }
    
        public void ApplyChanges(WAQSWorkshopServer.Invoice entity)
        {
            ApplyingChanges(ref entity);
            _context.ApplyChanges(_context.Invoices, entity);
        }
    
        partial void ApplyingChanges(ref WAQSWorkshopServer.Invoice entity);
    
        public IEntitySet<WAQSWorkshopServer.OrderDetail> OrderDetails 
        { 
            get 
            {
                _context.UseWAQSProvider = true; 
                return _context.OrderDetails; 
            } 
        }
    
        public void ApplyChanges(WAQSWorkshopServer.OrderDetail entity)
        {
            ApplyingChanges(ref entity);
            _context.ApplyChanges(_context.OrderDetails, entity);
        }
    
        partial void ApplyingChanges(ref WAQSWorkshopServer.OrderDetail entity);
    
        public IEntitySet<WAQSWorkshopServer.Order> Orders 
        { 
            get 
            {
                _context.UseWAQSProvider = true; 
                return _context.Orders; 
            } 
        }
    
        public void ApplyChanges(WAQSWorkshopServer.Order entity)
        {
            ApplyingChanges(ref entity);
            _context.ApplyChanges(_context.Orders, entity);
        }
    
        partial void ApplyingChanges(ref WAQSWorkshopServer.Order entity);
    
        public IEntitySet<WAQSWorkshopServer.Product> Products 
        { 
            get 
            {
                _context.UseWAQSProvider = true; 
                return _context.Products; 
            } 
        }
    
        public void ApplyChanges(WAQSWorkshopServer.Product entity)
        {
            ApplyingChanges(ref entity);
            _context.ApplyChanges(_context.Products, entity);
        }
    
        partial void ApplyingChanges(ref WAQSWorkshopServer.Product entity);
    
        public IEntitySet<WAQSWorkshopServer.Category> Categories 
        { 
            get 
            {
                _context.UseWAQSProvider = true; 
                return _context.Categories; 
            } 
        }
    
        public void ApplyChanges(WAQSWorkshopServer.Category entity)
        {
            ApplyingChanges(ref entity);
            _context.ApplyChanges(_context.Categories, entity);
        }
    
        partial void ApplyingChanges(ref WAQSWorkshopServer.Category entity);
    
    
        public NorthwindQueryResult Execute(QuerySerialization query)
        {
            var expression = _serializableExpressionProviderFactory(_context).ToExpression(query.Expression, query.WithSpecificationsProperties);
            object result;
            try
            {
                result = Expression.Lambda(expression).Compile().DynamicInvoke();
            }
            catch (Exception e)
            {
                if (e.InnerException != null)
                    throw e.InnerException;
                else
                    throw e;
            }
            NorthwindQueryResult queryResult = new NorthwindQueryResult();
            bool onlyOne = false;
            var methodCallExpression = expression as MethodCallExpression;
            if (methodCallExpression != null)
                switch (methodCallExpression.Method.Name)
                {
                    case "First":
                    case "FirstOrDefault":
                    case "Single":
                    case "SingleOrDefault":
                    case "Last":
                    case "LastOrDefault":
                        onlyOne = true;
                        break;
                }
            bool manyResult = HasManyResult(expression.Type) && ! onlyOne;
            Type queryType = manyResult ? GetGenericType(expression.Type) : expression.Type;
            Type queryTypeLoop = queryType;
            int genericIndex = 0;
            while (queryTypeLoop.IsGenericType && queryTypeLoop.GetGenericTypeDefinition() == typeof(IEnumerable<>))
            {
                genericIndex++;
                queryTypeLoop = queryTypeLoop.GetGenericArguments()[0];
            }
            if (manyResult)
            {
                if (query.SerializableType.IsKnownByServer && genericIndex == 0)
                    queryResult.Values = typeof(NorthwindService).GetMethod("GetBaseTypeToArray", BindingFlags.Static | BindingFlags.NonPublic).MakeGenericMethod(NorthwindSerializableExpressionConverter.GetNorthwindBaseType(queryType) ?? queryType).Invoke(null, new object[] { result });
                else
                    queryResult.Records = ((IEnumerable)result).Cast<object>().Select(o => GetQueryResult(queryType, o)).ToList();
            }
            else
            {
                if (query.SerializableType.IsKnownByServer && genericIndex < 2)
                {
                    object value = result;
                    switch (genericIndex)
                    {
                        case 0:
                            queryResult.Value = NorthwindSerializableExpressionConverter.GetNorthwindBaseObject(value);
                            break;
                        case 1:
                            queryResult.Value = typeof(NorthwindService).GetMethod("GetBaseTypeToArray", BindingFlags.Static | BindingFlags.NonPublic).MakeGenericMethod(NorthwindSerializableExpressionConverter.GetNorthwindBaseType(queryTypeLoop) ?? queryTypeLoop).Invoke(null, new object[] { value });
                            break;
                    }
                }
                else
                    queryResult.Record = GetQueryResult(queryType, result);
            }
            return queryResult;
        }
    
        private static T[] GetBaseTypeToArray<T>(IEnumerable values)
        {
            if (values == null)
                return new T[0];
            return values.Cast<object>().Select(o => NorthwindSerializableExpressionConverter.GetNorthwindBaseObject(o)).Cast<T>().ToArray();
        }
    
        public NorthwindQueriesResult ExecuteMany(QueriesSerialization queries)
        {
            List<Task> tasks = new List<Task>();
            var result = ExecuteMany(queries, tasks);
            foreach (var task in tasks)
            {
                task.Wait();
                if (task.Exception != null)
                    throw task.Exception;
            }
            return result;
        }
        private NorthwindQueriesResult ExecuteMany(QueriesSerialization queries, List<Task> tasks)
        {
            var result = new NorthwindQueriesResult { QueryResults = new NorthwindQueryResult[queries.QuerySerializations.Length] };
            for (int queryIndex = 0 ; queryIndex < queries.QuerySerializations.Length ; queryIndex ++)
            {
                var query = queries.QuerySerializations[queryIndex];
                var indexLoop = queryIndex;
                tasks.Add(Task.Factory.StartNew(() =>
                    {
                        using (var service = _serviceFactory())
                        {
                            result.QueryResults[indexLoop] = service.Execute(query);
                        }
                    }));
            }
            return result;
        }
    
        public abstract NorthwindQueryResultPage LoadPage(int pageSize, SerializableExpression queryExpression, IEnumerable<string> withSpecificationsProperties, LoadPageParameter[] identifiers);
            
        private static ConcurrentDictionary<Type, Lazy<WeakReference>> _queryResultRecordFactories = new ConcurrentDictionary<Type, Lazy<WeakReference>>(); 
        protected QueryResultRecord GetQueryResult(Type type, object o)
        {
            if (o == null)
                return null;
            for (;;)
            {
                WeakReference weakReference = _queryResultRecordFactories.GetOrAdd(type, new Lazy<WeakReference>(() => new WeakReference(CreateQueryResultExpression(type, _serializableExpressionProviderFactory(_context).GetOriginalType(type)).Compile()))).Value;
                var queryResultRecordFactory = (Func<object, QueryResultRecord>)weakReference.Target;
                if (queryResultRecordFactory != null)
                    return queryResultRecordFactory(o);
                Lazy<WeakReference> dummy;
                _queryResultRecordFactories.TryRemove(type, out dummy);
            }
        }
    
        public DateTime GetDbDateTime()
        {
            return _context.GetDbDateTime();
        }
    
        public void SaveChanges()
        {
            bool saved = false;
            SaveChanges(ref saved);
            if (! saved)
            {
                var errors = new List<Error>();
                foreach (var e in _context.Customers.Local)
                    errors.AddRange(e.ValidateOutTransaction(true).Where(er => er != null && (er.Criticity & Criticity.Error) != 0));
                foreach (var e in _context.OrderDetails.Local)
                    errors.AddRange(e.ValidateOutTransaction(true).Where(er => er != null && (er.Criticity & Criticity.Error) != 0));
                if (errors.Count != 0)
                    throw new ValidationException(errors);
                _context.SaveChanges();
            }
        }
    
        partial void SaveChanges(ref bool saved);
    
    
        public IEnumerable<Error> Validate(Customer entity)
        {
            yield break;
        }
    
        public IEnumerable<Error> Validate(Employee entity)
        {
            yield break;
        }
    
        public IEnumerable<Error> Validate(InvoiceDetail entity)
        {
            yield break;
        }
    
        public IEnumerable<Error> Validate(Invoice entity)
        {
            yield break;
        }
    
        public IEnumerable<Error> Validate(OrderDetail entity)
        {
            yield break;
        }
    
        public IEnumerable<Error> Validate(Order entity)
        {
            yield break;
        }
    
        public IEnumerable<Error> Validate(Product entity)
        {
            yield break;
        }
    
        public IEnumerable<Error> Validate(Category entity)
        {
            yield break;
        }
     
        public bool AlreadySoldTo(Employee employee, Customer customer)
        {
            _context.UseWAQSProvider = true;
            return employee.AlreadySoldTo(customer);
        }
        public Invoice AddInvoice(int orderId)
        {
            var order = this.Orders.IncludeOrderDetails().WithCustomerCompanyName().WithCustomerContactName().FirstOrDefault(o => o.Id == orderId);
            if (order == null)
            {
                throw new ArgumentException("The is no order for this id", "orderId");
            }
        
            Invoice invoice = new Invoice{OrderId = order.Id, CustomerId = order.CustomerId, CustomerCompanyName = order.CustomerCompanyName, CustomerContactName = order.CustomerContactName, Total = order.Total};
            foreach (var od in order.OrderDetails)
            {
                invoice.InvoiceDetails.Add(od.CreateInvoiceDetail());
            }
        
            this.Invoices.Add(invoice);
            this.SaveChanges();
            return invoice;
        }
        public InvoiceDetail CreateInvoiceDetail(OrderDetail od)
        {
            _context.UseWAQSProvider = true;
            return od.CreateInvoiceDetail();
        }
    
        void IDisposable.Dispose()
        {
            _context.Dispose();
        }
    }
}
