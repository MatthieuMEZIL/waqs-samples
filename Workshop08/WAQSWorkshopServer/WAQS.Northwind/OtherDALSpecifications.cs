//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Linq;
using System.Linq.Expressions;
using WAQS.Common;
using WAQSWorkshopServer;
using WAQSWorkshopServer.DAL.Interfaces;
using WAQSWorkshopServer.DTO;

namespace WAQSWorkshopServer.DAL
{
    internal partial class OtherDALSpecifications
    {
        private NorthwindEntities _context;
    
        public OtherDALSpecifications(NorthwindEntities context)
        {
            _context = context;
        }
    
        private static Expression<Func<int, WAQSWorkshopServer.Service.Interfaces.INorthwindService, Invoice>> _getAddInvoiceExpression;
        protected internal static Expression<Func<int, WAQSWorkshopServer.Service.Interfaces.INorthwindService, Invoice>> GetAddInvoiceExpression(bool isCoalesceEnabled = true)
        {
            if (_getAddInvoiceExpression == null)
            {
                Expression<Func<int, WAQSWorkshopServer.Service.Interfaces.INorthwindService, Invoice>> exp = null;
                _getAddInvoiceExpression = exp;
            }
            GetAddInvoiceExpression(ref _getAddInvoiceExpression);
            return _getAddInvoiceExpression;
        }
        static partial void GetAddInvoiceExpression(ref Expression<Func<int, WAQSWorkshopServer.Service.Interfaces.INorthwindService, Invoice>> exp);
    
        private static Expression<Func<WAQSWorkshopServer.Service.Interfaces.INorthwindService, LastOrderDTO>> _getGetLastOrderExpression;
        protected internal static Expression<Func<WAQSWorkshopServer.Service.Interfaces.INorthwindService, LastOrderDTO>> GetGetLastOrderExpression(bool isCoalesceEnabled = true)
        {
            if (_getGetLastOrderExpression == null)
            {
                Func<WAQSWorkshopServer.Employee, string> getFullName_Employee = (_) => default(string);
                Func<WAQSWorkshopServer.Order, double> getTotal_Order = (_) => default(double);
                Expression<Func<WAQSWorkshopServer.Service.Interfaces.INorthwindService, LastOrderDTO>> exp = (context) => (
            from o in context.Orders
            where o.EmployeeId.HasValue
            orderby o.OrderDate descending
            select new LastOrderDTO{OrderId = o.Id, EmployeeId = o.EmployeeId.Value, EmployeeFullName = getFullName_Employee(o.Employee), Date = o.OrderDate, Total = getTotal_Order(o)}).FirstOrDefault();
                Func<InvocationExpression, Expression> replaceExpFunc = null;
                replaceExpFunc = invocationExpression =>
                    {
                        MemberExpression memberExpression = invocationExpression.Expression as MemberExpression;
                        if (memberExpression == null)
                            return invocationExpression;
                        switch (memberExpression.Member.Name)
                        {
                            case "getFullName_Employee":
                            {
                                var getFullName_EmployeeSubExp = EmployeeDALSpecifications.GetFullNameExpression(isCoalesceEnabled : false);
                                if (getFullName_EmployeeSubExp == null)
                                    return null;
                                Expression subExp = getFullName_EmployeeSubExp.Body.ReplaceParameter(parameter => 
                                    {
                                        int index = getFullName_EmployeeSubExp.Parameters.IndexOf(parameter);
                                        if (index == -1)
                                            return parameter;
                                        return invocationExpression.Arguments[index].ReplaceInvocation(replaceExpFunc);
                                    });
                                return subExp;
                            }
                            case "getTotal_Order":
                            {
                                var getTotal_OrderSubExp = OrderDALSpecifications.GetTotalExpression(isCoalesceEnabled : false);
                                if (getTotal_OrderSubExp == null)
                                    return null;
                                Expression subExp = getTotal_OrderSubExp.Body.ReplaceParameter(parameter => 
                                    {
                                        int index = getTotal_OrderSubExp.Parameters.IndexOf(parameter);
                                        if (index == -1)
                                            return parameter;
                                        return invocationExpression.Arguments[index].ReplaceInvocation(replaceExpFunc);
                                    });
                                return subExp;
                            }
                            default:
                                return invocationExpression;
                        }
                    };
                exp = (Expression<Func<WAQSWorkshopServer.Service.Interfaces.INorthwindService, LastOrderDTO>>)exp.ReplaceInvocation(replaceExpFunc);
                _getGetLastOrderExpression = exp;
            }
            GetGetLastOrderExpression(ref _getGetLastOrderExpression);
            return _getGetLastOrderExpression;
        }
        static partial void GetGetLastOrderExpression(ref Expression<Func<WAQSWorkshopServer.Service.Interfaces.INorthwindService, LastOrderDTO>> exp);
    
    }
}
