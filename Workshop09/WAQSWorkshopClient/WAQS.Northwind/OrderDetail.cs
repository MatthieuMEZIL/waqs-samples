//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

            using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using WAQS.ClientContext;
using WAQS.ClientContext.Interfaces;
using WAQS.ClientContext.Interfaces.Errors;
using WAQS.ComponentModel;
using WAQS.Entities;
using WAQS.EntitiesTracking;

namespace WAQSWorkshopClient
{
    [DataContract(IsReference = true, Namespace = "http://Northwind/Entities")]
    [KnownType(typeof (InvoiceDetail))]
    [KnownType(typeof (Order))]
    [KnownType(typeof (Product))]
    public partial class OrderDetail : DynamicType, IEntityWithErrors
    {
#region DynamicType
        protected override ICustomTypeDescriptor CustomTypeDescriptor
        {
            get
            {
                return new DynamicType<OrderDetail>(this, CustomPropertyDescriptors);
            }
        }

        protected override IEnumerable<CustomPropertyDescriptor> CustomPropertyDescriptors
        {
            get
            {
                return DynamicType<OrderDetail>.CustomProperties;
            }
        }

#endregion
#region Simple Properties
        [DataMember]
        public int Id
        {
            get
            {
                return _id;
            }

            set
            {
                if (_id == value)
                {
                    return;
                }

                OnIdPropertyChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                _id = value;
                if (!ChangeTracker.Saving)
                {
                    OnIdPropertyChanged(value);
                    OnPropertyChanged("Id");
                    ResetEntityKey();
                }
            }
        }

        private int _id;
        partial void OnIdPropertyChanging(ref int value);
        partial void OnIdPropertyChanged(int value);
        [DataMember]
        public int OrderId
        {
            get
            {
                return _orderId;
            }

            set
            {
                if (_orderId == value)
                {
                    return;
                }

                OnOrderIdPropertyChanging(ref value);
                if (!IsDeserializing)
                {
                    if (Order != null && Order.Id != value)
                    {
                        Order = null;
                    }

                    ChangeTracker.RecordOriginalValue("OrderId", _orderId);
                }

                var oldOrderId = _orderId;
                _orderId = value;
                if (!ChangeTracker.Saving)
                {
                    OnOrderIdPropertyChanged(value);
                    OnPropertyChanged("OrderId");
                    OnOrderFKsChanged(oldOrderId, value);
                    RaiseNavigationPropertyChanged("OrderId");
                }
            }
        }

        private int _orderId;
        partial void OnOrderIdPropertyChanging(ref int value);
        partial void OnOrderIdPropertyChanged(int value);
        [DataMember]
        public int ProductId
        {
            get
            {
                return _productId;
            }

            set
            {
                if (_productId == value)
                {
                    return;
                }

                OnProductIdPropertyChanging(ref value);
                if (!IsDeserializing)
                {
                    if (Product != null && Product.Id != value)
                    {
                        Product = null;
                    }

                    ChangeTracker.RecordOriginalValue("ProductId", _productId);
                }

                var oldProductId = _productId;
                _productId = value;
                if (!ChangeTracker.Saving)
                {
                    OnProductIdPropertyChanged(value);
                    OnPropertyChanged("ProductId");
                    OnProductFKsChanged(oldProductId, value);
                    RaiseNavigationPropertyChanged("ProductId");
                }
            }
        }

        private int _productId;
        partial void OnProductIdPropertyChanging(ref int value);
        partial void OnProductIdPropertyChanged(int value);
        protected virtual void OnUnitPriceChanged(bool raise = true, bool validate = true)
        {
            if (raise)
                OnPropertyChanged("UnitPrice");
            OnAmountChanged();
        }

        [DataMember]
        public double UnitPrice
        {
            get
            {
                return _unitPrice;
            }

            set
            {
                if (_unitPrice == value)
                {
                    return;
                }

                OnUnitPricePropertyChanging(ref value);
                if (ChangeTracker.IsDetaching)
                    return;
                _unitPrice = value;
                if (!ChangeTracker.Saving)
                {
                    OnUnitPricePropertyChanged(value);
                    OnUnitPriceChanged(validate: !IsDeserializing);
                }
            }
        }

        private double _unitPrice;
        partial void OnUnitPricePropertyChanging(ref double value);
        partial void OnUnitPricePropertyChanged(double value);
        protected virtual void OnQuantityChanged(bool raise = true, bool validate = true)
        {
            if (raise)
                OnPropertyChanged("Quantity");
            OnAmountChanged();
        }

        [DataMember]
        public short Quantity
        {
            get
            {
                return _quantity;
            }

            set
            {
                if (_quantity == value)
                {
                    return;
                }

                OnQuantityPropertyChanging(ref value);
                if (ChangeTracker.IsDetaching)
                    return;
                _quantity = value;
                if (!ChangeTracker.Saving)
                {
                    OnQuantityPropertyChanged(value);
                    OnQuantityChanged(validate: !IsDeserializing);
                }
            }
        }

        private short _quantity;
        partial void OnQuantityPropertyChanging(ref short value);
        partial void OnQuantityPropertyChanged(short value);
        protected virtual void OnDiscountChanged(bool raise = true, bool validate = true)
        {
            if (raise)
                OnPropertyChanged("Discount");
            OnAmountChanged();
            if (validate)
            {
                ValidateDiscountMinValue(Discount);
                ValidateDiscountMaxValue(Discount);
            }
        }

        [DataMember]
        public double Discount
        {
            get
            {
                return _discount;
            }

            set
            {
                if (_discount == value)
                {
                    return;
                }

                OnDiscountPropertyChanging(ref value);
                if (ChangeTracker.IsDetaching)
                    return;
                _discount = value;
                if (!ChangeTracker.Saving)
                {
                    OnDiscountPropertyChanged(value);
                    OnDiscountChanged(validate: !IsDeserializing);
                }
            }
        }

        private double _discount;
        partial void OnDiscountPropertyChanging(ref double value);
        partial void OnDiscountPropertyChanged(double value);
        protected virtual Error ValidateDiscountMinValue(double value)
        {
            var errorInfo = Validators.ValidateMinValue(value, 0, () => Discount, DataErrorInfo);
            var error = Errors.Discount.FirstOrDefault(e => e.Key == "DiscountMinValue");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Discount.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Discount.Add(error = new MetadataError
                {
                Criticity = Criticity.Error, Key = "DiscountMinValue", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual Error ValidateDiscountMaxValue(double value)
        {
            var errorInfo = Validators.ValidateMaxValue(value, 1, () => Discount, DataErrorInfo);
            var error = Errors.Discount.FirstOrDefault(e => e.Key == "DiscountMaxValue");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Discount.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Discount.Add(error = new MetadataError
                {
                Criticity = Criticity.Error, Key = "DiscountMaxValue", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

#endregion
#region Complex Properties
#endregion
#region Navigation Properties
        [DataMember]
        public InvoiceDetail InvoiceDetail
        {
            get
            {
                return _invoiceDetail;
            }

            set
            {
                if (ReferenceEquals(_invoiceDetail, value))
                {
                    return;
                }

                var oldInvoiceDetail = _invoiceDetail;
                if (!ChangeTracker.Saving)
                    OnInvoiceDetailChanging(ref value);
                _invoiceDetail = value;
                FixupInvoiceDetail(oldInvoiceDetail);
                if (!ChangeTracker.Saving)
                {
                    OnInvoiceDetailChanged(value);
                    if (value != null && value.HasTemporaryKey)
                        ResetEntityKey();
                }

                OnInvoiceDetailPropertyChanging(oldInvoiceDetail, _invoiceDetail);
                if (!IsInitializingRelationships)
                {
                    if (_invoiceDetail == null || !_invoiceDetail.IsInitializingRelationships)
                        OnNavigationPropertyChanged("InvoiceDetail");
                    else
                        NotifyPropertyChanged.RaisePropertyChanged(nameof(InvoiceDetail));
                }
            }
        }

        partial void OnInvoiceDetailChanging(ref InvoiceDetail value);
        partial void OnInvoiceDetailChanged(InvoiceDetail value);
        private InvoiceDetail _invoiceDetail;
        protected virtual void OnInvoiceDetailPropertyChanging(InvoiceDetail oldValue, InvoiceDetail newValue)
        {
            if (InvoiceDetailPropertyChanging != null)
                InvoiceDetailPropertyChanging(oldValue, newValue);
        }

        protected internal event Action<InvoiceDetail, InvoiceDetail> InvoiceDetailPropertyChanging;
        [DataMember]
        public Order Order
        {
            get
            {
                return _order;
            }

            set
            {
                if (ReferenceEquals(_order, value))
                {
                    if (!(IsDeserializing || ChangeTracker.Saving || IsInitializingRelationships || value != null && value.IsInitializingRelationships))
                        ValidateOrderRequired(value);
                    return;
                }

                var oldOrder = _order;
                if (!ChangeTracker.Saving)
                    OnOrderChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving || IsInitializingRelationships || value != null && value.IsInitializingRelationships))
                    ValidateOrderRequired(value);
                _order = value;
                FixupOrder(oldOrder);
                if (!ChangeTracker.Saving)
                {
                    OnOrderChanged(value);
                }

                OnOrderPropertyChanging(oldOrder, _order);
                if (!IsInitializingRelationships)
                {
                    if (_order == null || !_order.IsInitializingRelationships)
                        OnNavigationPropertyChanged("Order");
                    else
                        NotifyPropertyChanged.RaisePropertyChanged(nameof(Order));
                }
            }
        }

        partial void OnOrderChanging(ref Order value);
        partial void OnOrderChanged(Order value);
        private Order _order;
        protected virtual Error ValidateOrderRequired(Order value)
        {
            var errorInfo = Validators.ValidateRequiredObjectProperty(value, () => Order, DataErrorInfo);
            var error = Errors.Order.FirstOrDefault(e => e.Key == "OrderRequired");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Order.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Order.Add(error = new MetadataError
                {
                Criticity = Criticity.Mandatory, Key = "OrderRequired", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual void OnOrderFKsChanged(int oldOrderId, int newOrderId)
        {
            if (OrderFKsChanged != null)
                OrderFKsChanged(this, oldOrderId, newOrderId);
        }

        public event Action<OrderDetail, int, int> OrderFKsChanged;
        protected virtual void OnOrderPropertyChanging(Order oldValue, Order newValue)
        {
            if (OrderPropertyChanging != null)
                OrderPropertyChanging(oldValue, newValue);
        }

        protected internal event Action<Order, Order> OrderPropertyChanging;
        private void ProductAddHandler(Product entity)
        {
            if (entity != null)
            {
                entity.PropertyChanged += ProductPropertyChanged;
            }
        }

        private void ProductPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            switch (e.PropertyName)
            {
                case "FullName":
                    OnProductFullNameChanged();
                    break;
            }
        }

        private void ProductRemoveHandler(Product entity)
        {
            if (entity != null)
            {
                entity.PropertyChanged -= ProductPropertyChanged;
            }
        }

        protected virtual void OnProductChanged(Product oldValue, Product newValue, bool raise = true, bool validate = true)
        {
            ProductRemoveHandler(oldValue);
            ProductAddHandler(newValue);
            if (raise)
                OnPropertyChanged("Product", false);
            OnProductFullNameChanged();
        }

        [DataMember]
        public Product Product
        {
            get
            {
                return _product;
            }

            set
            {
                if (ReferenceEquals(_product, value))
                {
                    if (!(IsDeserializing || ChangeTracker.Saving || IsInitializingRelationships || value != null && value.IsInitializingRelationships))
                        ValidateProductRequired(value);
                    return;
                }

                var oldProduct = _product;
                if (!ChangeTracker.Saving)
                    OnProductChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving || IsInitializingRelationships || value != null && value.IsInitializingRelationships))
                    ValidateProductRequired(value);
                _product = value;
                FixupProduct(oldProduct);
                if (!ChangeTracker.Saving)
                {
                    OnProductChanged(value);
                }

                OnProductPropertyChanging(oldProduct, _product);
                OnProductChanged(oldProduct, _product, raise: IsInitializingRelationships);
                if (!IsInitializingRelationships)
                {
                    if (_product == null || !_product.IsInitializingRelationships)
                        OnNavigationPropertyChanged("Product");
                    else
                        NotifyPropertyChanged.RaisePropertyChanged(nameof(Product));
                }
            }
        }

        partial void OnProductChanging(ref Product value);
        partial void OnProductChanged(Product value);
        private Product _product;
        protected virtual Error ValidateProductRequired(Product value)
        {
            var errorInfo = Validators.ValidateRequiredObjectProperty(value, () => Product, DataErrorInfo);
            var error = Errors.Product.FirstOrDefault(e => e.Key == "ProductRequired");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.Product.Remove(error);
                return null;
            }

            if (error == null)
                Errors.Product.Add(error = new MetadataError
                {
                Criticity = Criticity.Mandatory, Key = "ProductRequired", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        protected virtual void OnProductFKsChanged(int oldProductId, int newProductId)
        {
            if (ProductFKsChanged != null)
                ProductFKsChanged(this, oldProductId, newProductId);
        }

        public event Action<OrderDetail, int, int> ProductFKsChanged;
        protected virtual void OnProductPropertyChanging(Product oldValue, Product newValue)
        {
            if (ProductPropertyChanging != null)
                ProductPropertyChanging(oldValue, newValue);
        }

        protected internal event Action<Product, Product> ProductPropertyChanging;
#endregion
#region Specifications
        public virtual IEnumerable<Error> ValidateOnClient(bool force = false)
        {
            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("Discount"))
            {
                Error error = ValidateDiscountMinValue(Discount);
                if (error != null)
                    yield return error;
                error = ValidateDiscountMaxValue(Discount);
                if (error != null)
                    yield return error;
            }

            if ((ChangeTracker.State & ObjectState.Deleted) == 0 && (force || ChangeTracker.OriginalValues.ContainsKey("Order")))
            {
                Error error = ValidateOrderRequired(Order);
                if (error != null)
                    yield return error;
            }

            if ((ChangeTracker.State & ObjectState.Deleted) == 0 && (force || ChangeTracker.OriginalValues.ContainsKey("Product")))
            {
                Error error = ValidateProductRequired(Product);
                if (error != null)
                    yield return error;
            }

            List<Error> errors = null;
            GetCustomValidation(ref errors);
            if (errors != null)
                foreach (var er in errors)
                    yield return er;
        }

        private double _previousAmount;
        public double Amount
        {
            get
            {
                if (Specifications != null && Specifications.HasAmount)
                    return Specifications.Amount;
                return this.UnitPrice * this.Quantity * (1 - this.Discount);
            }

            set
            {
                throw new System.InvalidOperationException();
                ;
            }
        }

        protected virtual void OnAmountPropertyChanging()
        {
            if (AmountPropertyChanging != null)
            {
                var value = Amount;
                if (value == _previousAmount)
                    return;
                var oldValue = _previousAmount;
                _previousAmount = value;
                AmountPropertyChanging(oldValue, value);
            }
        }

        protected internal event Action<double, double> AmountPropertyChanging;
        private string _previousProductFullName;
        public string ProductFullName
        {
            get
            {
                if (Specifications != null && Specifications.HasProductFullName)
                    return Specifications.ProductFullName;
                if (this.Product == null)
                    return default (string);
                return this.Product.FullName;
            }

            set
            {
                throw new System.InvalidOperationException();
                ;
            }
        }

        protected virtual void OnProductFullNamePropertyChanging()
        {
            if (ProductFullNamePropertyChanging != null)
            {
                var value = ProductFullName;
                if (value == _previousProductFullName)
                    return;
                var oldValue = _previousProductFullName;
                _previousProductFullName = value;
                ProductFullNamePropertyChanging(oldValue, value);
            }
        }

        protected internal event Action<string, string> ProductFullNamePropertyChanging;
        partial void GetCustomValidation(ref List<Error> errors);
        [DataContract(Namespace = "http://Northwind/Entities")]
        public partial class OrderDetailSpecifications
        {
            double _amount;
            [DataMember]
            public double Amount
            {
                get
                {
                    return _amount;
                }

                set
                {
                    _amount = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged(nameof(Amount));
                }
            }

            bool _hasAmount;
            [DataMember]
            public bool HasAmount
            {
                get
                {
                    return _hasAmount;
                }

                set
                {
                    _hasAmount = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged(nameof(Amount));
                }
            }

            string _productFullName;
            [DataMember]
            public string ProductFullName
            {
                get
                {
                    return _productFullName;
                }

                set
                {
                    _productFullName = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged(nameof(ProductFullName));
                }
            }

            bool _hasProductFullName;
            [DataMember]
            public bool HasProductFullName
            {
                get
                {
                    return _hasProductFullName;
                }

                set
                {
                    _hasProductFullName = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged(nameof(ProductFullName));
                }
            }

            public NotifyPropertyChanged NotifyPropertyChanged
            {
                get;
                set;
            }
        }

        private OrderDetailSpecifications _specifications;
        [DataMember]
        public OrderDetailSpecifications Specifications
        {
            get
            {
                return _specifications;
            }

            set
            {
                _specifications = value;
                if (_specifications != null)
                    _specifications.NotifyPropertyChanged = NotifyPropertyChanged;
            }
        }

        protected virtual void OnAmountChanged(bool raise = true, bool validate = true)
        {
            if (!IsDeserializing)
                OnAmountPropertyChanging();
            if (raise)
                OnPropertyChanged("Amount", false);
        }

        protected virtual void OnProductFullNameChanged(bool raise = true, bool validate = true)
        {
            if (!IsDeserializing)
                OnProductFullNamePropertyChanging();
            if (raise)
                OnPropertyChanged("ProductFullName", false);
        }

#endregion
#region ChangeTracking
        protected virtual void AddValidationProperty(string propertyName)
        {
            if (!ChangeTracker.ValidationProperties.Contains(propertyName))
                ChangeTracker.ValidationProperties.Add(propertyName);
        }

        protected virtual void OnPropertyChanged(string propertyName, bool isTracked = true)
        {
            if (propertyName != "Id" && isTracked && ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && (ChangeTracker.State & ObjectState.Deleted) == 0)
            {
                if (!(IsDeserializing || ChangeTracker.ModifiedProperties.Contains(propertyName)))
                    ChangeTracker.ModifiedProperties.Add(propertyName);
                ChangeTracker.State = ObjectState.Modified;
            }

            NotifyPropertyChanged.RaisePropertyChanged(propertyName);
            OnPropertyChangedExtension(propertyName);
        }

        partial void OnPropertyChangedExtension(string propertyName);
        protected virtual void OnNavigationPropertyChanged(string propertyName)
        {
            NotifyPropertyChanged.RaisePropertyChanged(propertyName);
            OnNavigationPropertyChangedExtension(propertyName);
            RaiseNavigationPropertyChanged(propertyName);
        }

        partial void OnNavigationPropertyChangedExtension(string propertyName);
        protected virtual void RaiseNavigationPropertyChanged(string propertyName)
        {
            if (NavigationPropertyChanged != null)
                NavigationPropertyChanged(this, propertyName);
        }

        public event Action<OrderDetail, string> NavigationPropertyChanged;
        private ObjectChangeTracker _changeTracker;
        [DataMember]
        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanged += HandleObjectStateChanged;
                }

                return _changeTracker;
            }

            set
            {
                if (_changeTracker != null)
                    _changeTracker.ObjectStateChanged -= HandleObjectStateChanged;
                _changeTracker = value;
                if (_changeTracker != null)
                    _changeTracker.ObjectStateChanged += HandleObjectStateChanged;
            }
        }

        private void HandleObjectStateChanged(object sender, ObjectStateChangedEventArgs e)
        {
            switch (e.NewState)
            {
                case ObjectState.Deleted:
                case ObjectState.CascadeDeleted:
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        IsDeleting = true;
                        ClearNavigationProperties();
                        IsDeleting = false;
                    }

                    break;
                case ObjectState.Detached:
                    ClearNavigationProperties();
                    break;
            }

            OnStateChanged(e.NewState);
        }

        protected virtual void OnStateChanged(ObjectState state)
        {
            if (StateChanged != null)
                StateChanged(this, state);
        }

        public event Action<IObjectWithChangeTracker, ObjectState> StateChanged;
        private bool _isDeserializing;
        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public bool IsDeserializing
        {
            get
            {
                return _isDeserializing;
            }

            set
            {
                if (_isDeserializing == value)
                    return;
                _isDeserializing = value;
            }
        }

        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public bool IsInitializingRelationships
        {
            get;
            set;
        }

        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }

        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }

        public virtual void MarkAsModified()
        {
            ChangeTracker.ChangeTrackingEnabled = true;
            ChangeTracker.State = ObjectState.Modified;
            ChangeTracker.ModifiedProperties.Add("Id");
            ChangeTracker.ModifiedProperties.Add("OrderId");
            ChangeTracker.ModifiedProperties.Add("ProductId");
            ChangeTracker.ModifiedProperties.Add("UnitPrice");
            ChangeTracker.ModifiedProperties.Add("Quantity");
            ChangeTracker.ModifiedProperties.Add("Discount");
        }

        protected virtual void ClearNavigationProperties()
        {
            bool isInitializingRelationships = IsInitializingRelationships;
            IsInitializingRelationships = true;
            InvoiceDetail = null;
            Order = null;
            Product = null;
            IsInitializingRelationships = isInitializingRelationships;
        }

        public bool HasTemporaryKey
        {
            get
            {
                return ChangeTracker.State == ObjectState.Added;
            }
        }

        public virtual bool HasChanges
        {
            get
            {
                return ChangeTracker.State != ObjectState.Unchanged || ChangeTracker.ObjectsRemovedFromCollectionProperties.Any() || ChangeTracker.OriginalValues.Any() || ChangeTracker.ObjectsAddedToCollectionProperties.Any();
            }
        }

        private Guid? _uniqueIdentifier;
        Guid IObjectWithChangeTracker.UniqueIdentifier
        {
            get
            {
                return _uniqueIdentifier ?? (_uniqueIdentifier = Guid.NewGuid()).Value;
            }
        }

#endregion
#region Association Fixup
        private bool IsDeleting
        {
            get;
            set;
        }

        internal virtual void Detach()
        {
            ChangeTracker.State = ObjectState.Detached;
        }

        private void FixupInvoiceDetail(InvoiceDetail previousValue)
        {
            if (previousValue != null)
                ChangeTracker.ObjectStateChanged -= previousValue.HandleCascadeDelete;
            if (InvoiceDetail != null)
                ChangeTracker.ObjectStateChanged += InvoiceDetail.HandleCascadeDelete;
            if (IsDeserializing)
                return;
            if (InvoiceDetail == null && ChangeTracker.ChangeTrackingEnabled && previousValue.ChangeTracker.State == ObjectState.Detached && previousValue.ChangeTracker.DetachedPreviousState != ObjectState.Added)
            {
                object originalValue;
                if (ChangeTracker.OriginalValues.TryGetValue("InvoiceDetail", out originalValue) && (originalValue == null || originalValue == previousValue))
                    ChangeTracker.OriginalValues.Remove("InvoiceDetail");
                return;
            }

            bool isInitializingRelationships = IsInitializingRelationships || (InvoiceDetail != null && InvoiceDetail.IsInitializingRelationships);
            if (previousValue != null && ReferenceEquals(previousValue.OrderDetail, this))
                previousValue.OrderDetail = null;
            if (InvoiceDetail != null)
            {
                InvoiceDetail.OrderDetail = this;
            }

            if (ChangeTracker.ChangeTrackingEnabled && (!isInitializingRelationships || ChangeTracker.State == ObjectState.Added || InvoiceDetail != null && InvoiceDetail.ChangeTracker.State == ObjectState.Added))
            {
                if (ChangeTracker.OriginalValues.ContainsKey("InvoiceDetail") && (ChangeTracker.OriginalValues["InvoiceDetail"] == InvoiceDetail))
                    ChangeTracker.OriginalValues.Remove("InvoiceDetail");
                else
                {
                    ChangeTracker.RecordOriginalValue("InvoiceDetail", previousValue);
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }

                if (InvoiceDetail != null && !InvoiceDetail.ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Detached)
                    InvoiceDetail.MarkAsAdded();
            }
        }

        private void FixupOrder(Order previousValue)
        {
            if (IsDeserializing)
                return;
            if (Order == null && ChangeTracker.ChangeTrackingEnabled && previousValue.ChangeTracker.State == ObjectState.Detached && previousValue.ChangeTracker.DetachedPreviousState != ObjectState.Added)
            {
                object originalValue;
                if (ChangeTracker.OriginalValues.TryGetValue("Order", out originalValue) && (originalValue == null || originalValue == previousValue))
                    ChangeTracker.OriginalValues.Remove("Order");
                return;
            }

            bool isInitializingRelationships = IsInitializingRelationships || (Order != null && Order.IsInitializingRelationships);
            var changeTrackingEnabled = ChangeTracker.ChangeTrackingEnabled;
            if (isInitializingRelationships || ChangeTracker.IsAttaching)
                ChangeTracker.ChangeTrackingEnabled = false;
            if (previousValue != null && previousValue.OrderDetails.Contains(this))
                previousValue.OrderDetails.Remove(this);
            if (Order != null)
            {
                if (!Order.OrderDetails.Contains(this))
                {
                    if (isInitializingRelationships)
                        Order.OrderDetails.Attach(this);
                    else
                        Order.OrderDetails.Add(this);
                }

                OrderId = Order.Id;
            }
            else if (!(IsDeserializing || ChangeTracker.State == ObjectState.Detached) && (ChangeTracker.State & ObjectState.Deleted) == 0)
            {
                OrderId = default (int);
            }

            if (ChangeTracker.ChangeTrackingEnabled && (!isInitializingRelationships || ChangeTracker.State == ObjectState.Added || Order != null && Order.ChangeTracker.State == ObjectState.Added))
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Order") && (ChangeTracker.OriginalValues["Order"] == Order))
                    ChangeTracker.OriginalValues.Remove("Order");
                else
                {
                    ChangeTracker.RecordOriginalValue("Order", previousValue);
                }

                if (Order != null && !Order.ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Detached)
                    Order.MarkAsAdded();
            }

            ChangeTracker.ChangeTrackingEnabled |= changeTrackingEnabled;
        }

        private void FixupProduct(Product previousValue)
        {
            if (IsDeserializing)
                return;
            if (Product == null && ChangeTracker.ChangeTrackingEnabled && previousValue.ChangeTracker.State == ObjectState.Detached && previousValue.ChangeTracker.DetachedPreviousState != ObjectState.Added)
            {
                object originalValue;
                if (ChangeTracker.OriginalValues.TryGetValue("Product", out originalValue) && (originalValue == null || originalValue == previousValue))
                    ChangeTracker.OriginalValues.Remove("Product");
                return;
            }

            bool isInitializingRelationships = IsInitializingRelationships || (Product != null && Product.IsInitializingRelationships);
            var changeTrackingEnabled = ChangeTracker.ChangeTrackingEnabled;
            if (isInitializingRelationships || ChangeTracker.IsAttaching)
                ChangeTracker.ChangeTrackingEnabled = false;
            if (previousValue != null && previousValue.OrderDetails.Contains(this))
                previousValue.OrderDetails.Remove(this);
            if (Product != null)
            {
                if (!Product.OrderDetails.Contains(this))
                {
                    if (isInitializingRelationships)
                        Product.OrderDetails.Attach(this);
                    else
                        Product.OrderDetails.Add(this);
                }

                ProductId = Product.Id;
            }
            else if (!(IsDeserializing || ChangeTracker.State == ObjectState.Detached) && (ChangeTracker.State & ObjectState.Deleted) == 0)
            {
                ProductId = default (int);
            }

            if (ChangeTracker.ChangeTrackingEnabled && (!isInitializingRelationships || ChangeTracker.State == ObjectState.Added || Product != null && Product.ChangeTracker.State == ObjectState.Added))
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Product") && (ChangeTracker.OriginalValues["Product"] == Product))
                    ChangeTracker.OriginalValues.Remove("Product");
                else
                {
                    ChangeTracker.RecordOriginalValue("Product", previousValue);
                }

                if (Product != null && !Product.ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Detached)
                    Product.MarkAsAdded();
            }

            ChangeTracker.ChangeTrackingEnabled |= changeTrackingEnabled;
        }

#endregion
#region EntityKey
        private Guid? _dataTransferEntityKey;
        [DataMember]
        public virtual Guid DataTransferEntityKey
        {
            get
            {
                return _dataTransferEntityKey ?? (_dataTransferEntityKey = Guid.NewGuid()).Value;
            }

            set
            {
                _dataTransferEntityKey = value;
            }
        }

        private string _entityKey;
        public virtual string EntityKey
        {
            get
            {
                switch (ChangeTracker.State)
                {
                    case ObjectState.Added:
                        if (_entityKey == null)
                            _entityKey = "OrderDetail - IdentityKey = " + Guid.NewGuid().ToString();
                        return _entityKey;
                    case ObjectState.Detached:
                        if (_entityKey != null)
                            return _entityKey;
                        if (Id == default (int))
                            goto case ObjectState.Added;
                        break;
                    case ObjectState.Unchanged:
                    case ObjectState.Modified:
                    case ObjectState.CascadeDeleted:
                    case ObjectState.Deleted:
                        _entityKey = null;
                        break;
                }

                return string.Format("OrderDetail - Id={0};", Id);
            }

            set
            {
                _entityKey = value;
            }
        }

        public virtual void ResetEntityKey()
        {
            if (!IsDeserializing)
            {
                var previousEntityKey = _entityKey;
                _entityKey = null;
                OnEntityKeyChanged(previousEntityKey);
            }
        }

        protected virtual void OnEntityKeyChanged(string previousEntityKey)
        {
            if (EntityKeyChanged != null)
                EntityKeyChanged(this, previousEntityKey);
        }

        public event Action<OrderDetail, string> EntityKeyChanged;
        public virtual bool IsTemporaryKey
        {
            get
            {
                return _entityKey != null;
            }
        }

#endregion
#region Dependences
#endregion
#region UISpecifications
        static OrderDetail()
        {
            DynamicType<OrderDetail>.AddProperty("IdIsMandatory", e => e.UISpecifications.GetIdIsMandatory(e));
            DynamicType<OrderDetail>.AddProperty("IdMinValue", e => e.UISpecifications.GetIdMinValue(e));
            DynamicType<OrderDetail>.AddProperty("IdMaxValue", e => e.UISpecifications.GetIdMaxValue(e));
            DynamicType<OrderDetail>.AddProperty("OrderIdIsMandatory", e => e.UISpecifications.GetOrderIdIsMandatory(e));
            DynamicType<OrderDetail>.AddProperty("OrderIdMinValue", e => e.UISpecifications.GetOrderIdMinValue(e));
            DynamicType<OrderDetail>.AddProperty("OrderIdMaxValue", e => e.UISpecifications.GetOrderIdMaxValue(e));
            DynamicType<OrderDetail>.AddProperty("ProductIdIsMandatory", e => e.UISpecifications.GetProductIdIsMandatory(e));
            DynamicType<OrderDetail>.AddProperty("ProductIdMinValue", e => e.UISpecifications.GetProductIdMinValue(e));
            DynamicType<OrderDetail>.AddProperty("ProductIdMaxValue", e => e.UISpecifications.GetProductIdMaxValue(e));
            DynamicType<OrderDetail>.AddProperty("UnitPriceIsMandatory", e => e.UISpecifications.GetUnitPriceIsMandatory(e));
            DynamicType<OrderDetail>.AddProperty("UnitPriceMinValue", e => e.UISpecifications.GetUnitPriceMinValue(e));
            DynamicType<OrderDetail>.AddProperty("UnitPriceMaxValue", e => e.UISpecifications.GetUnitPriceMaxValue(e));
            DynamicType<OrderDetail>.AddProperty("QuantityIsMandatory", e => e.UISpecifications.GetQuantityIsMandatory(e));
            DynamicType<OrderDetail>.AddProperty("QuantityMinValue", e => e.UISpecifications.GetQuantityMinValue(e));
            DynamicType<OrderDetail>.AddProperty("QuantityMaxValue", e => e.UISpecifications.GetQuantityMaxValue(e));
            DynamicType<OrderDetail>.AddProperty("DiscountIsMandatory", e => e.UISpecifications.GetDiscountIsMandatory(e));
            DynamicType<OrderDetail>.AddProperty("DiscountMinValue", e => e.UISpecifications.GetDiscountMinValue(e));
            DynamicType<OrderDetail>.AddProperty("DiscountMaxValue", e => e.UISpecifications.GetDiscountMaxValue(e));
            DynamicType<OrderDetail>.AddProperty("InvoiceDetailIsMandatory", e => e.UISpecifications.GetInvoiceDetailIsMandatory(e));
            DynamicType<OrderDetail>.AddProperty("OrderIsMandatory", e => e.UISpecifications.GetOrderIsMandatory(e));
            DynamicType<OrderDetail>.AddProperty("ProductIsMandatory", e => e.UISpecifications.GetProductIsMandatory(e));
            DynamicType<OrderDetail>.AddProperty("AllErrors", e => e.Errors.AllErrors);
            DynamicType<OrderDetail>.AddProperty("IdErrors", e => e.Errors.Id);
            DynamicType<OrderDetail>.AddProperty("OrderIdErrors", e => e.Errors.OrderId);
            DynamicType<OrderDetail>.AddProperty("ProductIdErrors", e => e.Errors.ProductId);
            DynamicType<OrderDetail>.AddProperty("UnitPriceErrors", e => e.Errors.UnitPrice);
            DynamicType<OrderDetail>.AddProperty("QuantityErrors", e => e.Errors.Quantity);
            DynamicType<OrderDetail>.AddProperty("DiscountErrors", e => e.Errors.Discount);
            DynamicType<OrderDetail>.AddProperty("OrderErrors", e => e.Errors.Order);
            DynamicType<OrderDetail>.AddProperty("ProductErrors", e => e.Errors.Product);
            DynamicType<OrderDetail>.AddProperty("AmountErrors", e => e.Errors.Amount);
            DynamicType<OrderDetail>.AddProperty("ProductFullNameErrors", e => e.Errors.ProductFullName);
            StaticInitializer();
        }

        static partial void StaticInitializer();
        private UISpecificationsInfo _uiSpecifications;
        private UISpecificationsInfo UISpecifications
        {
            get
            {
                return _uiSpecifications ?? (_uiSpecifications = CreateOrderDetailUISpecifications());
            }
        }

        protected virtual UISpecificationsInfo CreateOrderDetailUISpecifications()
        {
            return new UISpecificationsInfo();
        }

        public partial class UISpecificationsInfo
        {
            public virtual bool GetIdIsMandatory(OrderDetail entity)
            {
                return true;
            }

            public virtual int ? GetIdMinValue(OrderDetail entity)
            {
                return null;
            }

            public virtual int ? GetIdMaxValue(OrderDetail entity)
            {
                return null;
            }

            public virtual bool GetOrderIdIsMandatory(OrderDetail entity)
            {
                return true;
            }

            public virtual int ? GetOrderIdMinValue(OrderDetail entity)
            {
                return null;
            }

            public virtual int ? GetOrderIdMaxValue(OrderDetail entity)
            {
                return null;
            }

            public virtual bool GetProductIdIsMandatory(OrderDetail entity)
            {
                return true;
            }

            public virtual int ? GetProductIdMinValue(OrderDetail entity)
            {
                return null;
            }

            public virtual int ? GetProductIdMaxValue(OrderDetail entity)
            {
                return null;
            }

            public virtual bool GetUnitPriceIsMandatory(OrderDetail entity)
            {
                return true;
            }

            public virtual double ? GetUnitPriceMinValue(OrderDetail entity)
            {
                return null;
            }

            public virtual double ? GetUnitPriceMaxValue(OrderDetail entity)
            {
                return null;
            }

            public virtual bool GetQuantityIsMandatory(OrderDetail entity)
            {
                return true;
            }

            public virtual short ? GetQuantityMinValue(OrderDetail entity)
            {
                return null;
            }

            public virtual short ? GetQuantityMaxValue(OrderDetail entity)
            {
                return null;
            }

            public virtual bool GetDiscountIsMandatory(OrderDetail entity)
            {
                return true;
            }

            public virtual double ? GetDiscountMinValue(OrderDetail entity)
            {
                return 0;
            }

            public virtual double ? GetDiscountMaxValue(OrderDetail entity)
            {
                return 1;
            }

            public virtual bool GetInvoiceDetailIsMandatory(WAQSWorkshopClient.OrderDetail entity)
            {
                return false;
            }

            public virtual bool GetOrderIsMandatory(WAQSWorkshopClient.OrderDetail entity)
            {
                return true;
            }

            public virtual bool GetProductIsMandatory(WAQSWorkshopClient.OrderDetail entity)
            {
                return true;
            }
        }

        private ErrorsSpecifications _errors;
        protected ErrorsSpecifications Errors
        {
            get
            {
                return _errors ?? (_errors = new ErrorsSpecifications());
            }
        }

        bool IEntityWithErrors.HasErrors
        {
            get
            {
                return Errors.AllErrors.Count != 0;
            }
        }

        event Action IEntityWithErrors.HasErrorsChanged
        {
            add
            {
                Errors.HasErrorChanged += value;
            }

            remove
            {
                Errors.HasErrorChanged += value;
            }
        }

        public partial class ErrorsSpecifications
        {
            private ObservableCollection<Error> _id;
            public ObservableCollection<Error> Id
            {
                get
                {
                    return _id ?? (_id = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _orderId;
            public ObservableCollection<Error> OrderId
            {
                get
                {
                    return _orderId ?? (_orderId = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _productId;
            public ObservableCollection<Error> ProductId
            {
                get
                {
                    return _productId ?? (_productId = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _unitPrice;
            public ObservableCollection<Error> UnitPrice
            {
                get
                {
                    return _unitPrice ?? (_unitPrice = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _quantity;
            public ObservableCollection<Error> Quantity
            {
                get
                {
                    return _quantity ?? (_quantity = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _discount;
            public ObservableCollection<Error> Discount
            {
                get
                {
                    return _discount ?? (_discount = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _order;
            public ObservableCollection<Error> Order
            {
                get
                {
                    return _order ?? (_order = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _product;
            public ObservableCollection<Error> Product
            {
                get
                {
                    return _product ?? (_product = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _amount;
            public ObservableCollection<Error> Amount
            {
                get
                {
                    return _amount ?? (_amount = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _productFullName;
            public ObservableCollection<Error> ProductFullName
            {
                get
                {
                    return _productFullName ?? (_productFullName = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _allErrors;
            public ObservableCollection<Error> AllErrors
            {
                get
                {
                    if (_allErrors == null)
                    {
                        _allErrors = new ObservableCollection<Error>();
                        NotifyCollectionChangedEventHandler errorsCollectionChanged = (_, e) =>
                        {
                            if (e.NewItems != null)
                                foreach (Error error in e.NewItems)
                                {
                                    if (!_allErrors.Any(er => er.Key == error.Key))
                                        _allErrors.Add(error);
                                }

                            if (e.OldItems != null)
                                foreach (Error error in e.OldItems)
                                    _allErrors.Remove(error);
                        }

                        ;
                        AddAllErrorsHandlers(errorsCollectionChanged);
                    }

                    return _allErrors;
                }
            }

            protected virtual void AddAllErrorsHandlers(NotifyCollectionChangedEventHandler errorsCollectionChanged)
            {
                NotifyCollectionChangedEventHandler specificErrorsCollectionChanged = (sender, e) =>
                {
                    errorsCollectionChanged(sender, e);
                    switch (e.Action)
                    {
                        case NotifyCollectionChangedAction.Add:
                            if (AllErrors.Count == e.NewItems.Count)
                                OnHasErrorChanged();
                            break;
                        case NotifyCollectionChangedAction.Remove:
                            if (AllErrors.Count == 0)
                                OnHasErrorChanged();
                            break;
                    }
                }

                ;
                Id.CollectionChanged += specificErrorsCollectionChanged;
                OrderId.CollectionChanged += specificErrorsCollectionChanged;
                ProductId.CollectionChanged += specificErrorsCollectionChanged;
                UnitPrice.CollectionChanged += specificErrorsCollectionChanged;
                Quantity.CollectionChanged += specificErrorsCollectionChanged;
                Discount.CollectionChanged += specificErrorsCollectionChanged;
                Order.CollectionChanged += specificErrorsCollectionChanged;
                Product.CollectionChanged += specificErrorsCollectionChanged;
                Amount.CollectionChanged += specificErrorsCollectionChanged;
                ProductFullName.CollectionChanged += specificErrorsCollectionChanged;
            }

            protected void OnHasErrorChanged()
            {
                if (HasErrorChanged != null)
                    OnHasErrorChanged();
            }

            public event Action HasErrorChanged;
        }
#endregion
    }
}
            