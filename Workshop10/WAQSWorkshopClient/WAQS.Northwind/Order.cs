//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

            using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using WAQS.ClientContext;
using WAQS.ClientContext.Interfaces;
using WAQS.ClientContext.Interfaces.Errors;
using WAQS.ComponentModel;
using WAQS.Entities;
using WAQS.EntitiesTracking;

namespace WAQSWorkshopClient
{
    [DataContract(IsReference = true, Namespace = "http://Northwind/Entities")]
    [KnownType(typeof (Customer))]
    [KnownType(typeof (Employee))]
    [KnownType(typeof (Invoice))]
    [KnownType(typeof (OrderDetail))]
    public partial class Order : DynamicType, IEntityWithErrors
    {
#region DynamicType
        protected override ICustomTypeDescriptor CustomTypeDescriptor
        {
            get
            {
                return new DynamicType<Order>(this, CustomPropertyDescriptors);
            }
        }

        protected override IEnumerable<CustomPropertyDescriptor> CustomPropertyDescriptors
        {
            get
            {
                return DynamicType<Order>.CustomProperties;
            }
        }

#endregion
#region Simple Properties
        [DataMember]
        public int Id
        {
            get
            {
                return _id;
            }

            set
            {
                if (_id == value)
                {
                    return;
                }

                OnIdPropertyChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                _id = value;
                if (!ChangeTracker.Saving)
                {
                    OnIdPropertyChanged(value);
                    OnPropertyChanged("Id");
                    ResetEntityKey();
                }
            }
        }

        private int _id;
        partial void OnIdPropertyChanging(ref int value);
        partial void OnIdPropertyChanged(int value);
        [DataMember]
        public string CustomerId
        {
            get
            {
                return _customerId;
            }

            set
            {
                if (_customerId == value)
                {
                    return;
                }

                OnCustomerIdPropertyChanging(ref value);
                if (!IsDeserializing)
                {
                    if (Customer != null && Customer.Id != value)
                    {
                        Customer = null;
                    }

                    ChangeTracker.RecordOriginalValue("CustomerId", _customerId);
                }

                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateCustomerIdMaxLength(value);
                    if (value != null)
                        value = value.PadRight(5);
                }

                var oldCustomerId = _customerId;
                _customerId = value;
                if (!ChangeTracker.Saving)
                {
                    OnCustomerIdPropertyChanged(value);
                    OnPropertyChanged("CustomerId");
                    OnCustomerFKsChanged(oldCustomerId, value);
                    RaiseNavigationPropertyChanged("CustomerId");
                }
            }
        }

        private string _customerId;
        partial void OnCustomerIdPropertyChanging(ref string value);
        partial void OnCustomerIdPropertyChanged(string value);
        protected virtual Error ValidateCustomerIdMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 5, () => CustomerId, DataErrorInfo);
            var error = Errors.CustomerId.FirstOrDefault(e => e.Key == "CustomerIdMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.CustomerId.Remove(error);
                return null;
            }

            if (error == null)
                Errors.CustomerId.Add(error = new MetadataError
                {
                Criticity = Criticity.Error, Key = "CustomerIdMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public Nullable<int> EmployeeId
        {
            get
            {
                return _employeeId;
            }

            set
            {
                if (_employeeId == value)
                {
                    return;
                }

                OnEmployeeIdPropertyChanging(ref value);
                if (!IsDeserializing)
                {
                    if (Employee != null && Employee.Id != value)
                    {
                        Employee = null;
                    }

                    ChangeTracker.RecordOriginalValue("EmployeeId", _employeeId);
                }

                var oldEmployeeId = _employeeId;
                _employeeId = value;
                if (!ChangeTracker.Saving)
                {
                    OnEmployeeIdPropertyChanged(value);
                    OnPropertyChanged("EmployeeId");
                    OnEmployeeFKsChanged(oldEmployeeId, value);
                    RaiseNavigationPropertyChanged("EmployeeId");
                }
            }
        }

        private Nullable<int> _employeeId;
        partial void OnEmployeeIdPropertyChanging(ref Nullable<int> value);
        partial void OnEmployeeIdPropertyChanged(Nullable<int> value);
        [DataMember]
        public System.DateTime OrderDate
        {
            get
            {
                return _orderDate;
            }

            set
            {
                if (_orderDate == value)
                {
                    return;
                }

                OnOrderDatePropertyChanging(ref value);
                _orderDate = value;
                if (!ChangeTracker.Saving)
                {
                    OnOrderDatePropertyChanged(value);
                    OnPropertyChanged("OrderDate");
                }
            }
        }

        private System.DateTime _orderDate;
        partial void OnOrderDatePropertyChanging(ref System.DateTime value);
        partial void OnOrderDatePropertyChanged(System.DateTime value);
        [DataMember]
        public Nullable<System.DateTime> RequiredDate
        {
            get
            {
                return _requiredDate;
            }

            set
            {
                if (_requiredDate == value)
                {
                    return;
                }

                OnRequiredDatePropertyChanging(ref value);
                _requiredDate = value;
                if (!ChangeTracker.Saving)
                {
                    OnRequiredDatePropertyChanged(value);
                    OnPropertyChanged("RequiredDate");
                }
            }
        }

        private Nullable<System.DateTime> _requiredDate;
        partial void OnRequiredDatePropertyChanging(ref Nullable<System.DateTime> value);
        partial void OnRequiredDatePropertyChanged(Nullable<System.DateTime> value);
        [DataMember]
        public Nullable<System.DateTime> ShippedDate
        {
            get
            {
                return _shippedDate;
            }

            set
            {
                if (_shippedDate == value)
                {
                    return;
                }

                OnShippedDatePropertyChanging(ref value);
                _shippedDate = value;
                if (!ChangeTracker.Saving)
                {
                    OnShippedDatePropertyChanged(value);
                    OnPropertyChanged("ShippedDate");
                }
            }
        }

        private Nullable<System.DateTime> _shippedDate;
        partial void OnShippedDatePropertyChanging(ref Nullable<System.DateTime> value);
        partial void OnShippedDatePropertyChanged(Nullable<System.DateTime> value);
        [DataMember]
        public Nullable<int> ShipVia
        {
            get
            {
                return _shipVia;
            }

            set
            {
                if (_shipVia == value)
                {
                    return;
                }

                OnShipViaPropertyChanging(ref value);
                _shipVia = value;
                if (!ChangeTracker.Saving)
                {
                    OnShipViaPropertyChanged(value);
                    OnPropertyChanged("ShipVia");
                }
            }
        }

        private Nullable<int> _shipVia;
        partial void OnShipViaPropertyChanging(ref Nullable<int> value);
        partial void OnShipViaPropertyChanged(Nullable<int> value);
        [DataMember]
        public Nullable<decimal> Freight
        {
            get
            {
                return _freight;
            }

            set
            {
                if (_freight == value)
                {
                    return;
                }

                OnFreightPropertyChanging(ref value);
                _freight = value;
                if (!ChangeTracker.Saving)
                {
                    OnFreightPropertyChanged(value);
                    OnPropertyChanged("Freight");
                }
            }
        }

        private Nullable<decimal> _freight;
        partial void OnFreightPropertyChanging(ref Nullable<decimal> value);
        partial void OnFreightPropertyChanged(Nullable<decimal> value);
        [DataMember]
        public string ShipName
        {
            get
            {
                return _shipName;
            }

            set
            {
                if (_shipName == value)
                {
                    return;
                }

                OnShipNamePropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateShipNameMaxLength(value);
                }

                _shipName = value;
                if (!ChangeTracker.Saving)
                {
                    OnShipNamePropertyChanged(value);
                    OnPropertyChanged("ShipName");
                }
            }
        }

        private string _shipName;
        partial void OnShipNamePropertyChanging(ref string value);
        partial void OnShipNamePropertyChanged(string value);
        protected virtual Error ValidateShipNameMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 40, () => ShipName, DataErrorInfo);
            var error = Errors.ShipName.FirstOrDefault(e => e.Key == "ShipNameMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.ShipName.Remove(error);
                return null;
            }

            if (error == null)
                Errors.ShipName.Add(error = new MetadataError
                {
                Criticity = Criticity.Error, Key = "ShipNameMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string ShipAddress
        {
            get
            {
                return _shipAddress;
            }

            set
            {
                if (_shipAddress == value)
                {
                    return;
                }

                OnShipAddressPropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateShipAddressMaxLength(value);
                }

                _shipAddress = value;
                if (!ChangeTracker.Saving)
                {
                    OnShipAddressPropertyChanged(value);
                    OnPropertyChanged("ShipAddress");
                }
            }
        }

        private string _shipAddress;
        partial void OnShipAddressPropertyChanging(ref string value);
        partial void OnShipAddressPropertyChanged(string value);
        protected virtual Error ValidateShipAddressMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 60, () => ShipAddress, DataErrorInfo);
            var error = Errors.ShipAddress.FirstOrDefault(e => e.Key == "ShipAddressMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.ShipAddress.Remove(error);
                return null;
            }

            if (error == null)
                Errors.ShipAddress.Add(error = new MetadataError
                {
                Criticity = Criticity.Error, Key = "ShipAddressMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string ShipCity
        {
            get
            {
                return _shipCity;
            }

            set
            {
                if (_shipCity == value)
                {
                    return;
                }

                OnShipCityPropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateShipCityMaxLength(value);
                }

                _shipCity = value;
                if (!ChangeTracker.Saving)
                {
                    OnShipCityPropertyChanged(value);
                    OnPropertyChanged("ShipCity");
                }
            }
        }

        private string _shipCity;
        partial void OnShipCityPropertyChanging(ref string value);
        partial void OnShipCityPropertyChanged(string value);
        protected virtual Error ValidateShipCityMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 15, () => ShipCity, DataErrorInfo);
            var error = Errors.ShipCity.FirstOrDefault(e => e.Key == "ShipCityMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.ShipCity.Remove(error);
                return null;
            }

            if (error == null)
                Errors.ShipCity.Add(error = new MetadataError
                {
                Criticity = Criticity.Error, Key = "ShipCityMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string ShipRegion
        {
            get
            {
                return _shipRegion;
            }

            set
            {
                if (_shipRegion == value)
                {
                    return;
                }

                OnShipRegionPropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateShipRegionMaxLength(value);
                }

                _shipRegion = value;
                if (!ChangeTracker.Saving)
                {
                    OnShipRegionPropertyChanged(value);
                    OnPropertyChanged("ShipRegion");
                }
            }
        }

        private string _shipRegion;
        partial void OnShipRegionPropertyChanging(ref string value);
        partial void OnShipRegionPropertyChanged(string value);
        protected virtual Error ValidateShipRegionMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 15, () => ShipRegion, DataErrorInfo);
            var error = Errors.ShipRegion.FirstOrDefault(e => e.Key == "ShipRegionMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.ShipRegion.Remove(error);
                return null;
            }

            if (error == null)
                Errors.ShipRegion.Add(error = new MetadataError
                {
                Criticity = Criticity.Error, Key = "ShipRegionMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string ShipPostalCode
        {
            get
            {
                return _shipPostalCode;
            }

            set
            {
                if (_shipPostalCode == value)
                {
                    return;
                }

                OnShipPostalCodePropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateShipPostalCodeMaxLength(value);
                }

                _shipPostalCode = value;
                if (!ChangeTracker.Saving)
                {
                    OnShipPostalCodePropertyChanged(value);
                    OnPropertyChanged("ShipPostalCode");
                }
            }
        }

        private string _shipPostalCode;
        partial void OnShipPostalCodePropertyChanging(ref string value);
        partial void OnShipPostalCodePropertyChanged(string value);
        protected virtual Error ValidateShipPostalCodeMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 10, () => ShipPostalCode, DataErrorInfo);
            var error = Errors.ShipPostalCode.FirstOrDefault(e => e.Key == "ShipPostalCodeMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.ShipPostalCode.Remove(error);
                return null;
            }

            if (error == null)
                Errors.ShipPostalCode.Add(error = new MetadataError
                {
                Criticity = Criticity.Error, Key = "ShipPostalCodeMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

        [DataMember]
        public string ShipCountry
        {
            get
            {
                return _shipCountry;
            }

            set
            {
                if (_shipCountry == value)
                {
                    return;
                }

                OnShipCountryPropertyChanging(ref value);
                if (!(IsDeserializing || ChangeTracker.Saving))
                {
                    ValidateShipCountryMaxLength(value);
                }

                _shipCountry = value;
                if (!ChangeTracker.Saving)
                {
                    OnShipCountryPropertyChanged(value);
                    OnPropertyChanged("ShipCountry");
                }
            }
        }

        private string _shipCountry;
        partial void OnShipCountryPropertyChanging(ref string value);
        partial void OnShipCountryPropertyChanged(string value);
        protected virtual Error ValidateShipCountryMaxLength(string value)
        {
            if (value == null)
                return null;
            var errorInfo = Validators.ValidateStringMaxLength(value, 15, () => ShipCountry, DataErrorInfo);
            var error = Errors.ShipCountry.FirstOrDefault(e => e.Key == "ShipCountryMaxLength");
            if (errorInfo == null)
            {
                if (error != null)
                    Errors.ShipCountry.Remove(error);
                return null;
            }

            if (error == null)
                Errors.ShipCountry.Add(error = new MetadataError
                {
                Criticity = Criticity.Error, Key = "ShipCountryMaxLength", Message = errorInfo.Message, ErrorInfo = errorInfo
                }

                );
            return error;
        }

#endregion
#region Complex Properties
#endregion
#region Navigation Properties
        private void CustomerAddHandler(Customer entity)
        {
            if (entity != null)
            {
                entity.PropertyChanged += CustomerPropertyChanged;
            }
        }

        private void CustomerPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            switch (e.PropertyName)
            {
                case "CompanyName":
                    OnCustomerCompanyNameChanged();
                    break;
                case "ContactName":
                    OnCustomerContactNameChanged();
                    break;
            }
        }

        private void CustomerRemoveHandler(Customer entity)
        {
            if (entity != null)
            {
                entity.PropertyChanged -= CustomerPropertyChanged;
            }
        }

        protected virtual void OnCustomerChanged(Customer oldValue, Customer newValue, bool raise = true, bool validate = true)
        {
            CustomerRemoveHandler(oldValue);
            CustomerAddHandler(newValue);
            if (raise)
                OnPropertyChanged("Customer", false);
            OnCustomerCompanyNameChanged();
            OnCustomerContactNameChanged();
        }

        [DataMember]
        public Customer Customer
        {
            get
            {
                return _customer;
            }

            set
            {
                if (ReferenceEquals(_customer, value))
                {
                    return;
                }

                var oldCustomer = _customer;
                if (!ChangeTracker.Saving)
                    OnCustomerChanging(ref value);
                _customer = value;
                FixupCustomer(oldCustomer);
                if (!ChangeTracker.Saving)
                {
                    OnCustomerChanged(value);
                }

                OnCustomerPropertyChanging(oldCustomer, _customer);
                OnCustomerChanged(oldCustomer, _customer, raise: IsInitializingRelationships);
                if (!IsInitializingRelationships)
                {
                    if (_customer == null || !_customer.IsInitializingRelationships)
                        OnNavigationPropertyChanged("Customer");
                    else
                        NotifyPropertyChanged.RaisePropertyChanged(() => Customer);
                }
            }
        }

        partial void OnCustomerChanging(ref Customer value);
        partial void OnCustomerChanged(Customer value);
        private Customer _customer;
        protected virtual void OnCustomerFKsChanged(string oldCustomerId, string newCustomerId)
        {
            if (CustomerFKsChanged != null)
                CustomerFKsChanged(this, oldCustomerId, newCustomerId);
        }

        public event Action<Order, string, string> CustomerFKsChanged;
        protected virtual void OnCustomerPropertyChanging(Customer oldValue, Customer newValue)
        {
            if (CustomerPropertyChanging != null)
                CustomerPropertyChanging(oldValue, newValue);
        }

        protected internal event Action<Customer, Customer> CustomerPropertyChanging;
        [DataMember]
        public Employee Employee
        {
            get
            {
                return _employee;
            }

            set
            {
                if (ReferenceEquals(_employee, value))
                {
                    return;
                }

                var oldEmployee = _employee;
                if (!ChangeTracker.Saving)
                    OnEmployeeChanging(ref value);
                _employee = value;
                FixupEmployee(oldEmployee);
                if (!ChangeTracker.Saving)
                {
                    OnEmployeeChanged(value);
                }

                OnEmployeePropertyChanging(oldEmployee, _employee);
                if (!IsInitializingRelationships)
                {
                    if (_employee == null || !_employee.IsInitializingRelationships)
                        OnNavigationPropertyChanged("Employee");
                    else
                        NotifyPropertyChanged.RaisePropertyChanged(() => Employee);
                }
            }
        }

        partial void OnEmployeeChanging(ref Employee value);
        partial void OnEmployeeChanged(Employee value);
        private Employee _employee;
        protected virtual void OnEmployeeFKsChanged(Nullable<int> oldEmployeeId, Nullable<int> newEmployeeId)
        {
            if (EmployeeFKsChanged != null)
                EmployeeFKsChanged(this, oldEmployeeId, newEmployeeId);
        }

        public event Action<Order, Nullable<int>, Nullable<int>> EmployeeFKsChanged;
        protected virtual void OnEmployeePropertyChanging(Employee oldValue, Employee newValue)
        {
            if (EmployeePropertyChanging != null)
                EmployeePropertyChanging(oldValue, newValue);
        }

        protected internal event Action<Employee, Employee> EmployeePropertyChanging;
        protected virtual void OnInvoiceChanged(Invoice oldValue, Invoice newValue, bool raise = true, bool validate = true)
        {
            if (raise)
                OnPropertyChanged("Invoice", false);
            OnHasInvoiceChanged();
        }

        [DataMember]
        public Invoice Invoice
        {
            get
            {
                return _invoice;
            }

            set
            {
                if (ReferenceEquals(_invoice, value))
                {
                    return;
                }

                var oldInvoice = _invoice;
                if (!ChangeTracker.Saving)
                    OnInvoiceChanging(ref value);
                _invoice = value;
                FixupInvoice(oldInvoice);
                if (!ChangeTracker.Saving)
                {
                    OnInvoiceChanged(value);
                    if (value != null && value.HasTemporaryKey)
                        ResetEntityKey();
                }

                OnInvoicePropertyChanging(oldInvoice, _invoice);
                OnInvoiceChanged(oldInvoice, _invoice, raise: IsInitializingRelationships);
                if (!IsInitializingRelationships)
                {
                    if (_invoice == null || !_invoice.IsInitializingRelationships)
                        OnNavigationPropertyChanged("Invoice");
                    else
                        NotifyPropertyChanged.RaisePropertyChanged(() => Invoice);
                }
            }
        }

        partial void OnInvoiceChanging(ref Invoice value);
        partial void OnInvoiceChanged(Invoice value);
        private Invoice _invoice;
        protected virtual void OnInvoicePropertyChanging(Invoice oldValue, Invoice newValue)
        {
            if (InvoicePropertyChanging != null)
                InvoicePropertyChanging(oldValue, newValue);
        }

        protected internal event Action<Invoice, Invoice> InvoicePropertyChanging;
        private void OrderDetailsCollectionChanged(object _, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (OrderDetail entity in e.NewItems)
                        OrderDetailsAddHandler(entity);
                    OnTotalChanged();
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (OrderDetail entity in e.OldItems)
                        OrderDetailsRemoveHandler(entity);
                    OnTotalChanged();
                    break;
                case NotifyCollectionChangedAction.Replace:
                    foreach (OrderDetail entity in e.NewItems)
                        OrderDetailsAddHandler(entity);
                    foreach (OrderDetail entity in e.OldItems)
                        OrderDetailsRemoveHandler(entity);
                    OnTotalChanged();
                    break;
                case NotifyCollectionChangedAction.Reset:
                    // Should not append because TrackableCollection uses Remove for each of them instead using real Clear method
                    throw new InvalidOperationException();
            }
        }

        private void OrderDetailsAddHandler(TrackableCollection<OrderDetail> collection)
        {
            if (collection != null)
            {
                foreach (var entity in collection)
                    OrderDetailsAddHandler(entity);
                collection.CollectionChanged += OrderDetailsCollectionChanged;
            }
        }

        private void OrderDetailsRemoveHandler(TrackableCollection<OrderDetail> collection)
        {
            if (collection != null)
            {
                foreach (var entity in collection)
                    OrderDetailsRemoveHandler(entity);
                collection.CollectionChanged -= OrderDetailsCollectionChanged;
            }
        }

        private void OrderDetailsAddHandler(OrderDetail entity)
        {
            if (entity != null)
            {
                entity.PropertyChanged += OrderDetailsPropertyChanged;
            }
        }

        private void OrderDetailsPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            switch (e.PropertyName)
            {
                case "Amount":
                    OnTotalChanged();
                    break;
            }
        }

        private void OrderDetailsRemoveHandler(OrderDetail entity)
        {
            if (entity != null)
            {
                entity.PropertyChanged -= OrderDetailsPropertyChanged;
            }
        }

        protected virtual void OnOrderDetailsChanged(TrackableCollection<OrderDetail> oldValue, TrackableCollection<OrderDetail> newValue, bool raise = true, bool validate = true)
        {
            OrderDetailsRemoveHandler(oldValue);
            OrderDetailsAddHandler(newValue);
            if (raise)
                OnPropertyChanged("OrderDetails", false);
            OnTotalChanged();
        }

        [DataMember]
        public TrackableCollection<OrderDetail> OrderDetails
        {
            get
            {
                if (!ChangeTracker.Saving)
                    OnGetOrderDetails();
                if (OnGetOrderDetailsAction != null)
                    OnGetOrderDetailsAction();
                if (_orderDetails == null)
                {
                    _orderDetails = new TrackableCollection<OrderDetail>();
                    SetFixupOrderDetails();
                    OnOrderDetailsPropertyChanging(null, _orderDetails);
                    OnOrderDetailsChanged(null, _orderDetails, false);
                    OnOrderDetailsPropertyChanged(null, _orderDetails);
                }

                return _orderDetails;
            }

            set
            {
                if (ReferenceEquals(_orderDetails, value))
                    return;
                if (ChangeTracker.ChangeTrackingEnabled)
                    throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                var oldOrderDetails = _orderDetails;
                if (_orderDetails != null)
                {
                    _orderDetails.CollectionChanged -= FixupOrderDetails;
                }

                _orderDetails = value;
                if (_orderDetails != null)
                {
                    SetFixupOrderDetails();
                }

                OnOrderDetailsPropertyChanging(oldOrderDetails, _orderDetails);
                OnOrderDetailsChanged(oldOrderDetails, _orderDetails);
                OnOrderDetailsPropertyChanged(oldOrderDetails, _orderDetails);
                OnNavigationPropertyChanged("OrderDetails");
            }
        }

        partial void OnGetOrderDetails();
        public Action OnGetOrderDetailsAction
        {
            get;
            set;
        }

        partial void OnOrderDetailsPropertyChanged(TrackableCollection<OrderDetail> oldValue, TrackableCollection<OrderDetail> newValue);
        private TrackableCollection<OrderDetail> _orderDetails;
        private void SetFixupOrderDetails()
        {
            _orderDetails.CollectionChanged += FixupOrderDetails;
            var orderDetailsAsITrackableCollection = (ITrackableCollection<OrderDetail>)_orderDetails;
            orderDetailsAsITrackableCollection.GetWhereExpression = e => e.OrderId == Id;
            orderDetailsAsITrackableCollection.GetClientContext = () =>
            {
                IClientEntitySet clientEntitySet = ClientEntitySetExtensions.GetClientEntitySet(this);
                return clientEntitySet == null || ChangeTracker.State == ObjectState.Detached ? null : clientEntitySet.Context;
            }

            ;
        }

        protected virtual void OnOrderDetailsPropertyChanging(TrackableCollection<OrderDetail> oldValue, TrackableCollection<OrderDetail> newValue)
        {
            if (OrderDetailsPropertyChanging != null)
                OrderDetailsPropertyChanging(oldValue, newValue);
        }

        protected internal event Action<TrackableCollection<OrderDetail>, TrackableCollection<OrderDetail>> OrderDetailsPropertyChanging;
#endregion
#region Specifications
        public virtual IEnumerable<Error> ValidateOnClient(bool force = false)
        {
            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("CustomerId"))
            {
                Error error = ValidateCustomerIdMaxLength(CustomerId);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("ShipName"))
            {
                Error error = ValidateShipNameMaxLength(ShipName);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("ShipAddress"))
            {
                Error error = ValidateShipAddressMaxLength(ShipAddress);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("ShipCity"))
            {
                Error error = ValidateShipCityMaxLength(ShipCity);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("ShipRegion"))
            {
                Error error = ValidateShipRegionMaxLength(ShipRegion);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("ShipPostalCode"))
            {
                Error error = ValidateShipPostalCodeMaxLength(ShipPostalCode);
                if (error != null)
                    yield return error;
            }

            if (force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified && ChangeTracker.ModifiedProperties.Contains("ShipCountry"))
            {
                Error error = ValidateShipCountryMaxLength(ShipCountry);
                if (error != null)
                    yield return error;
            }

            List<Error> errors = null;
            GetCustomValidation(ref errors);
            if (errors != null)
                foreach (var er in errors)
                    yield return er;
        }

        private bool _previousHasInvoice;
        public bool HasInvoice
        {
            get
            {
                if (Specifications != null && Specifications.HasHasInvoice)
                    return Specifications.HasInvoice;
                return this.Invoice != null;
            }

            set
            {
                throw new System.InvalidOperationException();
                ;
            }
        }

        protected virtual void OnHasInvoicePropertyChanging()
        {
            if (HasInvoicePropertyChanging != null)
            {
                var value = HasInvoice;
                if (value == _previousHasInvoice)
                    return;
                var oldValue = _previousHasInvoice;
                _previousHasInvoice = value;
                HasInvoicePropertyChanging(oldValue, value);
            }
        }

        protected internal event Action<bool, bool> HasInvoicePropertyChanging;
        private string _previousCustomerCompanyName;
        public string CustomerCompanyName
        {
            get
            {
                if (Specifications != null && Specifications.HasCustomerCompanyName)
                    return Specifications.CustomerCompanyName;
                if (this.Customer == null)
                    return default (string);
                return this.Customer.CompanyName;
            }

            set
            {
                throw new System.InvalidOperationException();
                ;
            }
        }

        protected virtual void OnCustomerCompanyNamePropertyChanging()
        {
            if (CustomerCompanyNamePropertyChanging != null)
            {
                var value = CustomerCompanyName;
                if (value == _previousCustomerCompanyName)
                    return;
                var oldValue = _previousCustomerCompanyName;
                _previousCustomerCompanyName = value;
                CustomerCompanyNamePropertyChanging(oldValue, value);
            }
        }

        protected internal event Action<string, string> CustomerCompanyNamePropertyChanging;
        private string _previousCustomerContactName;
        public string CustomerContactName
        {
            get
            {
                if (Specifications != null && Specifications.HasCustomerContactName)
                    return Specifications.CustomerContactName;
                if (this.Customer == null)
                    return default (string);
                return this.Customer.ContactName;
            }

            set
            {
                throw new System.InvalidOperationException();
                ;
            }
        }

        protected virtual void OnCustomerContactNamePropertyChanging()
        {
            if (CustomerContactNamePropertyChanging != null)
            {
                var value = CustomerContactName;
                if (value == _previousCustomerContactName)
                    return;
                var oldValue = _previousCustomerContactName;
                _previousCustomerContactName = value;
                CustomerContactNamePropertyChanging(oldValue, value);
            }
        }

        protected internal event Action<string, string> CustomerContactNamePropertyChanging;
        private double _previousTotal;
        public double Total
        {
            get
            {
                if (Specifications != null && Specifications.HasTotal)
                    return Specifications.Total;
                if (this.OrderDetails == null)
                    return default (double);
                return this.OrderDetails.Sum(od =>
                {
                    if (od == null)
                        return default (double);
                    return od.Amount;
                }

                );
            }

            set
            {
                throw new System.InvalidOperationException();
                ;
            }
        }

        protected virtual void OnTotalPropertyChanging()
        {
            if (TotalPropertyChanging != null)
            {
                var value = Total;
                if (value == _previousTotal)
                    return;
                var oldValue = _previousTotal;
                _previousTotal = value;
                TotalPropertyChanging(oldValue, value);
            }
        }

        protected internal event Action<double, double> TotalPropertyChanging;
        protected Error GetValidateOrderHasOrderLinesError(bool force = true)
        {
            if (IsDeserializing || !(force || ChangeTracker.State == ObjectState.Added || ChangeTracker.State == ObjectState.Modified))
                return null;
            if (!this.OrderDetails.Any())
            {
                var @value = new Error
                {
                Criticity = Criticity.Error, Message = "Order must have detail", ErrorDetails = new ErrorDetail[]
                {
                new ErrorDetail
                {
                EntityKey = DataTransferEntityKey, PropertyName = "OrderDetails"
                }
                }

                , Key = "ValidateOrderHasOrderLines"
                }

                ;
                @value.Key = "ValidateOrderHasOrderLines";
                return @value;
            }

            return null;
        }

        public virtual Error ValidateOrderHasOrderLines(bool force = true)
        {
            if (Errors.AllErrors == null)
                return default (Error);
            var existingError = Errors.AllErrors.FirstOrDefault(e =>
            {
                if (e == null)
                    return default (bool);
                return e.Key == "ValidateOrderHasOrderLines";
            }

            );
            var newError = GetValidateOrderHasOrderLinesError(force);
            if (newError == null)
            {
                if (existingError != null)
                {
                    Errors.AllErrors.Remove(existingError);
                }
            }
            else
            {
                if (existingError == null)
                {
                    Errors.AllErrors.Add(newError);
                }
                else
                    newError = existingError;
            }

            return newError;
        }

        partial void GetCustomValidation(ref List<Error> errors);
        [DataContract(Namespace = "http://Northwind/Entities")]
        public partial class OrderSpecifications
        {
            bool _hasInvoice;
            [DataMember]
            public bool HasInvoice
            {
                get
                {
                    return _hasInvoice;
                }

                set
                {
                    _hasInvoice = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged((Order e) => e.HasInvoice);
                }
            }

            bool _hasHasInvoice;
            [DataMember]
            public bool HasHasInvoice
            {
                get
                {
                    return _hasHasInvoice;
                }

                set
                {
                    _hasHasInvoice = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged((Order e) => e.HasInvoice);
                }
            }

            string _customerCompanyName;
            [DataMember]
            public string CustomerCompanyName
            {
                get
                {
                    return _customerCompanyName;
                }

                set
                {
                    _customerCompanyName = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged((Order e) => e.CustomerCompanyName);
                }
            }

            bool _hasCustomerCompanyName;
            [DataMember]
            public bool HasCustomerCompanyName
            {
                get
                {
                    return _hasCustomerCompanyName;
                }

                set
                {
                    _hasCustomerCompanyName = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged((Order e) => e.CustomerCompanyName);
                }
            }

            string _customerContactName;
            [DataMember]
            public string CustomerContactName
            {
                get
                {
                    return _customerContactName;
                }

                set
                {
                    _customerContactName = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged((Order e) => e.CustomerContactName);
                }
            }

            bool _hasCustomerContactName;
            [DataMember]
            public bool HasCustomerContactName
            {
                get
                {
                    return _hasCustomerContactName;
                }

                set
                {
                    _hasCustomerContactName = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged((Order e) => e.CustomerContactName);
                }
            }

            double _total;
            [DataMember]
            public double Total
            {
                get
                {
                    return _total;
                }

                set
                {
                    _total = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged((Order e) => e.Total);
                }
            }

            bool _hasTotal;
            [DataMember]
            public bool HasTotal
            {
                get
                {
                    return _hasTotal;
                }

                set
                {
                    _hasTotal = value;
                    if (NotifyPropertyChanged != null)
                        NotifyPropertyChanged.RaisePropertyChanged((Order e) => e.Total);
                }
            }

            public NotifyPropertyChanged NotifyPropertyChanged
            {
                get;
                set;
            }
        }

        private OrderSpecifications _specifications;
        [DataMember]
        public OrderSpecifications Specifications
        {
            get
            {
                return _specifications;
            }

            set
            {
                _specifications = value;
                if (_specifications != null)
                    _specifications.NotifyPropertyChanged = NotifyPropertyChanged;
            }
        }

        protected virtual void OnTotalChanged(bool raise = true, bool validate = true)
        {
            if (!IsDeserializing)
                OnTotalPropertyChanging();
            if (raise)
                OnPropertyChanged("Total", false);
        }

        protected virtual void OnCustomerCompanyNameChanged(bool raise = true, bool validate = true)
        {
            if (!IsDeserializing)
                OnCustomerCompanyNamePropertyChanging();
            if (raise)
                OnPropertyChanged("CustomerCompanyName", false);
        }

        protected virtual void OnCustomerContactNameChanged(bool raise = true, bool validate = true)
        {
            if (!IsDeserializing)
                OnCustomerContactNamePropertyChanging();
            if (raise)
                OnPropertyChanged("CustomerContactName", false);
        }

        protected virtual void OnHasInvoiceChanged(bool raise = true, bool validate = true)
        {
            if (!IsDeserializing)
                OnHasInvoicePropertyChanging();
            if (raise)
                OnPropertyChanged("HasInvoice", false);
        }

#endregion
#region ChangeTracking
        protected virtual void AddValidationProperty(string propertyName)
        {
            if (!ChangeTracker.ValidationProperties.Contains(propertyName))
                ChangeTracker.ValidationProperties.Add(propertyName);
        }

        protected virtual void OnPropertyChanged(string propertyName, bool isTracked = true)
        {
            if (propertyName != "Id" && isTracked && ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && (ChangeTracker.State & ObjectState.Deleted) == 0)
            {
                if (!(IsDeserializing || ChangeTracker.ModifiedProperties.Contains(propertyName)))
                    ChangeTracker.ModifiedProperties.Add(propertyName);
                ChangeTracker.State = ObjectState.Modified;
            }

            NotifyPropertyChanged.RaisePropertyChanged(propertyName);
            OnPropertyChangedExtension(propertyName);
        }

        partial void OnPropertyChangedExtension(string propertyName);
        protected virtual void OnNavigationPropertyChanged(string propertyName)
        {
            NotifyPropertyChanged.RaisePropertyChanged(propertyName);
            OnNavigationPropertyChangedExtension(propertyName);
            RaiseNavigationPropertyChanged(propertyName);
        }

        partial void OnNavigationPropertyChangedExtension(string propertyName);
        protected virtual void RaiseNavigationPropertyChanged(string propertyName)
        {
            if (NavigationPropertyChanged != null)
                NavigationPropertyChanged(this, propertyName);
        }

        public event Action<Order, string> NavigationPropertyChanged;
        private ObjectChangeTracker _changeTracker;
        [DataMember]
        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanged += HandleObjectStateChanged;
                }

                return _changeTracker;
            }

            set
            {
                if (_changeTracker != null)
                    _changeTracker.ObjectStateChanged -= HandleObjectStateChanged;
                _changeTracker = value;
                if (_changeTracker != null)
                    _changeTracker.ObjectStateChanged += HandleObjectStateChanged;
            }
        }

        private void HandleObjectStateChanged(object sender, ObjectStateChangedEventArgs e)
        {
            switch (e.NewState)
            {
                case ObjectState.Deleted:
                case ObjectState.CascadeDeleted:
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        IsDeleting = true;
                        ClearNavigationProperties();
                        IsDeleting = false;
                    }

                    break;
                case ObjectState.Detached:
                    ClearNavigationProperties();
                    break;
            }

            OnStateChanged(e.NewState);
        }

        protected virtual void OnStateChanged(ObjectState state)
        {
            if (StateChanged != null)
                StateChanged(this, state);
        }

        public event Action<IObjectWithChangeTracker, ObjectState> StateChanged;
        private bool _isDeserializing;
        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public bool IsDeserializing
        {
            get
            {
                return _isDeserializing;
            }

            set
            {
                if (_isDeserializing == value)
                    return;
                _isDeserializing = value;
            }
        }

        [Display(AutoGenerateFilter = false, AutoGenerateField = false)]
        public bool IsInitializingRelationships
        {
            get;
            set;
        }

        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }

        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }

        public virtual void MarkAsModified()
        {
            ChangeTracker.ChangeTrackingEnabled = true;
            ChangeTracker.State = ObjectState.Modified;
            ChangeTracker.ModifiedProperties.Add("Id");
            ChangeTracker.ModifiedProperties.Add("CustomerId");
            ChangeTracker.ModifiedProperties.Add("EmployeeId");
            ChangeTracker.ModifiedProperties.Add("OrderDate");
            ChangeTracker.ModifiedProperties.Add("RequiredDate");
            ChangeTracker.ModifiedProperties.Add("ShippedDate");
            ChangeTracker.ModifiedProperties.Add("ShipVia");
            ChangeTracker.ModifiedProperties.Add("Freight");
            ChangeTracker.ModifiedProperties.Add("ShipName");
            ChangeTracker.ModifiedProperties.Add("ShipAddress");
            ChangeTracker.ModifiedProperties.Add("ShipCity");
            ChangeTracker.ModifiedProperties.Add("ShipRegion");
            ChangeTracker.ModifiedProperties.Add("ShipPostalCode");
            ChangeTracker.ModifiedProperties.Add("ShipCountry");
        }

        protected virtual void ClearNavigationProperties()
        {
            bool isInitializingRelationships = IsInitializingRelationships;
            IsInitializingRelationships = true;
            Customer = null;
            Employee = null;
            Invoice = null;
            OrderDetails.Clear();
            IsInitializingRelationships = isInitializingRelationships;
        }

        public bool HasTemporaryKey
        {
            get
            {
                return ChangeTracker.State == ObjectState.Added;
            }
        }

        public virtual bool HasChanges
        {
            get
            {
                return ChangeTracker.State != ObjectState.Unchanged || ChangeTracker.ObjectsRemovedFromCollectionProperties.Any() || ChangeTracker.OriginalValues.Any() || ChangeTracker.ObjectsAddedToCollectionProperties.Any();
            }
        }

        private Guid? _uniqueIdentifier;
        Guid IObjectWithChangeTracker.UniqueIdentifier
        {
            get
            {
                return _uniqueIdentifier ?? (_uniqueIdentifier = Guid.NewGuid()).Value;
            }
        }

#endregion
#region Association Fixup
        private bool IsDeleting
        {
            get;
            set;
        }

        internal virtual void Detach()
        {
            ChangeTracker.State = ObjectState.Detached;
        }

        private void FixupCustomer(Customer previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
                return;
            if (Customer == null && ChangeTracker.ChangeTrackingEnabled && previousValue.ChangeTracker.State == ObjectState.Detached && previousValue.ChangeTracker.DetachedPreviousState != ObjectState.Added)
            {
                object originalValue;
                if (ChangeTracker.OriginalValues.TryGetValue("Customer", out originalValue) && (originalValue == null || originalValue == previousValue))
                    ChangeTracker.OriginalValues.Remove("Customer");
                return;
            }

            bool isInitializingRelationships = IsInitializingRelationships || (Customer != null && Customer.IsInitializingRelationships);
            var changeTrackingEnabled = ChangeTracker.ChangeTrackingEnabled;
            if (isInitializingRelationships || ChangeTracker.IsAttaching)
                ChangeTracker.ChangeTrackingEnabled = false;
            if (previousValue != null && previousValue.Orders.Contains(this))
                previousValue.Orders.Remove(this);
            if (Customer != null)
            {
                if (!Customer.Orders.Contains(this))
                {
                    if (isInitializingRelationships)
                        Customer.Orders.Attach(this);
                    else
                        Customer.Orders.Add(this);
                }

                CustomerId = Customer.Id;
            }
            else if (!(skipKeys || IsDeserializing || ChangeTracker.State == ObjectState.Detached) && (ChangeTracker.State & ObjectState.Deleted) == 0)
            {
                CustomerId = default (string);
            }

            if (ChangeTracker.ChangeTrackingEnabled && (!isInitializingRelationships || ChangeTracker.State == ObjectState.Added || Customer != null && Customer.ChangeTracker.State == ObjectState.Added))
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Customer") && (ChangeTracker.OriginalValues["Customer"] == Customer))
                    ChangeTracker.OriginalValues.Remove("Customer");
                else
                {
                    ChangeTracker.RecordOriginalValue("Customer", previousValue);
                }

                if (Customer != null && !Customer.ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Detached)
                    Customer.MarkAsAdded();
            }

            ChangeTracker.ChangeTrackingEnabled |= changeTrackingEnabled;
        }

        private void FixupEmployee(Employee previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
                return;
            if (Employee == null && ChangeTracker.ChangeTrackingEnabled && previousValue.ChangeTracker.State == ObjectState.Detached && previousValue.ChangeTracker.DetachedPreviousState != ObjectState.Added)
            {
                object originalValue;
                if (ChangeTracker.OriginalValues.TryGetValue("Employee", out originalValue) && (originalValue == null || originalValue == previousValue))
                    ChangeTracker.OriginalValues.Remove("Employee");
                return;
            }

            bool isInitializingRelationships = IsInitializingRelationships || (Employee != null && Employee.IsInitializingRelationships);
            var changeTrackingEnabled = ChangeTracker.ChangeTrackingEnabled;
            if (isInitializingRelationships || ChangeTracker.IsAttaching)
                ChangeTracker.ChangeTrackingEnabled = false;
            if (previousValue != null && previousValue.Orders.Contains(this))
                previousValue.Orders.Remove(this);
            if (Employee != null)
            {
                if (!Employee.Orders.Contains(this))
                {
                    if (isInitializingRelationships)
                        Employee.Orders.Attach(this);
                    else
                        Employee.Orders.Add(this);
                }

                EmployeeId = Employee.Id;
            }
            else if (!(skipKeys || IsDeserializing || ChangeTracker.State == ObjectState.Detached) && (ChangeTracker.State & ObjectState.Deleted) == 0)
            {
                EmployeeId = default (Nullable<int>);
            }

            if (ChangeTracker.ChangeTrackingEnabled && (!isInitializingRelationships || ChangeTracker.State == ObjectState.Added || Employee != null && Employee.ChangeTracker.State == ObjectState.Added))
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Employee") && (ChangeTracker.OriginalValues["Employee"] == Employee))
                    ChangeTracker.OriginalValues.Remove("Employee");
                else
                {
                    ChangeTracker.RecordOriginalValue("Employee", previousValue);
                }

                if (Employee != null && !Employee.ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Detached)
                    Employee.MarkAsAdded();
            }

            ChangeTracker.ChangeTrackingEnabled |= changeTrackingEnabled;
        }

        private void FixupInvoice(Invoice previousValue)
        {
            if (previousValue != null)
                ChangeTracker.ObjectStateChanged -= previousValue.HandleCascadeDelete;
            if (Invoice != null)
                ChangeTracker.ObjectStateChanged += Invoice.HandleCascadeDelete;
            if (IsDeserializing)
                return;
            if (Invoice == null && ChangeTracker.ChangeTrackingEnabled && previousValue.ChangeTracker.State == ObjectState.Detached && previousValue.ChangeTracker.DetachedPreviousState != ObjectState.Added)
            {
                object originalValue;
                if (ChangeTracker.OriginalValues.TryGetValue("Invoice", out originalValue) && (originalValue == null || originalValue == previousValue))
                    ChangeTracker.OriginalValues.Remove("Invoice");
                return;
            }

            bool isInitializingRelationships = IsInitializingRelationships || (Invoice != null && Invoice.IsInitializingRelationships);
            if (previousValue != null && ReferenceEquals(previousValue.Order, this))
                previousValue.Order = null;
            if (Invoice != null)
            {
                Invoice.Order = this;
            }

            if (ChangeTracker.ChangeTrackingEnabled && (!isInitializingRelationships || ChangeTracker.State == ObjectState.Added || Invoice != null && Invoice.ChangeTracker.State == ObjectState.Added))
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Invoice") && (ChangeTracker.OriginalValues["Invoice"] == Invoice))
                    ChangeTracker.OriginalValues.Remove("Invoice");
                else
                {
                    ChangeTracker.RecordOriginalValue("Invoice", previousValue);
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }

                if (Invoice != null && !Invoice.ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Detached)
                    Invoice.MarkAsAdded();
            }
        }

        private void FixupOrderDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing || OrderDetails.IsAttachingOrDetaching)
                return;
            if (e.NewItems != null)
            {
                foreach (OrderDetail item in e.NewItems)
                {
                    bool itemIsInitializingRelationships = item.IsInitializingRelationships;
                    if (IsInitializingRelationships)
                        item.IsInitializingRelationships = true;
                    item.Order = this;
                    if (!(IsInitializingRelationships || item.IsInitializingRelationships) && ChangeTracker.ChangeTrackingEnabled && (ChangeTracker.State == ObjectState.Added || item.ChangeTracker.State == ObjectState.Added || !(ChangeTracker.IsAttaching || item.ChangeTracker.IsAttaching)))
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                            item.MarkAsAdded();
                        ChangeTracker.RecordAdditionToCollectionProperties("OrderDetails", item);
                    }

                    item.IsInitializingRelationships = itemIsInitializingRelationships;
                }
            }

            if (e.OldItems != null)
            {
                foreach (OrderDetail item in e.OldItems)
                {
                    bool itemIsInitializingRelationships = item.IsInitializingRelationships;
                    if (IsInitializingRelationships)
                        item.IsInitializingRelationships = true;
                    if (ReferenceEquals(item.Order, this))
                        item.Order = null;
                    if (ChangeTracker.ChangeTrackingEnabled && !IsInitializingRelationships)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OrderDetails", item);
                    }

                    item.IsInitializingRelationships = itemIsInitializingRelationships;
                }
            }
        }

#endregion
#region EntityKey
        private Guid? _dataTransferEntityKey;
        [DataMember]
        public virtual Guid DataTransferEntityKey
        {
            get
            {
                return _dataTransferEntityKey ?? (_dataTransferEntityKey = Guid.NewGuid()).Value;
            }

            set
            {
                _dataTransferEntityKey = value;
            }
        }

        private string _entityKey;
        public virtual string EntityKey
        {
            get
            {
                switch (ChangeTracker.State)
                {
                    case ObjectState.Added:
                        if (_entityKey == null)
                            _entityKey = "Order - IdentityKey = " + Guid.NewGuid().ToString();
                        return _entityKey;
                    case ObjectState.Detached:
                        if (_entityKey != null)
                            return _entityKey;
                        if (Id == default (int))
                            goto case ObjectState.Added;
                        break;
                    case ObjectState.Unchanged:
                    case ObjectState.Modified:
                    case ObjectState.CascadeDeleted:
                    case ObjectState.Deleted:
                        _entityKey = null;
                        break;
                }

                return string.Format("Order - Id={0};", Id);
            }

            set
            {
                _entityKey = value;
            }
        }

        public virtual void ResetEntityKey()
        {
            if (!IsDeserializing)
            {
                var previousEntityKey = _entityKey;
                _entityKey = null;
                OnEntityKeyChanged(previousEntityKey);
            }
        }

        protected virtual void OnEntityKeyChanged(string previousEntityKey)
        {
            if (EntityKeyChanged != null)
                EntityKeyChanged(this, previousEntityKey);
        }

        public event Action<Order, string> EntityKeyChanged;
        public virtual bool IsTemporaryKey
        {
            get
            {
                return _entityKey != null;
            }
        }

#endregion
#region Dependences
#endregion
#region UISpecifications
        static Order()
        {
            DynamicType<Order>.AddProperty("IdIsMandatory", e => e.UISpecifications.GetIdIsMandatory(e));
            DynamicType<Order>.AddProperty("IdMinValue", e => e.UISpecifications.GetIdMinValue(e));
            DynamicType<Order>.AddProperty("IdMaxValue", e => e.UISpecifications.GetIdMaxValue(e));
            DynamicType<Order>.AddProperty("CustomerIdIsMandatory", e => e.UISpecifications.GetCustomerIdIsMandatory(e));
            DynamicType<Order>.AddProperty("CustomerIdMaxLength", e => e.UISpecifications.GetCustomerIdMaxLength(e));
            DynamicType<Order>.AddProperty("CustomerIdMinLength", e => e.UISpecifications.GetCustomerIdMinLength(e));
            DynamicType<Order>.AddProperty("CustomerIdPattern", e => e.UISpecifications.GetCustomerIdPattern(e));
            DynamicType<Order>.AddProperty("EmployeeIdIsMandatory", e => e.UISpecifications.GetEmployeeIdIsMandatory(e));
            DynamicType<Order>.AddProperty("EmployeeIdMinValue", e => e.UISpecifications.GetEmployeeIdMinValue(e));
            DynamicType<Order>.AddProperty("EmployeeIdMaxValue", e => e.UISpecifications.GetEmployeeIdMaxValue(e));
            DynamicType<Order>.AddProperty("OrderDateIsMandatory", e => e.UISpecifications.GetOrderDateIsMandatory(e));
            DynamicType<Order>.AddProperty("OrderDateMinValue", e => e.UISpecifications.GetOrderDateMinValue(e));
            DynamicType<Order>.AddProperty("OrderDateMaxValue", e => e.UISpecifications.GetOrderDateMaxValue(e));
            DynamicType<Order>.AddProperty("RequiredDateIsMandatory", e => e.UISpecifications.GetRequiredDateIsMandatory(e));
            DynamicType<Order>.AddProperty("RequiredDateMinValue", e => e.UISpecifications.GetRequiredDateMinValue(e));
            DynamicType<Order>.AddProperty("RequiredDateMaxValue", e => e.UISpecifications.GetRequiredDateMaxValue(e));
            DynamicType<Order>.AddProperty("ShippedDateIsMandatory", e => e.UISpecifications.GetShippedDateIsMandatory(e));
            DynamicType<Order>.AddProperty("ShippedDateMinValue", e => e.UISpecifications.GetShippedDateMinValue(e));
            DynamicType<Order>.AddProperty("ShippedDateMaxValue", e => e.UISpecifications.GetShippedDateMaxValue(e));
            DynamicType<Order>.AddProperty("ShipViaIsMandatory", e => e.UISpecifications.GetShipViaIsMandatory(e));
            DynamicType<Order>.AddProperty("ShipViaMinValue", e => e.UISpecifications.GetShipViaMinValue(e));
            DynamicType<Order>.AddProperty("ShipViaMaxValue", e => e.UISpecifications.GetShipViaMaxValue(e));
            DynamicType<Order>.AddProperty("FreightIsMandatory", e => e.UISpecifications.GetFreightIsMandatory(e));
            DynamicType<Order>.AddProperty("FreightMinValue", e => e.UISpecifications.GetFreightMinValue(e));
            DynamicType<Order>.AddProperty("FreightMaxValue", e => e.UISpecifications.GetFreightMaxValue(e));
            DynamicType<Order>.AddProperty("ShipNameIsMandatory", e => e.UISpecifications.GetShipNameIsMandatory(e));
            DynamicType<Order>.AddProperty("ShipNameMaxLength", e => e.UISpecifications.GetShipNameMaxLength(e));
            DynamicType<Order>.AddProperty("ShipNameMinLength", e => e.UISpecifications.GetShipNameMinLength(e));
            DynamicType<Order>.AddProperty("ShipNamePattern", e => e.UISpecifications.GetShipNamePattern(e));
            DynamicType<Order>.AddProperty("ShipAddressIsMandatory", e => e.UISpecifications.GetShipAddressIsMandatory(e));
            DynamicType<Order>.AddProperty("ShipAddressMaxLength", e => e.UISpecifications.GetShipAddressMaxLength(e));
            DynamicType<Order>.AddProperty("ShipAddressMinLength", e => e.UISpecifications.GetShipAddressMinLength(e));
            DynamicType<Order>.AddProperty("ShipAddressPattern", e => e.UISpecifications.GetShipAddressPattern(e));
            DynamicType<Order>.AddProperty("ShipCityIsMandatory", e => e.UISpecifications.GetShipCityIsMandatory(e));
            DynamicType<Order>.AddProperty("ShipCityMaxLength", e => e.UISpecifications.GetShipCityMaxLength(e));
            DynamicType<Order>.AddProperty("ShipCityMinLength", e => e.UISpecifications.GetShipCityMinLength(e));
            DynamicType<Order>.AddProperty("ShipCityPattern", e => e.UISpecifications.GetShipCityPattern(e));
            DynamicType<Order>.AddProperty("ShipRegionIsMandatory", e => e.UISpecifications.GetShipRegionIsMandatory(e));
            DynamicType<Order>.AddProperty("ShipRegionMaxLength", e => e.UISpecifications.GetShipRegionMaxLength(e));
            DynamicType<Order>.AddProperty("ShipRegionMinLength", e => e.UISpecifications.GetShipRegionMinLength(e));
            DynamicType<Order>.AddProperty("ShipRegionPattern", e => e.UISpecifications.GetShipRegionPattern(e));
            DynamicType<Order>.AddProperty("ShipPostalCodeIsMandatory", e => e.UISpecifications.GetShipPostalCodeIsMandatory(e));
            DynamicType<Order>.AddProperty("ShipPostalCodeMaxLength", e => e.UISpecifications.GetShipPostalCodeMaxLength(e));
            DynamicType<Order>.AddProperty("ShipPostalCodeMinLength", e => e.UISpecifications.GetShipPostalCodeMinLength(e));
            DynamicType<Order>.AddProperty("ShipPostalCodePattern", e => e.UISpecifications.GetShipPostalCodePattern(e));
            DynamicType<Order>.AddProperty("ShipCountryIsMandatory", e => e.UISpecifications.GetShipCountryIsMandatory(e));
            DynamicType<Order>.AddProperty("ShipCountryMaxLength", e => e.UISpecifications.GetShipCountryMaxLength(e));
            DynamicType<Order>.AddProperty("ShipCountryMinLength", e => e.UISpecifications.GetShipCountryMinLength(e));
            DynamicType<Order>.AddProperty("ShipCountryPattern", e => e.UISpecifications.GetShipCountryPattern(e));
            DynamicType<Order>.AddProperty("CustomerIsMandatory", e => e.UISpecifications.GetCustomerIsMandatory(e));
            DynamicType<Order>.AddProperty("EmployeeIsMandatory", e => e.UISpecifications.GetEmployeeIsMandatory(e));
            DynamicType<Order>.AddProperty("InvoiceIsMandatory", e => e.UISpecifications.GetInvoiceIsMandatory(e));
            DynamicType<Order>.AddProperty("AllErrors", e => e.Errors.AllErrors);
            DynamicType<Order>.AddProperty("IdErrors", e => e.Errors.Id);
            DynamicType<Order>.AddProperty("CustomerIdErrors", e => e.Errors.CustomerId);
            DynamicType<Order>.AddProperty("EmployeeIdErrors", e => e.Errors.EmployeeId);
            DynamicType<Order>.AddProperty("OrderDateErrors", e => e.Errors.OrderDate);
            DynamicType<Order>.AddProperty("RequiredDateErrors", e => e.Errors.RequiredDate);
            DynamicType<Order>.AddProperty("ShippedDateErrors", e => e.Errors.ShippedDate);
            DynamicType<Order>.AddProperty("ShipViaErrors", e => e.Errors.ShipVia);
            DynamicType<Order>.AddProperty("FreightErrors", e => e.Errors.Freight);
            DynamicType<Order>.AddProperty("ShipNameErrors", e => e.Errors.ShipName);
            DynamicType<Order>.AddProperty("ShipAddressErrors", e => e.Errors.ShipAddress);
            DynamicType<Order>.AddProperty("ShipCityErrors", e => e.Errors.ShipCity);
            DynamicType<Order>.AddProperty("ShipRegionErrors", e => e.Errors.ShipRegion);
            DynamicType<Order>.AddProperty("ShipPostalCodeErrors", e => e.Errors.ShipPostalCode);
            DynamicType<Order>.AddProperty("ShipCountryErrors", e => e.Errors.ShipCountry);
            DynamicType<Order>.AddProperty("TotalErrors", e => e.Errors.Total);
            DynamicType<Order>.AddProperty("CustomerCompanyNameErrors", e => e.Errors.CustomerCompanyName);
            DynamicType<Order>.AddProperty("CustomerContactNameErrors", e => e.Errors.CustomerContactName);
            DynamicType<Order>.AddProperty("HasInvoiceErrors", e => e.Errors.HasInvoice);
            StaticInitializer();
        }

        static partial void StaticInitializer();
        private UISpecificationsInfo _uiSpecifications;
        private UISpecificationsInfo UISpecifications
        {
            get
            {
                return _uiSpecifications ?? (_uiSpecifications = CreateOrderUISpecifications());
            }
        }

        protected virtual UISpecificationsInfo CreateOrderUISpecifications()
        {
            return new UISpecificationsInfo();
        }

        public partial class UISpecificationsInfo
        {
            public virtual bool GetIdIsMandatory(Order entity)
            {
                return true;
            }

            public virtual int ? GetIdMinValue(Order entity)
            {
                return null;
            }

            public virtual int ? GetIdMaxValue(Order entity)
            {
                return null;
            }

            public virtual bool GetCustomerIdIsMandatory(Order entity)
            {
                return false;
            }

            public virtual int ? GetCustomerIdMaxLength(Order entity)
            {
                return 5;
            }

            public virtual int ? GetCustomerIdMinLength(Order entity)
            {
                return null;
            }

            public virtual string GetCustomerIdPattern(Order entity)
            {
                return null;
            }

            public virtual bool GetEmployeeIdIsMandatory(Order entity)
            {
                return false;
            }

            public virtual int ? GetEmployeeIdMinValue(Order entity)
            {
                return null;
            }

            public virtual int ? GetEmployeeIdMaxValue(Order entity)
            {
                return null;
            }

            public virtual bool GetOrderDateIsMandatory(Order entity)
            {
                return true;
            }

            public virtual DateTime? GetOrderDateMinValue(Order entity)
            {
                return null;
            }

            public virtual DateTime? GetOrderDateMaxValue(Order entity)
            {
                return null;
            }

            public virtual bool GetRequiredDateIsMandatory(Order entity)
            {
                return false;
            }

            public virtual DateTime? GetRequiredDateMinValue(Order entity)
            {
                return null;
            }

            public virtual DateTime? GetRequiredDateMaxValue(Order entity)
            {
                return null;
            }

            public virtual bool GetShippedDateIsMandatory(Order entity)
            {
                return false;
            }

            public virtual DateTime? GetShippedDateMinValue(Order entity)
            {
                return null;
            }

            public virtual DateTime? GetShippedDateMaxValue(Order entity)
            {
                return null;
            }

            public virtual bool GetShipViaIsMandatory(Order entity)
            {
                return false;
            }

            public virtual int ? GetShipViaMinValue(Order entity)
            {
                return null;
            }

            public virtual int ? GetShipViaMaxValue(Order entity)
            {
                return null;
            }

            public virtual bool GetFreightIsMandatory(Order entity)
            {
                return false;
            }

            public virtual decimal ? GetFreightMinValue(Order entity)
            {
                return null;
            }

            public virtual decimal ? GetFreightMaxValue(Order entity)
            {
                return null;
            }

            public virtual bool GetShipNameIsMandatory(Order entity)
            {
                return false;
            }

            public virtual int ? GetShipNameMaxLength(Order entity)
            {
                return 40;
            }

            public virtual int ? GetShipNameMinLength(Order entity)
            {
                return null;
            }

            public virtual string GetShipNamePattern(Order entity)
            {
                return null;
            }

            public virtual bool GetShipAddressIsMandatory(Order entity)
            {
                return false;
            }

            public virtual int ? GetShipAddressMaxLength(Order entity)
            {
                return 60;
            }

            public virtual int ? GetShipAddressMinLength(Order entity)
            {
                return null;
            }

            public virtual string GetShipAddressPattern(Order entity)
            {
                return null;
            }

            public virtual bool GetShipCityIsMandatory(Order entity)
            {
                return false;
            }

            public virtual int ? GetShipCityMaxLength(Order entity)
            {
                return 15;
            }

            public virtual int ? GetShipCityMinLength(Order entity)
            {
                return null;
            }

            public virtual string GetShipCityPattern(Order entity)
            {
                return null;
            }

            public virtual bool GetShipRegionIsMandatory(Order entity)
            {
                return false;
            }

            public virtual int ? GetShipRegionMaxLength(Order entity)
            {
                return 15;
            }

            public virtual int ? GetShipRegionMinLength(Order entity)
            {
                return null;
            }

            public virtual string GetShipRegionPattern(Order entity)
            {
                return null;
            }

            public virtual bool GetShipPostalCodeIsMandatory(Order entity)
            {
                return false;
            }

            public virtual int ? GetShipPostalCodeMaxLength(Order entity)
            {
                return 10;
            }

            public virtual int ? GetShipPostalCodeMinLength(Order entity)
            {
                return null;
            }

            public virtual string GetShipPostalCodePattern(Order entity)
            {
                return null;
            }

            public virtual bool GetShipCountryIsMandatory(Order entity)
            {
                return false;
            }

            public virtual int ? GetShipCountryMaxLength(Order entity)
            {
                return 15;
            }

            public virtual int ? GetShipCountryMinLength(Order entity)
            {
                return null;
            }

            public virtual string GetShipCountryPattern(Order entity)
            {
                return null;
            }

            public virtual bool GetCustomerIsMandatory(WAQSWorkshopClient.Order entity)
            {
                return false;
            }

            public virtual bool GetEmployeeIsMandatory(WAQSWorkshopClient.Order entity)
            {
                return false;
            }

            public virtual bool GetInvoiceIsMandatory(WAQSWorkshopClient.Order entity)
            {
                return false;
            }
        }

        private ErrorsSpecifications _errors;
        protected ErrorsSpecifications Errors
        {
            get
            {
                return _errors ?? (_errors = new ErrorsSpecifications());
            }
        }

        bool IEntityWithErrors.HasErrors
        {
            get
            {
                return Errors.AllErrors.Count != 0;
            }
        }

        event Action IEntityWithErrors.HasErrorsChanged
        {
            add
            {
                Errors.HasErrorChanged += value;
            }

            remove
            {
                Errors.HasErrorChanged += value;
            }
        }

        public partial class ErrorsSpecifications
        {
            private ObservableCollection<Error> _id;
            public ObservableCollection<Error> Id
            {
                get
                {
                    return _id ?? (_id = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _customerId;
            public ObservableCollection<Error> CustomerId
            {
                get
                {
                    return _customerId ?? (_customerId = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _employeeId;
            public ObservableCollection<Error> EmployeeId
            {
                get
                {
                    return _employeeId ?? (_employeeId = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _orderDate;
            public ObservableCollection<Error> OrderDate
            {
                get
                {
                    return _orderDate ?? (_orderDate = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _requiredDate;
            public ObservableCollection<Error> RequiredDate
            {
                get
                {
                    return _requiredDate ?? (_requiredDate = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _shippedDate;
            public ObservableCollection<Error> ShippedDate
            {
                get
                {
                    return _shippedDate ?? (_shippedDate = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _shipVia;
            public ObservableCollection<Error> ShipVia
            {
                get
                {
                    return _shipVia ?? (_shipVia = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _freight;
            public ObservableCollection<Error> Freight
            {
                get
                {
                    return _freight ?? (_freight = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _shipName;
            public ObservableCollection<Error> ShipName
            {
                get
                {
                    return _shipName ?? (_shipName = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _shipAddress;
            public ObservableCollection<Error> ShipAddress
            {
                get
                {
                    return _shipAddress ?? (_shipAddress = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _shipCity;
            public ObservableCollection<Error> ShipCity
            {
                get
                {
                    return _shipCity ?? (_shipCity = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _shipRegion;
            public ObservableCollection<Error> ShipRegion
            {
                get
                {
                    return _shipRegion ?? (_shipRegion = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _shipPostalCode;
            public ObservableCollection<Error> ShipPostalCode
            {
                get
                {
                    return _shipPostalCode ?? (_shipPostalCode = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _shipCountry;
            public ObservableCollection<Error> ShipCountry
            {
                get
                {
                    return _shipCountry ?? (_shipCountry = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _total;
            public ObservableCollection<Error> Total
            {
                get
                {
                    return _total ?? (_total = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _customerCompanyName;
            public ObservableCollection<Error> CustomerCompanyName
            {
                get
                {
                    return _customerCompanyName ?? (_customerCompanyName = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _customerContactName;
            public ObservableCollection<Error> CustomerContactName
            {
                get
                {
                    return _customerContactName ?? (_customerContactName = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _hasInvoice;
            public ObservableCollection<Error> HasInvoice
            {
                get
                {
                    return _hasInvoice ?? (_hasInvoice = new ObservableCollection<Error>());
                }
            }

            private ObservableCollection<Error> _allErrors;
            public ObservableCollection<Error> AllErrors
            {
                get
                {
                    if (_allErrors == null)
                    {
                        _allErrors = new ObservableCollection<Error>();
                        NotifyCollectionChangedEventHandler errorsCollectionChanged = (_, e) =>
                        {
                            if (e.NewItems != null)
                                foreach (Error error in e.NewItems)
                                {
                                    if (!_allErrors.Any(er => er.Key == error.Key))
                                        _allErrors.Add(error);
                                }

                            if (e.OldItems != null)
                                foreach (Error error in e.OldItems)
                                    _allErrors.Remove(error);
                        }

                        ;
                        AddAllErrorsHandlers(errorsCollectionChanged);
                    }

                    return _allErrors;
                }
            }

            protected virtual void AddAllErrorsHandlers(NotifyCollectionChangedEventHandler errorsCollectionChanged)
            {
                NotifyCollectionChangedEventHandler specificErrorsCollectionChanged = (sender, e) =>
                {
                    errorsCollectionChanged(sender, e);
                    switch (e.Action)
                    {
                        case NotifyCollectionChangedAction.Add:
                            if (AllErrors.Count == e.NewItems.Count)
                                OnHasErrorChanged();
                            break;
                        case NotifyCollectionChangedAction.Remove:
                            if (AllErrors.Count == 0)
                                OnHasErrorChanged();
                            break;
                    }
                }

                ;
                Id.CollectionChanged += specificErrorsCollectionChanged;
                CustomerId.CollectionChanged += specificErrorsCollectionChanged;
                EmployeeId.CollectionChanged += specificErrorsCollectionChanged;
                OrderDate.CollectionChanged += specificErrorsCollectionChanged;
                RequiredDate.CollectionChanged += specificErrorsCollectionChanged;
                ShippedDate.CollectionChanged += specificErrorsCollectionChanged;
                ShipVia.CollectionChanged += specificErrorsCollectionChanged;
                Freight.CollectionChanged += specificErrorsCollectionChanged;
                ShipName.CollectionChanged += specificErrorsCollectionChanged;
                ShipAddress.CollectionChanged += specificErrorsCollectionChanged;
                ShipCity.CollectionChanged += specificErrorsCollectionChanged;
                ShipRegion.CollectionChanged += specificErrorsCollectionChanged;
                ShipPostalCode.CollectionChanged += specificErrorsCollectionChanged;
                ShipCountry.CollectionChanged += specificErrorsCollectionChanged;
                Total.CollectionChanged += specificErrorsCollectionChanged;
                CustomerCompanyName.CollectionChanged += specificErrorsCollectionChanged;
                CustomerContactName.CollectionChanged += specificErrorsCollectionChanged;
                HasInvoice.CollectionChanged += specificErrorsCollectionChanged;
            }

            protected void OnHasErrorChanged()
            {
                if (HasErrorChanged != null)
                    OnHasErrorChanged();
            }

            public event Action HasErrorChanged;
        }
#endregion
    }
}
            