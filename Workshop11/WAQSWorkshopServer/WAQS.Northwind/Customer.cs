//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;
using WAQS.Entities;

namespace WAQSWorkshopServer
{
    [DataContract(IsReference = true, Namespace = "http://Northwind/Entities")]
    [KnownType(typeof(Invoice))]
    [KnownType(typeof(Order))]
    public partial class Customer : IEntity
    {
        public Customer()
        {
            EntitiesInitializer.Initialize(this);
            CustomerInitialize();
        }
        partial void CustomerInitialize();
    
    #region Simple Properties
        [DataMember]
        public string Id
        {
            get { return _id; }
            set
            {
                if (_id == value)
                    return;
    
                OnIdChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                if (value != null)
                    value = value.PadRight(5);
                _id = value;
                OnIdChanged(value);
                OnPropertyChanged("Id");
            }
        }
        private string _id;
        partial void OnIdChanging(ref string value);
        partial void OnIdChanged(string value);
        [DataMember]
        public string CompanyName
        {
            get { return _companyName; }
            set
            {
                if (_companyName == value)
                    return;
    
                OnCompanyNameChanging(ref value);
                _companyName = value;
                OnCompanyNameChanged(value);
                OnPropertyChanged("CompanyName");
            }
        }
        private string _companyName;
        partial void OnCompanyNameChanging(ref string value);
        partial void OnCompanyNameChanged(string value);
        [DataMember]
        public string ContactName
        {
            get { return _contactName; }
            set
            {
                if (_contactName == value)
                    return;
    
                OnContactNameChanging(ref value);
                _contactName = value;
                OnContactNameChanged(value);
                OnPropertyChanged("ContactName");
            }
        }
        private string _contactName;
        partial void OnContactNameChanging(ref string value);
        partial void OnContactNameChanged(string value);
        [DataMember]
        public string ContactTitle
        {
            get { return _contactTitle; }
            set
            {
                if (_contactTitle == value)
                    return;
    
                OnContactTitleChanging(ref value);
                _contactTitle = value;
                OnContactTitleChanged(value);
                OnPropertyChanged("ContactTitle");
            }
        }
        private string _contactTitle;
        partial void OnContactTitleChanging(ref string value);
        partial void OnContactTitleChanged(string value);
        [DataMember]
        public string Address
        {
            get { return _address; }
            set
            {
                if (_address == value)
                    return;
    
                OnAddressChanging(ref value);
                _address = value;
                OnAddressChanged(value);
                OnPropertyChanged("Address");
            }
        }
        private string _address;
        partial void OnAddressChanging(ref string value);
        partial void OnAddressChanged(string value);
        [DataMember]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city == value)
                    return;
    
                OnCityChanging(ref value);
                _city = value;
                OnCityChanged(value);
                OnPropertyChanged("City");
            }
        }
        private string _city;
        partial void OnCityChanging(ref string value);
        partial void OnCityChanged(string value);
        [DataMember]
        public string Region
        {
            get { return _region; }
            set
            {
                if (_region == value)
                    return;
    
                OnRegionChanging(ref value);
                _region = value;
                OnRegionChanged(value);
                OnPropertyChanged("Region");
            }
        }
        private string _region;
        partial void OnRegionChanging(ref string value);
        partial void OnRegionChanged(string value);
        [DataMember]
        public string PostalCode
        {
            get { return _postalCode; }
            set
            {
                if (_postalCode == value)
                    return;
    
                OnPostalCodeChanging(ref value);
                _postalCode = value;
                OnPostalCodeChanged(value);
                OnPropertyChanged("PostalCode");
            }
        }
        private string _postalCode;
        partial void OnPostalCodeChanging(ref string value);
        partial void OnPostalCodeChanged(string value);
        [DataMember]
        public string Country
        {
            get { return _country; }
            set
            {
                if (_country == value)
                    return;
    
                OnCountryChanging(ref value);
                _country = value;
                OnCountryChanged(value);
                OnPropertyChanged("Country");
            }
        }
        private string _country;
        partial void OnCountryChanging(ref string value);
        partial void OnCountryChanged(string value);
        [DataMember]
        public string Phone
        {
            get { return _phone; }
            set
            {
                if (_phone == value)
                    return;
    
                OnPhoneChanging(ref value);
                _phone = value;
                OnPhoneChanged(value);
                OnPropertyChanged("Phone");
            }
        }
        private string _phone;
        partial void OnPhoneChanging(ref string value);
        partial void OnPhoneChanged(string value);
        [DataMember]
        public string Fax
        {
            get { return _fax; }
            set
            {
                if (_fax == value)
                    return;
    
                OnFaxChanging(ref value);
                _fax = value;
                OnFaxChanged(value);
                OnPropertyChanged("Fax");
            }
        }
        private string _fax;
        partial void OnFaxChanging(ref string value);
        partial void OnFaxChanged(string value);
        [DataMember]
        public bool IsVIP
        {
            get { return _isVIP; }
            set
            {
                if (_isVIP == value)
                    return;
    
                OnIsVIPChanging(ref value);
                _isVIP = value;
                OnIsVIPChanged(value);
                OnPropertyChanged("IsVIP");
            }
        }
        private bool _isVIP;
        partial void OnIsVIPChanging(ref bool value);
        partial void OnIsVIPChanged(bool value);

    #endregion

    #region Navigation Properties
        [DataMember]
        public TrackableCollection<Invoice> Invoices
        {
            get
            {
                if (_invoices == null)
                {
                    _invoices = new TrackableCollection<Invoice>() { Owner = this, Name = "Invoices" };
                    _invoices.CollectionChanged += FixupInvoices;
                }
                return _invoices;
            }
            set
            {
                if (ReferenceEquals(_invoices, value))
                    return;
    
                if (ChangeTracker.ChangeTrackingEnabled)
                    throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    
                if (_invoices != null)
                {
                    _invoices.CollectionChanged -= FixupInvoices;
                }
                _invoices = value;
                if (_invoices != null)
                {
                    _invoices.Owner = this;
                    _invoices.Name = "Invoices";
                    _invoices.CollectionChanged += FixupInvoices;
                }
                OnNavigationPropertyChanged("Invoices");
            }
        }
        private TrackableCollection<Invoice> _invoices;
        [DataMember]
        public TrackableCollection<Order> Orders
        {
            get
            {
                if (_orders == null)
                {
                    _orders = new TrackableCollection<Order>() { Owner = this, Name = "Orders" };
                    _orders.CollectionChanged += FixupOrders;
                }
                return _orders;
            }
            set
            {
                if (ReferenceEquals(_orders, value))
                    return;
    
                if (ChangeTracker.ChangeTrackingEnabled)
                    throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    
                if (_orders != null)
                {
                    _orders.CollectionChanged -= FixupOrders;
                }
                _orders = value;
                if (_orders != null)
                {
                    _orders.Owner = this;
                    _orders.Name = "Orders";
                    _orders.CollectionChanged += FixupOrders;
                }
                OnNavigationPropertyChanged("Orders");
            }
        }
        private TrackableCollection<Order> _orders;

    #endregion

    #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
                if (! (IsDeserializing || ChangeTracker.ModifiedProperties.Contains(propertyName)))
                    ChangeTracker.ModifiedProperties.Add(propertyName);
            }
            OnCustomPropertyChanged(propertyName);
        }
        partial void OnCustomPropertyChanged(string propertyName);
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            OnCustomNavigationPropertyChanged(propertyName);
        }
        partial void OnCustomNavigationPropertyChanged(string propertyName);
    
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                _changeTracker = value;
                if(_changeTracker != null)
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            switch (e.NewState)
            {
                case ObjectState.Deleted:
                    IsDeleting = true;
                    ClearNavigationProperties();
                    IsDeleting = false;
                    break;
                case ObjectState.Detached:
                    ClearNavigationProperties();
                    break;
            }
        }
        
        private bool _isDeserializing;
        public bool IsDeserializing 
        { 
            get { return _isDeserializing; } 
            set 
            { 
                if (_isDeserializing == value)
                    return;
                _isDeserializing = value; 
            }
        }
        public bool IsInitializingRelationships { get; set; }
    
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Invoices.Clear();
            Orders.Clear();
        }

    #endregion

    #region Association Fixup
        private bool IsDeleting { get; set; }
        internal virtual void Detach()
        {
            ChangeTracker.State = ObjectState.Detached;
        }
    
        private void FixupInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
                return;
    
            if (e.NewItems != null)
            {
                foreach (Invoice item in e.NewItems)
                {
                    item.Customer = this;
                    if (ChangeTracker != null && ChangeTracker.ChangeTrackingEnabled && item.ChangeTracker != null && item.ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                            item.MarkAsAdded();
                        ChangeTracker.RecordAdditionToCollectionProperties("Invoices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Invoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                    if (ChangeTracker != null && ChangeTracker.ChangeTrackingEnabled && item.ChangeTracker != null && item.ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Invoices", item);
                    }
                }
            }
        }
    
        private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
                return;
    
            if (e.NewItems != null)
            {
                foreach (Order item in e.NewItems)
                {
                    item.Customer = this;
                    if (ChangeTracker != null && ChangeTracker.ChangeTrackingEnabled && item.ChangeTracker != null && item.ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                            item.MarkAsAdded();
                        ChangeTracker.RecordAdditionToCollectionProperties("Orders", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Order item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                    if (ChangeTracker != null && ChangeTracker.ChangeTrackingEnabled && item.ChangeTracker != null && item.ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Orders", item);
                    }
                }
            }
        }

    #endregion

     
    #region EntityKey
        private Guid? _dataTransferEntityKey;
        [DataMember]
        public virtual Guid DataTransferEntityKey 
        { 
            get { return _dataTransferEntityKey ?? (_dataTransferEntityKey = Guid.NewGuid()).Value; }
            set { _dataTransferEntityKey = value; } 
        }

    #endregion

    
        void IEntity.RemoveNavigationProperties()
        {
            Invoices.Clear();
            Orders.Clear();
        }
    }
}
