//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;
using WAQS.Entities;

namespace WAQSWorkshopServer
{
    [DataContract(IsReference = true, Namespace = "http://Northwind/Entities")]
    [KnownType(typeof(Invoice))]
    [KnownType(typeof(OrderDetail))]
    public partial class InvoiceDetail : IEntity
    {
        public InvoiceDetail()
        {
            EntitiesInitializer.Initialize(this);
            InvoiceDetailInitialize();
        }
        partial void InvoiceDetailInitialize();
    
    #region Simple Properties
        [DataMember]
        public int OrderDetailId
        {
            get { return _orderDetailId; }
            set
            {
                if (_orderDetailId == value)
                    return;
    
                OnOrderDetailIdChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    throw new InvalidOperationException("The property 'OrderDetailId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                if (!IsDeserializing)
                {
                    if (OrderDetail != null && OrderDetail.Id != value)
                    {
                        OrderDetail = null;
                    }
                }
                _orderDetailId = value;
                OnOrderDetailIdChanged(value);
                OnPropertyChanged("OrderDetailId");
            }
        }
        private int _orderDetailId;
        partial void OnOrderDetailIdChanging(ref int value);
        partial void OnOrderDetailIdChanged(int value);
        [DataMember]
        public int InvoiceId
        {
            get { return _invoiceId; }
            set
            {
                if (_invoiceId == value)
                    return;
    
                OnInvoiceIdChanging(ref value);
                if (!IsDeserializing)
                {
                    if (Invoice != null && Invoice.OrderId != value)
                    {
                        Invoice = null;
                    }
                }
                _invoiceId = value;
                OnInvoiceIdChanged(value);
                OnPropertyChanged("InvoiceId");
            }
        }
        private int _invoiceId;
        partial void OnInvoiceIdChanging(ref int value);
        partial void OnInvoiceIdChanged(int value);
        [DataMember]
        public double UnitPrice
        {
            get { return _unitPrice; }
            set
            {
                if (_unitPrice == value)
                    return;
    
                OnUnitPriceChanging(ref value);
                _unitPrice = value;
                OnUnitPriceChanged(value);
                OnPropertyChanged("UnitPrice");
            }
        }
        private double _unitPrice;
        partial void OnUnitPriceChanging(ref double value);
        partial void OnUnitPriceChanged(double value);
        [DataMember]
        public short Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity == value)
                    return;
    
                OnQuantityChanging(ref value);
                _quantity = value;
                OnQuantityChanged(value);
                OnPropertyChanged("Quantity");
            }
        }
        private short _quantity;
        partial void OnQuantityChanging(ref short value);
        partial void OnQuantityChanged(short value);
        [DataMember]
        public double Discount
        {
            get { return _discount; }
            set
            {
                if (_discount == value)
                    return;
    
                OnDiscountChanging(ref value);
                _discount = value;
                OnDiscountChanged(value);
                OnPropertyChanged("Discount");
            }
        }
        private double _discount;
        partial void OnDiscountChanging(ref double value);
        partial void OnDiscountChanged(double value);
        [DataMember]
        public double Amount
        {
            get { return _amount; }
            set
            {
                if (_amount == value)
                    return;
    
                OnAmountChanging(ref value);
                _amount = value;
                OnAmountChanged(value);
                OnPropertyChanged("Amount");
            }
        }
        private double _amount;
        partial void OnAmountChanging(ref double value);
        partial void OnAmountChanged(double value);

    #endregion

    #region Navigation Properties
        [DataMember]
        public Invoice Invoice
        {
            get { return _invoice; }
            set
            {
                if (ReferenceEquals(_invoice, value))
                    return;
    
                OnInvoiceChanging(ref value);
                var previousValue = _invoice;
                if (!(IsDeserializing || ChangeTracker.State == ObjectState.Added || ChangeTracker.ObjectsRemovedFromCollectionProperties.ContainsKey("Invoice")))
                    ChangeTracker.RecordRemovalFromCollectionProperties("Invoice", previousValue);
                _invoice = value;
                FixupInvoice(previousValue);
                OnInvoiceChanged(value);
                OnNavigationPropertyChanged("Invoice");
            }
        }
        partial void OnInvoiceChanging(ref Invoice value);
        partial void OnInvoiceChanged(Invoice value);
        private Invoice _invoice;
        [DataMember]
        public OrderDetail OrderDetail
        {
            get { return _orderDetail; }
            set
            {
                if (ReferenceEquals(_orderDetail, value))
                    return;
    
                OnOrderDetailChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                {
                    // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                    // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                    if (OrderDetailId != value.Id)
                        throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                }
                var previousValue = _orderDetail;
                if (!(IsDeserializing || ChangeTracker.State == ObjectState.Added || ChangeTracker.ObjectsRemovedFromCollectionProperties.ContainsKey("OrderDetail")))
                    ChangeTracker.RecordRemovalFromCollectionProperties("OrderDetail", previousValue);
                _orderDetail = value;
                FixupOrderDetail(previousValue);
                OnOrderDetailChanged(value);
                OnNavigationPropertyChanged("OrderDetail");
            }
        }
        partial void OnOrderDetailChanging(ref OrderDetail value);
        partial void OnOrderDetailChanged(OrderDetail value);
        private OrderDetail _orderDetail;

    #endregion

    #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
                if (! (IsDeserializing || ChangeTracker.ModifiedProperties.Contains(propertyName)))
                    ChangeTracker.ModifiedProperties.Add(propertyName);
            }
            OnCustomPropertyChanged(propertyName);
        }
        partial void OnCustomPropertyChanged(string propertyName);
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            OnCustomNavigationPropertyChanged(propertyName);
        }
        partial void OnCustomNavigationPropertyChanged(string propertyName);
    
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                _changeTracker = value;
                if(_changeTracker != null)
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            switch (e.NewState)
            {
                case ObjectState.Deleted:
                    IsDeleting = true;
                    ClearNavigationProperties();
                    IsDeleting = false;
                    break;
                case ObjectState.Detached:
                    ClearNavigationProperties();
                    break;
            }
        }
        
        private bool _isDeserializing;
        public bool IsDeserializing 
        { 
            get { return _isDeserializing; } 
            set 
            { 
                if (_isDeserializing == value)
                    return;
                _isDeserializing = value; 
            }
        }
        public bool IsInitializingRelationships { get; set; }
    
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
                this.MarkAsDeleted();
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Invoice = null;
            OrderDetail = null;
        }

    #endregion

    #region Association Fixup
        private bool IsDeleting { get; set; }
        internal virtual void Detach()
        {
            ChangeTracker.State = ObjectState.Detached;
        }
    
        private void FixupInvoice(Invoice previousValue)
        {
            if (IsDeserializing)
                return;
    
            if (previousValue != null && previousValue.InvoiceDetails.Contains(this))
                previousValue.InvoiceDetails.Remove(this);
    
            if (Invoice != null)
            {
                if (!Invoice.InvoiceDetails.Contains(this))
                    Invoice.InvoiceDetails.Add(this);
    
                InvoiceId = Invoice.OrderId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Invoice")
                    && (ChangeTracker.OriginalValues["Invoice"] == Invoice))
                    ChangeTracker.OriginalValues.Remove("Invoice");
                else
                {
                    ChangeTracker.RecordOriginalValue("Invoice", previousValue);
                }
                if (Invoice != null && !Invoice.ChangeTracker.ChangeTrackingEnabled)
                    Invoice.ChangeTracker.ChangeTrackingEnabled = true;
            }
        }
    
        private void FixupOrderDetail(OrderDetail previousValue)
        {
            if (IsDeserializing)
                return;
    
            if (previousValue != null && ReferenceEquals(previousValue.InvoiceDetail, this))
                previousValue.InvoiceDetail = null;
    
            if (OrderDetail != null)
            {
                OrderDetail.InvoiceDetail = this;
                OrderDetailId = OrderDetail.Id;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OrderDetail")
                    && (ChangeTracker.OriginalValues["OrderDetail"] == OrderDetail))
                    ChangeTracker.OriginalValues.Remove("OrderDetail");
                else
                {
                    ChangeTracker.RecordOriginalValue("OrderDetail", previousValue);
                }
                if (OrderDetail != null && !OrderDetail.ChangeTracker.ChangeTrackingEnabled)
                    OrderDetail.ChangeTracker.ChangeTrackingEnabled = true;
            }
        }

    #endregion

     
    #region EntityKey
        private Guid? _dataTransferEntityKey;
        [DataMember]
        public virtual Guid DataTransferEntityKey 
        { 
            get { return _dataTransferEntityKey ?? (_dataTransferEntityKey = Guid.NewGuid()).Value; }
            set { _dataTransferEntityKey = value; } 
        }

    #endregion

    
        void IEntity.RemoveNavigationProperties()
        {
            Invoice = null;
            OrderDetail = null;
        }
    }
}
