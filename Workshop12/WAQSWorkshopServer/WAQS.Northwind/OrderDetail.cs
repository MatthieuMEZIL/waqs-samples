//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;
using WAQS.Entities;

namespace WAQSWorkshopServer
{
    [DataContract(IsReference = true, Namespace = "http://Northwind/Entities")]
    [KnownType(typeof(InvoiceDetail))]
    [KnownType(typeof(Order))]
    [KnownType(typeof(Product))]
    public partial class OrderDetail : IEntity
    {
        public OrderDetail()
        {
            EntitiesInitializer.Initialize(this);
            OrderDetailInitialize();
        }
        partial void OrderDetailInitialize();
    
    #region Simple Properties
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id == value)
                    return;
    
                OnIdChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                _id = value;
                OnIdChanged(value);
                OnPropertyChanged("Id");
            }
        }
        private int _id;
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged(int value);
        [DataMember]
        public int OrderId
        {
            get { return _orderId; }
            set
            {
                if (_orderId == value)
                    return;
    
                OnOrderIdChanging(ref value);
                if (!IsDeserializing)
                {
                    if (Order != null && Order.Id != value)
                    {
                        Order = null;
                    }
                }
                _orderId = value;
                OnOrderIdChanged(value);
                OnPropertyChanged("OrderId");
            }
        }
        private int _orderId;
        partial void OnOrderIdChanging(ref int value);
        partial void OnOrderIdChanged(int value);
        [DataMember]
        public int ProductId
        {
            get { return _productId; }
            set
            {
                if (_productId == value)
                    return;
    
                OnProductIdChanging(ref value);
                if (!IsDeserializing)
                {
                    if (Product != null && Product.Id != value)
                    {
                        Product = null;
                    }
                }
                _productId = value;
                OnProductIdChanged(value);
                OnPropertyChanged("ProductId");
            }
        }
        private int _productId;
        partial void OnProductIdChanging(ref int value);
        partial void OnProductIdChanged(int value);
        [DataMember]
        public double UnitPrice
        {
            get { return _unitPrice; }
            set
            {
                if (_unitPrice == value)
                    return;
    
                OnUnitPriceChanging(ref value);
                _unitPrice = value;
                OnUnitPriceChanged(value);
                OnPropertyChanged("UnitPrice");
            }
        }
        private double _unitPrice;
        partial void OnUnitPriceChanging(ref double value);
        partial void OnUnitPriceChanged(double value);
        [DataMember]
        public short Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity == value)
                    return;
    
                OnQuantityChanging(ref value);
                _quantity = value;
                OnQuantityChanged(value);
                OnPropertyChanged("Quantity");
            }
        }
        private short _quantity;
        partial void OnQuantityChanging(ref short value);
        partial void OnQuantityChanged(short value);
        [DataMember]
        public double Discount
        {
            get { return _discount; }
            set
            {
                if (_discount == value)
                    return;
    
                OnDiscountChanging(ref value);
                _discount = value;
                OnDiscountChanged(value);
                OnPropertyChanged("Discount");
            }
        }
        private double _discount;
        partial void OnDiscountChanging(ref double value);
        partial void OnDiscountChanged(double value);

    #endregion

    #region Navigation Properties
        [DataMember]
        public InvoiceDetail InvoiceDetail
        {
            get { return _invoiceDetail; }
            set
            {
                if (ReferenceEquals(_invoiceDetail, value))
                    return;
    
                OnInvoiceDetailChanging(ref value);
                var previousValue = _invoiceDetail;
                if (!(IsDeserializing || ChangeTracker.State == ObjectState.Added || ChangeTracker.ObjectsRemovedFromCollectionProperties.ContainsKey("InvoiceDetail")))
                    ChangeTracker.RecordRemovalFromCollectionProperties("InvoiceDetail", previousValue);
                _invoiceDetail = value;
                FixupInvoiceDetail(previousValue);
                OnInvoiceDetailChanged(value);
                OnNavigationPropertyChanged("InvoiceDetail");
            }
        }
        partial void OnInvoiceDetailChanging(ref InvoiceDetail value);
        partial void OnInvoiceDetailChanged(InvoiceDetail value);
        private InvoiceDetail _invoiceDetail;
        [DataMember]
        public Order Order
        {
            get { return _order; }
            set
            {
                if (ReferenceEquals(_order, value))
                    return;
    
                OnOrderChanging(ref value);
                var previousValue = _order;
                if (!(IsDeserializing || ChangeTracker.State == ObjectState.Added || ChangeTracker.ObjectsRemovedFromCollectionProperties.ContainsKey("Order")))
                    ChangeTracker.RecordRemovalFromCollectionProperties("Order", previousValue);
                _order = value;
                FixupOrder(previousValue);
                OnOrderChanged(value);
                OnNavigationPropertyChanged("Order");
            }
        }
        partial void OnOrderChanging(ref Order value);
        partial void OnOrderChanged(Order value);
        private Order _order;
        [DataMember]
        public Product Product
        {
            get { return _product; }
            set
            {
                if (ReferenceEquals(_product, value))
                    return;
    
                OnProductChanging(ref value);
                var previousValue = _product;
                if (!(IsDeserializing || ChangeTracker.State == ObjectState.Added || ChangeTracker.ObjectsRemovedFromCollectionProperties.ContainsKey("Product")))
                    ChangeTracker.RecordRemovalFromCollectionProperties("Product", previousValue);
                _product = value;
                FixupProduct(previousValue);
                OnProductChanged(value);
                OnNavigationPropertyChanged("Product");
            }
        }
        partial void OnProductChanging(ref Product value);
        partial void OnProductChanged(Product value);
        private Product _product;

    #endregion

    #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
                if (! (IsDeserializing || ChangeTracker.ModifiedProperties.Contains(propertyName)))
                    ChangeTracker.ModifiedProperties.Add(propertyName);
            }
            OnCustomPropertyChanged(propertyName);
        }
        partial void OnCustomPropertyChanged(string propertyName);
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            OnCustomNavigationPropertyChanged(propertyName);
        }
        partial void OnCustomNavigationPropertyChanged(string propertyName);
    
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                _changeTracker = value;
                if(_changeTracker != null)
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            switch (e.NewState)
            {
                case ObjectState.Deleted:
                    IsDeleting = true;
                    ClearNavigationProperties();
                    IsDeleting = false;
                    break;
                case ObjectState.Detached:
                    ClearNavigationProperties();
                    break;
            }
        }
        
        private bool _isDeserializing;
        public bool IsDeserializing 
        { 
            get { return _isDeserializing; } 
            set 
            { 
                if (_isDeserializing == value)
                    return;
                _isDeserializing = value; 
            }
        }
        public bool IsInitializingRelationships { get; set; }
    
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            InvoiceDetail = null;
            Order = null;
            Product = null;
        }

    #endregion

    #region Association Fixup
        private bool IsDeleting { get; set; }
        internal virtual void Detach()
        {
            ChangeTracker.State = ObjectState.Detached;
        }
    
        private void FixupInvoiceDetail(InvoiceDetail previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (InvoiceDetail != null)
            {
                ChangeTracker.ObjectStateChanging += InvoiceDetail.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
                return;
    
            if (previousValue != null && ReferenceEquals(previousValue.OrderDetail, this))
                previousValue.OrderDetail = null;
    
            if (InvoiceDetail != null)
            {
                InvoiceDetail.OrderDetail = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("InvoiceDetail")
                    && (ChangeTracker.OriginalValues["InvoiceDetail"] == InvoiceDetail))
                    ChangeTracker.OriginalValues.Remove("InvoiceDetail");
                else
                {
                    ChangeTracker.RecordOriginalValue("InvoiceDetail", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                        previousValue.MarkAsDeleted();
                }
                if (InvoiceDetail != null && !InvoiceDetail.ChangeTracker.ChangeTrackingEnabled)
                    InvoiceDetail.ChangeTracker.ChangeTrackingEnabled = true;
            }
        }
    
        private void FixupOrder(Order previousValue)
        {
            if (IsDeserializing)
                return;
    
            if (previousValue != null && previousValue.OrderDetails.Contains(this))
                previousValue.OrderDetails.Remove(this);
    
            if (Order != null)
            {
                if (!Order.OrderDetails.Contains(this))
                    Order.OrderDetails.Add(this);
    
                OrderId = Order.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Order")
                    && (ChangeTracker.OriginalValues["Order"] == Order))
                    ChangeTracker.OriginalValues.Remove("Order");
                else
                {
                    ChangeTracker.RecordOriginalValue("Order", previousValue);
                }
                if (Order != null && !Order.ChangeTracker.ChangeTrackingEnabled)
                    Order.ChangeTracker.ChangeTrackingEnabled = true;
            }
        }
    
        private void FixupProduct(Product previousValue)
        {
            if (IsDeserializing)
                return;
    
            if (previousValue != null && previousValue.OrderDetails.Contains(this))
                previousValue.OrderDetails.Remove(this);
    
            if (Product != null)
            {
                if (!Product.OrderDetails.Contains(this))
                    Product.OrderDetails.Add(this);
    
                ProductId = Product.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Product")
                    && (ChangeTracker.OriginalValues["Product"] == Product))
                    ChangeTracker.OriginalValues.Remove("Product");
                else
                {
                    ChangeTracker.RecordOriginalValue("Product", previousValue);
                }
                if (Product != null && !Product.ChangeTracker.ChangeTrackingEnabled)
                    Product.ChangeTracker.ChangeTrackingEnabled = true;
            }
        }

    #endregion

     
    #region EntityKey
        private Guid? _dataTransferEntityKey;
        [DataMember]
        public virtual Guid DataTransferEntityKey 
        { 
            get { return _dataTransferEntityKey ?? (_dataTransferEntityKey = Guid.NewGuid()).Value; }
            set { _dataTransferEntityKey = value; } 
        }

    #endregion

    
        void IEntity.RemoveNavigationProperties()
        {
            InvoiceDetail = null;
            Order = null;
            Product = null;
        }
    }
}
