//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using WAQS.Common;
using WAQS.Service.Interfaces;
using WAQSWorkshopServer;
using WAQSWorkshopServer.DAL.Interfaces;

namespace WAQSWorkshopServer.DAL
{
    public partial class OrderDALSpecifications : IOrderDALSpecifications
    {
        private NorthwindEntities _context;
    
        public OrderDALSpecifications(NorthwindEntities context)
        {
            _context = context;
        }
    
        Expression<Func<WAQSWorkshopServer.Order, double>> IOrderDALSpecifications.TotalExpression
        {
            get { return OrderDALSpecifications.GetTotalExpression(); }
        }
    
        private static Expression<Func<WAQSWorkshopServer.Order, double>> _getTotalExpression;
        protected internal static Expression<Func<WAQSWorkshopServer.Order, double>> GetTotalExpression(bool isCoalesceEnabled = true)
        {
            if (_getTotalExpression == null)
            {
                Func<WAQSWorkshopServer.OrderDetail, double> getAmount_OrderDetail = (_) => default(double);
                Expression<Func<WAQSWorkshopServer.Order, double>> exp = (order) => order.OrderDetails.Sum(od => getAmount_OrderDetail(od));
                Func<InvocationExpression, Expression> replaceExpFunc = null;
                replaceExpFunc = invocationExpression =>
                    {
                        MemberExpression memberExpression = invocationExpression.Expression as MemberExpression;
                        if (memberExpression == null)
                            return invocationExpression;
                        switch (memberExpression.Member.Name)
                        {
                            case "getAmount_OrderDetail":
                            {
                                var getAmount_OrderDetailSubExp = OrderDetailDALSpecifications.GetAmountExpression(isCoalesceEnabled : false);
                                if (getAmount_OrderDetailSubExp == null)
                                    return null;
                                Expression subExp = getAmount_OrderDetailSubExp.Body.ReplaceParameter(parameter => 
                                    {
                                        int index = getAmount_OrderDetailSubExp.Parameters.IndexOf(parameter);
                                        if (index == -1)
                                            return parameter;
                                        return invocationExpression.Arguments[index].ReplaceInvocation(replaceExpFunc);
                                    });
                                return subExp;
                            }
                            default:
                                return invocationExpression;
                        }
                    };
                exp = (Expression<Func<WAQSWorkshopServer.Order, double>>)exp.ReplaceInvocation(replaceExpFunc);
                if (exp != null && isCoalesceEnabled)
                    exp = (Expression<Func<WAQSWorkshopServer.Order, double>>)exp.ReplaceExpression(exp.Body, Expression.Coalesce(Expression.Convert(exp.Body, typeof(double?)), Expression.Constant(default(double))));
                _getTotalExpression = exp;
            }
            GetTotalExpression(ref _getTotalExpression);
            return _getTotalExpression;
        }
        static partial void GetTotalExpression(ref Expression<Func<WAQSWorkshopServer.Order, double>> exp);
    
        Expression<Func<WAQSWorkshopServer.Order, string>> IOrderDALSpecifications.CustomerCompanyNameExpression
        {
            get { return OrderDALSpecifications.GetCustomerCompanyNameExpression(); }
        }
    
        private static Expression<Func<WAQSWorkshopServer.Order, string>> _getCustomerCompanyNameExpression;
        protected internal static Expression<Func<WAQSWorkshopServer.Order, string>> GetCustomerCompanyNameExpression(bool isCoalesceEnabled = true)
        {
            if (_getCustomerCompanyNameExpression == null)
            {
                Expression<Func<WAQSWorkshopServer.Order, string>> exp = (order) => order.Customer.CompanyName;
                _getCustomerCompanyNameExpression = exp;
            }
            GetCustomerCompanyNameExpression(ref _getCustomerCompanyNameExpression);
            return _getCustomerCompanyNameExpression;
        }
        static partial void GetCustomerCompanyNameExpression(ref Expression<Func<WAQSWorkshopServer.Order, string>> exp);
    
        Expression<Func<WAQSWorkshopServer.Order, string>> IOrderDALSpecifications.CustomerContactNameExpression
        {
            get { return OrderDALSpecifications.GetCustomerContactNameExpression(); }
        }
    
        private static Expression<Func<WAQSWorkshopServer.Order, string>> _getCustomerContactNameExpression;
        protected internal static Expression<Func<WAQSWorkshopServer.Order, string>> GetCustomerContactNameExpression(bool isCoalesceEnabled = true)
        {
            if (_getCustomerContactNameExpression == null)
            {
                Expression<Func<WAQSWorkshopServer.Order, string>> exp = (order) => order.Customer.ContactName;
                _getCustomerContactNameExpression = exp;
            }
            GetCustomerContactNameExpression(ref _getCustomerContactNameExpression);
            return _getCustomerContactNameExpression;
        }
        static partial void GetCustomerContactNameExpression(ref Expression<Func<WAQSWorkshopServer.Order, string>> exp);
    
        Expression<Func<WAQSWorkshopServer.Order, bool>> IOrderDALSpecifications.HasInvoiceExpression
        {
            get { return OrderDALSpecifications.GetHasInvoiceExpression(); }
        }
    
        private static Expression<Func<WAQSWorkshopServer.Order, bool>> _getHasInvoiceExpression;
        protected internal static Expression<Func<WAQSWorkshopServer.Order, bool>> GetHasInvoiceExpression(bool isCoalesceEnabled = true)
        {
            if (_getHasInvoiceExpression == null)
            {
                Expression<Func<WAQSWorkshopServer.Order, bool>> exp = (order) => order.Invoice != null;
                _getHasInvoiceExpression = exp;
            }
            GetHasInvoiceExpression(ref _getHasInvoiceExpression);
            return _getHasInvoiceExpression;
        }
        static partial void GetHasInvoiceExpression(ref Expression<Func<WAQSWorkshopServer.Order, bool>> exp);
    
        Expression<Func<WAQSWorkshopServer.Order, bool>> IOrderDALSpecifications.ValidateOrderHasOrderLinesExpressionCondition
        {
            get { return OrderDALSpecifications.ValidateConditionValidateOrderHasOrderLinesExpression(); }
        }
    
        private static Expression<Func<WAQSWorkshopServer.Order, bool>> _validateConditionValidateOrderHasOrderLinesExpression;
        protected internal static Expression<Func<WAQSWorkshopServer.Order, bool>> ValidateConditionValidateOrderHasOrderLinesExpression(bool isCoalesceEnabled = true)
        {
            if (_validateConditionValidateOrderHasOrderLinesExpression == null)
            {
                Expression<Func<WAQSWorkshopServer.Order, bool>> exp = (o) => !o.OrderDetails.Any();
                _validateConditionValidateOrderHasOrderLinesExpression = exp;
            }
            ValidateConditionValidateOrderHasOrderLinesExpression(ref _validateConditionValidateOrderHasOrderLinesExpression);
            return _validateConditionValidateOrderHasOrderLinesExpression;
        }
        static partial void ValidateConditionValidateOrderHasOrderLinesExpression(ref Expression<Func<WAQSWorkshopServer.Order, bool>> exp);
    
    }
}
