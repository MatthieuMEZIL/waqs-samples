//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace WAQS.Entities
{
    public class TrackableCollection<T> : ObservableCollection<T>
    	where T : IEntity
    {
    	public TrackableCollection()
    	{
    	}
    
    	public TrackableCollection(IEnumerable<T> collection)
    		: base(collection)
    	{
    	}
    
    	public IEntity Owner { get; set; }
    	public string Name { get; set; }
    
        public void AddRange(IEnumerable<T> items)
        {
            foreach (T item in items)
                Add(item);
        }
        
        public void Attach(T item)
        {
        	TrackableCollectionExtensions.AttachAction(Owner, item, Name);
        }
    
        public void AttachRange(IEnumerable<T> items)
        {
            foreach (T item in items)
                Attach(item);
        }
    
    	public bool IsAttachingOrDetaching { get; set; }
    
    	protected override void ClearItems()
    	{
    		new List<T>(this).ForEach(t => Remove(t));
    	}
    
    	protected override void InsertItem(int index, T item)
    	{
    		if (!Contains(item))
    		{
    			base.InsertItem(index, item);
    		}
    	}
    }
}
