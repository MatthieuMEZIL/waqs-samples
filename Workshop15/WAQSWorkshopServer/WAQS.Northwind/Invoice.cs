//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;
using WAQS.Entities;

namespace WAQSWorkshopServer
{
    [DataContract(IsReference = true, Namespace = "http://Northwind/Entities")]
    [KnownType(typeof(Customer))]
    [KnownType(typeof(InvoiceDetail))]
    [KnownType(typeof(Order))]
    public partial class Invoice : IEntity
    {
        public Invoice()
        {
            EntitiesInitializer.Initialize(this);
            InvoiceInitialize();
        }
        partial void InvoiceInitialize();
    
    #region Simple Properties
        [DataMember]
        public int OrderId
        {
            get { return _orderId; }
            set
            {
                if (_orderId == value)
                    return;
    
                OnOrderIdChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    throw new InvalidOperationException("The property 'OrderId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                if (!IsDeserializing)
                {
                    if (Order != null && Order.Id != value)
                    {
                        Order = null;
                    }
                }
                _orderId = value;
                OnOrderIdChanged(value);
                OnPropertyChanged("OrderId");
            }
        }
        private int _orderId;
        partial void OnOrderIdChanging(ref int value);
        partial void OnOrderIdChanged(int value);
        [DataMember]
        public string CustomerId
        {
            get { return _customerId; }
            set
            {
                if (_customerId == value)
                    return;
    
                OnCustomerIdChanging(ref value);
                if (!IsDeserializing)
                {
                    if (Customer != null && Customer.Id != value)
                    {
                        Customer = null;
                    }
                }
                if (value != null)
                    value = value.PadRight(5);
                _customerId = value;
                OnCustomerIdChanged(value);
                OnPropertyChanged("CustomerId");
            }
        }
        private string _customerId;
        partial void OnCustomerIdChanging(ref string value);
        partial void OnCustomerIdChanged(string value);
        [DataMember]
        public string CustomerCompanyName
        {
            get { return _customerCompanyName; }
            set
            {
                if (_customerCompanyName == value)
                    return;
    
                OnCustomerCompanyNameChanging(ref value);
                _customerCompanyName = value;
                OnCustomerCompanyNameChanged(value);
                OnPropertyChanged("CustomerCompanyName");
            }
        }
        private string _customerCompanyName;
        partial void OnCustomerCompanyNameChanging(ref string value);
        partial void OnCustomerCompanyNameChanged(string value);
        [DataMember]
        public string CustomerContactName
        {
            get { return _customerContactName; }
            set
            {
                if (_customerContactName == value)
                    return;
    
                OnCustomerContactNameChanging(ref value);
                _customerContactName = value;
                OnCustomerContactNameChanged(value);
                OnPropertyChanged("CustomerContactName");
            }
        }
        private string _customerContactName;
        partial void OnCustomerContactNameChanging(ref string value);
        partial void OnCustomerContactNameChanged(string value);
        [DataMember]
        public double Total
        {
            get { return _total; }
            set
            {
                if (_total == value)
                    return;
    
                OnTotalChanging(ref value);
                _total = value;
                OnTotalChanged(value);
                OnPropertyChanged("Total");
            }
        }
        private double _total;
        partial void OnTotalChanging(ref double value);
        partial void OnTotalChanged(double value);
        [DataMember]
        public double Dicount
        {
            get { return _dicount; }
            set
            {
                if (_dicount == value)
                    return;
    
                OnDicountChanging(ref value);
                _dicount = value;
                OnDicountChanged(value);
                OnPropertyChanged("Dicount");
            }
        }
        private double _dicount;
        partial void OnDicountChanging(ref double value);
        partial void OnDicountChanged(double value);
        [DataMember]
        public bool Paid
        {
            get { return _paid; }
            set
            {
                if (_paid == value)
                    return;
    
                OnPaidChanging(ref value);
                _paid = value;
                OnPaidChanged(value);
                OnPropertyChanged("Paid");
            }
        }
        private bool _paid;
        partial void OnPaidChanging(ref bool value);
        partial void OnPaidChanged(bool value);

    #endregion

    #region Navigation Properties
        [DataMember]
        public Customer Customer
        {
            get { return _customer; }
            set
            {
                if (ReferenceEquals(_customer, value))
                    return;
    
                OnCustomerChanging(ref value);
                var previousValue = _customer;
                if (!(IsDeserializing || ChangeTracker.State == ObjectState.Added || ChangeTracker.ObjectsRemovedFromCollectionProperties.ContainsKey("Customer")))
                    ChangeTracker.RecordRemovalFromCollectionProperties("Customer", previousValue);
                _customer = value;
                FixupCustomer(previousValue);
                OnCustomerChanged(value);
                OnNavigationPropertyChanged("Customer");
            }
        }
        partial void OnCustomerChanging(ref Customer value);
        partial void OnCustomerChanged(Customer value);
        private Customer _customer;
        [DataMember]
        public TrackableCollection<InvoiceDetail> InvoiceDetails
        {
            get
            {
                if (_invoiceDetails == null)
                {
                    _invoiceDetails = new TrackableCollection<InvoiceDetail>() { Owner = this, Name = "InvoiceDetails" };
                    _invoiceDetails.CollectionChanged += FixupInvoiceDetails;
                }
                return _invoiceDetails;
            }
            set
            {
                if (ReferenceEquals(_invoiceDetails, value))
                    return;
    
                if (ChangeTracker.ChangeTrackingEnabled)
                    throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    
                if (_invoiceDetails != null)
                {
                    _invoiceDetails.CollectionChanged -= FixupInvoiceDetails;
                }
                _invoiceDetails = value;
                if (_invoiceDetails != null)
                {
                    _invoiceDetails.Owner = this;
                    _invoiceDetails.Name = "InvoiceDetails";
                    _invoiceDetails.CollectionChanged += FixupInvoiceDetails;
                }
                OnNavigationPropertyChanged("InvoiceDetails");
            }
        }
        private TrackableCollection<InvoiceDetail> _invoiceDetails;
        [DataMember]
        public Order Order
        {
            get { return _order; }
            set
            {
                if (ReferenceEquals(_order, value))
                    return;
    
                OnOrderChanging(ref value);
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                {
                    // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                    // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                    if (OrderId != value.Id)
                        throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                }
                var previousValue = _order;
                if (!(IsDeserializing || ChangeTracker.State == ObjectState.Added || ChangeTracker.ObjectsRemovedFromCollectionProperties.ContainsKey("Order")))
                    ChangeTracker.RecordRemovalFromCollectionProperties("Order", previousValue);
                _order = value;
                FixupOrder(previousValue);
                OnOrderChanged(value);
                OnNavigationPropertyChanged("Order");
            }
        }
        partial void OnOrderChanging(ref Order value);
        partial void OnOrderChanged(Order value);
        private Order _order;

    #endregion

    #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
                if (! (IsDeserializing || ChangeTracker.ModifiedProperties.Contains(propertyName)))
                    ChangeTracker.ModifiedProperties.Add(propertyName);
            }
            OnCustomPropertyChanged(propertyName);
        }
        partial void OnCustomPropertyChanged(string propertyName);
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            OnCustomNavigationPropertyChanged(propertyName);
        }
        partial void OnCustomNavigationPropertyChanged(string propertyName);
    
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                _changeTracker = value;
                if(_changeTracker != null)
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            switch (e.NewState)
            {
                case ObjectState.Deleted:
                    IsDeleting = true;
                    ClearNavigationProperties();
                    IsDeleting = false;
                    break;
                case ObjectState.Detached:
                    ClearNavigationProperties();
                    break;
            }
        }
        
        private bool _isDeserializing;
        public bool IsDeserializing 
        { 
            get { return _isDeserializing; } 
            set 
            { 
                if (_isDeserializing == value)
                    return;
                _isDeserializing = value; 
            }
        }
        public bool IsInitializingRelationships { get; set; }
    
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
                this.MarkAsDeleted();
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Customer = null;
            InvoiceDetails.Clear();
            Order = null;
        }

    #endregion

    #region Association Fixup
        private bool IsDeleting { get; set; }
        internal virtual void Detach()
        {
            ChangeTracker.State = ObjectState.Detached;
        }
    
        private void FixupCustomer(Customer previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
                return;
    
            if (previousValue != null && previousValue.Invoices.Contains(this))
                previousValue.Invoices.Remove(this);
    
            if (Customer != null)
            {
                if (!Customer.Invoices.Contains(this))
                    Customer.Invoices.Add(this);
    
                CustomerId = Customer.Id;
            }
            else if (! (skipKeys || IsDeleting || previousValue.ChangeTracker.State == ObjectState.Detached))
            {
                CustomerId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Customer")
                    && (ChangeTracker.OriginalValues["Customer"] == Customer))
                    ChangeTracker.OriginalValues.Remove("Customer");
                else
                {
                    ChangeTracker.RecordOriginalValue("Customer", previousValue);
                }
                if (Customer != null && !Customer.ChangeTracker.ChangeTrackingEnabled)
                    Customer.ChangeTracker.ChangeTrackingEnabled = true;
            }
        }
    
        private void FixupOrder(Order previousValue)
        {
            if (IsDeserializing)
                return;
    
            if (previousValue != null && ReferenceEquals(previousValue.Invoice, this))
                previousValue.Invoice = null;
    
            if (Order != null)
            {
                Order.Invoice = this;
                OrderId = Order.Id;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Order")
                    && (ChangeTracker.OriginalValues["Order"] == Order))
                    ChangeTracker.OriginalValues.Remove("Order");
                else
                {
                    ChangeTracker.RecordOriginalValue("Order", previousValue);
                }
                if (Order != null && !Order.ChangeTracker.ChangeTrackingEnabled)
                    Order.ChangeTracker.ChangeTrackingEnabled = true;
            }
        }
    
        private void FixupInvoiceDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
                return;
    
            if (e.NewItems != null)
            {
                foreach (InvoiceDetail item in e.NewItems)
                {
                    item.Invoice = this;
                    if (ChangeTracker != null && ChangeTracker.ChangeTrackingEnabled && item.ChangeTracker != null && item.ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                            item.MarkAsAdded();
                        ChangeTracker.RecordAdditionToCollectionProperties("InvoiceDetails", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (InvoiceDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.Invoice, this))
                    {
                        item.Invoice = null;
                    }
                    if (ChangeTracker != null && ChangeTracker.ChangeTrackingEnabled && item.ChangeTracker != null && item.ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("InvoiceDetails", item);
                    }
                }
            }
        }

    #endregion

     
    #region EntityKey
        private Guid? _dataTransferEntityKey;
        [DataMember]
        public virtual Guid DataTransferEntityKey 
        { 
            get { return _dataTransferEntityKey ?? (_dataTransferEntityKey = Guid.NewGuid()).Value; }
            set { _dataTransferEntityKey = value; } 
        }

    #endregion

    
        void IEntity.RemoveNavigationProperties()
        {
            Customer = null;
            InvoiceDetails.Clear();
            Order = null;
        }
    }
}
